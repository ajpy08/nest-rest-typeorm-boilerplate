var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.686,1,1.894]],["body/controllers/AppController.html",[0,2.562,1,2.241,2,1.383,3,0.307,4,0.265,5,0.186,6,2.053,7,1.017,8,2.878,9,0.399,10,1.325,11,1.894,12,3.728,13,3.588,14,3.804,15,2.053,16,1.446,17,2.1,18,0.039,19,2.487,20,2.487,21,3.274,22,3.588,23,3.588,24,2.487,25,4.608,26,3.47,27,3.588,28,3.804,29,3.804,30,0.946,31,2.487,32,4.202,33,3.804,34,1.325,35,0.989,36,0.352,37,1.202,38,1.99,39,1.401,40,2.487,41,2.487,42,2.487,43,3.588,44,4.608,45,2.962,46,2.487,47,2.487,48,2.962,49,1.79,50,2.241,51,2.549,52,0.542,53,1.544,54,2.487,55,0.685,56,2.299,57,2.053,58,3.588,59,4.033,60,1.383,61,2.487,62,1.553,63,1.702,64,1.553,65,3.588,66,3.588,67,1.553,68,1.553,69,1.553,70,0.307,71,0.047,72,1.202,73,1.461,74,1.461,75,4.209,76,1.049,77,2.487,78,2.487,79,2.487,80,0.918,81,0.449,82,2.487,83,2.487,84,2.878,85,3.588,86,2.487,87,2.487,88,2.487,89,2.487,90,2.487,91,1.383,92,2.487,93,0.015,94,0.022,95,0.015]],["title/modules/AppModule.html",[81,0.548,96,1.686]],["body/modules/AppModule.html",[1,2.656,2,2.021,3,0.526,4,0.27,5,0.272,18,0.039,36,0.359,38,1.031,52,0.613,55,0.698,56,2.556,57,2.09,67,1.582,68,1.582,69,1.582,70,0.313,71,0.048,76,0.906,81,0.768,93,0.016,94,0.022,95,0.016,96,3.225,97,1.031,98,1.031,99,1.408,100,1.408,101,1.408,102,1.914,103,1.264,104,2.09,105,2.09,106,2.09,107,2.848,108,2.693,109,2.556,110,2.736,111,2.021,112,1.408,113,1.264,114,2.532,115,2.902,116,1.914,117,3.635,118,2.09,119,2.09,120,2.09,121,3.635,122,1.582,123,2.532,124,2.09,125,1.454,126,1.408,127,2.532,128,2.09,129,2.532,130,2.532,131,1.031,132,2.09,133,2.532,134,1.814,135,2.27,136,2.532,137,2.532,138,2.532,139,2.09,140,2.532,141,2.532,142,1.031,143,2.532,144,1.408,145,2.532,146,2.532,147,2.532,148,2.532,149,2.532,150,3.635,151,2.532,152,2.021,153,2.532,154,4.252,155,3.836,156,3.635,157,3.635,158,2.091,159,2.27,160,3.635,161,1.557,162,3.635,163,3.635,164,2.532,165,3.635,166,2.532,167,1.799,168,2.532,169,2.532,170,2.532,171,2.532,172,2.532,173,2.532,174,2.532,175,2.532,176,2.532,177,2.532,178,2.532,179,2.532]],["title/injectables/AppService.html",[56,1.513,180,1.12]],["body/injectables/AppService.html",[3,0.414,4,0.357,5,0.25,7,0.797,9,0.538,10,1.628,14,4.32,16,1.357,18,0.039,30,0.991,34,1.238,35,0.923,36,0.475,37,1.123,39,1.34,48,3.639,49,2.785,51,3.132,52,0.525,53,1.477,55,0.923,56,2.2,70,0.414,71,0.063,72,1.754,73,1.796,74,1.365,76,0.835,93,0.021,94,0.027,95,0.021,116,1.508,125,1.498,126,1.863,134,1.672,158,2.512,180,1.628,181,1.863,182,2.766,183,3.351,184,3.711,185,3.351,186,2.739,187,2.2,188,3.351,189,2.753,190,3.351,191,1.123,192,4.926,193,3.351,194,3.351,195,2.093]],["title/controllers/AuthController.html",[0,1.686,196,1.894]],["body/controllers/AuthController.html",[0,2.379,2,1.424,3,0.316,4,0.273,5,0.191,7,1.057,9,0.411,10,1.353,11,2.314,17,1.828,18,0.039,26,2.288,28,3.855,30,0.824,32,3.855,34,1.353,35,1.01,36,0.519,37,1.228,39,1.114,45,2.113,52,0.548,53,1.565,55,0.705,59,4.369,60,1.424,63,1.825,64,1.599,70,0.316,71,0.048,72,1.228,73,1.492,74,1.492,76,0.913,80,1.58,84,3.211,91,2.597,93,0.016,94,0.023,95,0.016,158,1.649,191,1.228,196,2.288,197,2.113,198,2.56,199,2.56,200,3.306,201,3.846,202,3.855,203,2.56,204,2.748,205,2.56,206,4.67,207,3.664,208,4.67,209,3.664,210,4.67,211,4.67,212,2.56,213,3.211,214,3.855,215,2.56,216,2.748,217,2.56,218,4.67,219,2.56,220,2.56,221,2.56,222,2.466,223,2.113,224,2.113,225,2.56,226,2.56,227,2.56,228,2.56,229,3.664,230,2.56,231,2.56,232,3.664,233,2.56,234,2.56,235,2.56]],["title/modules/AuthModule.html",[81,0.548,107,1.686]],["body/modules/AuthModule.html",[2,2.35,3,0.389,4,0.335,5,0.235,11,1.416,18,0.039,52,0.614,55,0.867,62,1.965,70,0.389,71,0.059,76,0.784,81,0.863,93,0.019,94,0.026,95,0.019,97,1.281,98,1.281,99,1.749,100,1.749,101,1.749,102,2.149,103,2.109,107,3.293,108,2.795,109,2.736,111,2.35,112,1.749,113,1.57,115,2.982,124,2.597,125,1.406,126,1.749,128,2.597,134,1.57,135,1.965,196,2.982,222,2.736,223,2.597,236,2.597,237,3.146,238,2.597,239,3.049,240,3.146,241,3.146,242,3.146,243,3.146,244,2.235,245,3.146,246,4.227,247,4.227,248,2.64,249,3.146,250,2.597,251,2.597,252,3.146,253,4.227,254,3.146,255,1.965]],["title/injectables/AuthService.html",[180,1.12,222,1.513]],["body/injectables/AuthService.html",[3,0.249,4,0.215,5,0.151,7,0.554,9,0.323,10,1.133,11,2.121,16,1.392,18,0.039,30,1.006,34,1.535,35,1.299,36,0.667,37,1.393,38,1.693,39,1.13,52,0.502,53,1.693,55,0.555,63,1.911,64,1.258,70,0.249,71,0.038,72,1.393,73,2.108,74,1.92,76,0.927,80,1.911,91,1.12,93,0.012,94,0.019,95,0.012,125,1.392,126,1.12,142,1.25,144,1.706,155,2.533,158,2.206,159,2.322,161,0.675,180,1.133,181,1.12,186,1.12,187,1.005,191,1.499,200,1.917,201,1.431,204,2.488,213,2.322,214,1.663,222,1.531,224,1.663,244,1.431,248,2.596,256,1.663,257,1.381,258,3.717,259,3.717,260,3.069,261,3.717,262,2.014,263,5.052,264,3.069,265,2.014,266,2.014,267,2.18,268,3.069,269,2.944,270,2.533,271,3.069,272,2.014,273,3.069,274,3.891,275,4.272,276,3.069,277,3.069,278,2.014,279,2.014,280,3.069,281,2.18,282,2.533,283,2.533,284,2.533,285,1.663,286,3.069,287,2.014,288,1.663,289,1.706,290,2.18,291,2.014,292,2.014,293,2.014,294,2.014,295,2.014,296,2.014,297,4.473,298,2.014,299,3.717,300,3.693,301,3.069,302,2.533,303,3.717,304,2.641,305,2.014,306,1.663,307,2.014,308,3.069,309,2.014,310,1.258,311,1.431,312,2.014,313,2.014]],["title/modules/ConfigModule.html",[81,0.548,108,1.513]],["body/modules/ConfigModule.html",[3,0.5,4,0.431,5,0.302,18,0.038,52,0.529,55,1.114,70,0.5,71,0.076,81,0.972,93,0.025,94,0.031,95,0.025,97,1.647,98,1.647,99,2.249,100,2.249,101,2.249,102,2.236,103,2.683,108,2.873,111,2.762,112,2.249,113,2.018,125,1.652,161,1.355,314,3.338,315,3.338,316,4.044,317,4.044,318,3.338,319,4.044,320,4.044]],["title/classes/ConfigService.html",[71,0.057,125,0.835]],["body/classes/ConfigService.html",[3,0.267,4,0.23,5,0.362,7,0.39,9,0.347,10,1.194,16,1.607,18,0.039,30,1.037,34,1.59,35,1.186,36,0.653,37,1.443,39,1.525,49,2.148,50,3.356,52,0.413,53,1.443,70,0.4,71,0.041,72,1.299,73,1.971,74,1.579,76,0.966,84,1.348,93,0.013,94,0.02,95,0.013,125,0.891,158,1.455,161,0.723,167,2.754,186,2.155,187,2.3,191,1.299,195,1.348,257,1.455,281,3.058,310,1.348,321,0.971,322,1.533,323,3.578,324,3.233,325,2.421,326,3.233,327,2.669,328,3.233,329,2.669,330,3.058,331,2.669,332,2.669,333,2.394,334,2.669,335,2.158,336,2.297,337,3.666,338,2.669,339,2.394,340,2.297,341,2.669,342,2.158,343,2.297,344,3.553,345,3.058,346,2.669,347,2.754,348,3.2,349,2.019,350,2.669,351,2.158,352,2.669,353,2.669,354,2.669,355,2.669,356,2.669,357,2.669,358,1.934,359,2.669,360,1.782,361,1.533,362,3.2,363,1.533,364,2.669,365,1.533,366,1.077,367,1.782,368,1.782,369,1.782,370,1.782,371,1.533,372,1.533,373,1.782,374,1.782,375,1.782,376,1.533,377,1.782,378,1.782,379,1.2,380,1.782,381,1.782,382,1.533,383,1.533,384,1.782,385,1.533,386,1.782,387,1.533,388,1.782,389,1.533,390,1.782,391,1.533,392,1.782,393,1.533,394,1.782,395,1.533,396,1.782,397,1.533,398,1.782,399,1.348,400,2.297,401,1.782,402,2.669,403,1.782,404,1.782,405,1.782,406,1.782,407,1.782]],["title/interfaces/EnvConfig.html",[323,1.894,366,1.513]],["body/interfaces/EnvConfig.html",[3,0.324,4,0.279,5,0.353,7,0.473,16,1.607,18,0.039,30,0.589,39,1.317,49,1.858,50,3.113,52,0.461,53,1.581,70,0.46,71,0.049,72,0.877,73,1.516,74,1.066,76,1.08,84,1.635,93,0.016,94,0.023,95,0.016,125,0.721,158,1.178,161,0.877,167,3.078,186,2.07,187,2.161,191,1.452,195,1.635,281,2.645,310,1.635,322,1.86,323,3.51,325,1.635,327,2.161,329,2.161,330,2.645,331,2.161,332,2.161,333,2.07,334,2.161,336,1.86,337,3.786,338,2.161,339,2.623,340,1.86,341,2.161,343,1.86,344,3.073,345,2.645,346,2.161,347,2.645,348,3.073,349,1.635,350,2.161,352,2.161,353,2.161,354,2.161,355,2.161,356,2.161,357,2.161,358,1.858,359,2.161,360,2.161,361,1.86,362,3.576,363,1.86,364,3.073,365,2.645,366,1.306,367,2.161,368,2.161,369,2.161,370,2.161,371,1.86,372,1.86,373,2.161,374,2.161,375,2.161,376,1.86,377,2.161,378,2.161,379,1.456,380,2.161,381,2.161,382,1.86,383,1.86,384,2.161,385,1.86,386,2.161,387,1.86,388,2.161,389,1.86,390,2.161,391,1.86,392,2.161,393,1.86,394,2.161,395,1.86,396,2.161,397,1.86,398,2.161,399,1.635,400,2.645,401,2.161,402,3.073,403,2.161,404,2.161,405,2.161,406,2.161,407,2.161,408,1.86,409,2.618,410,2.618]],["title/injectables/JwtStrategy.html",[180,1.12,239,1.686]],["body/injectables/JwtStrategy.html",[3,0.373,4,0.321,5,0.225,7,0.742,9,0.484,10,1.517,11,2.103,18,0.039,26,2.566,30,0.924,34,1.517,35,1.132,36,0.582,37,1.377,39,0.917,52,0.559,53,1.681,55,0.831,62,1.884,63,2.112,64,1.884,70,0.373,71,0.088,72,1.681,73,1.229,74,1.673,76,0.752,93,0.019,94,0.025,95,0.019,125,1.554,126,1.677,152,1.677,159,2.566,180,1.517,181,1.677,189,1.884,191,1.011,239,2.284,248,3.133,251,2.49,269,3.278,284,2.49,289,1.677,343,2.919,371,3.319,400,2.143,411,2.49,412,4.672,413,3.016,414,3.016,415,3.016,416,5.415,417,5.016,418,3.016,419,4.108,420,4.108,421,4.108,422,4.108,423,3.016,424,2.49,425,3.016,426,2.49,427,3.016,428,3.016,429,3.016,430,3.016,431,3.016,432,4.108,433,4.108,434,4.108,435,3.016]],["title/classes/LoginPayload.html",[71,0.057,204,1.686]],["body/classes/LoginPayload.html",[3,0.457,4,0.394,5,0.276,7,0.668,9,0.594,16,1.497,17,2.345,18,0.038,30,1.057,36,0.665,38,2.284,52,0.501,60,2.057,70,0.457,71,0.102,93,0.023,94,0.029,95,0.023,142,2.284,152,2.613,201,3.339,204,2.613,257,2.115,321,1.665,379,2.613,436,3.054,437,4.699,438,3.879,439,3.054,440,3.699,441,4.485,442,3.054,443,3.699,444,4.263,445,3.879,446,4.263,447,3.054,448,2.628,449,3.054]],["title/classes/PasswordTransformer.html",[71,0.057,450,1.894]],["body/classes/PasswordTransformer.html",[3,0.444,4,0.383,5,0.269,7,0.921,9,0.577,10,1.704,16,1.481,18,0.038,30,1.037,34,1.704,35,1.271,37,1.546,39,1.403,52,0.491,53,1.546,70,0.444,71,0.096,76,1.34,93,0.022,94,0.028,95,0.022,142,1.879,321,1.618,339,3.291,450,2.881,451,2.967,452,3.278,453,4.613,454,5.095,455,4.613,456,3.594,457,4.613,458,4.437,459,4.613,460,3.594,461,4.613,462,3.278,463,1.793,464,2.967,465,3.594]],["title/classes/Profile.html",[71,0.057,80,1.12]],["body/classes/Profile.html",[3,0.34,4,0.293,5,0.206,7,0.497,9,0.442,16,1.52,17,2.627,18,0.039,21,1.956,30,1.184,35,1.489,36,0.745,38,2.069,52,0.514,70,0.34,71,0.091,80,1.782,93,0.017,94,0.024,95,0.017,131,2.283,142,2.069,144,2.145,152,2.145,161,0.923,255,2.409,257,1.736,289,2.476,290,3.609,321,1.239,450,3.013,452,3.163,458,3.184,463,1.374,466,2.273,467,4.345,468,4.965,469,2.753,470,3.675,471,2.753,472,2.74,473,2.753,474,2.753,475,3.857,476,3.857,477,2.753,478,2.753,479,3.857,480,3.857,481,3.857,482,3.857,483,2.753,484,2.273,485,2.753,486,3.184,487,2.74,488,3.184,489,3.184,490,2.753,491,2.753,492,3.857,493,2.753,494,2.753,495,1.956,496,2.753,497,2.753,498,2.273,499,2.753]],["title/modules/ProfileModule.html",[81,0.548,109,1.513]],["body/modules/ProfileModule.html",[3,0.474,4,0.408,5,0.286,18,0.038,52,0.604,55,1.056,63,2.25,70,0.474,71,0.072,80,1.415,81,0.948,93,0.024,94,0.03,95,0.024,97,1.561,98,1.561,99,2.131,100,2.131,101,2.131,102,2.362,103,2.619,109,2.928,111,2.672,112,2.131,113,1.912,115,2.394,120,3.163,122,2.394,131,1.957,495,2.723,500,3.163,501,3.163,502,3.163,503,3.832,504,3.832,505,3.163,506,3.832]],["title/injectables/ProfileService.html",[63,1.12,180,1.12]],["body/injectables/ProfileService.html",[3,0.247,4,0.213,5,0.149,7,0.551,9,0.321,10,1.127,11,2.524,12,2.629,15,2.519,16,1.558,18,0.039,29,1.651,30,1.099,34,1.736,35,1.347,36,0.666,37,1.575,38,2.348,39,1.356,52,0.521,53,1.689,55,0.551,63,1.127,70,0.247,71,0.038,72,1.388,73,1.243,74,1.243,76,1.111,80,2.103,91,2.613,93,0.012,94,0.019,95,0.012,122,1.249,131,2.053,142,2.053,144,2.303,158,1.374,159,1.906,161,1.24,180,1.127,181,1.112,191,1.24,213,2.785,216,2.48,255,2.586,267,2.168,282,1.651,289,1.697,304,1.421,310,1.906,311,1.421,336,3.339,462,2.168,463,0.998,464,1.651,472,2.168,487,1.421,495,1.421,505,1.651,507,1.651,508,2.519,509,3.052,510,3.052,511,2,512,5.165,513,4.141,514,2,515,3.701,516,3.052,517,2,518,2,519,3.052,520,3.701,521,3.052,522,2,523,3.052,524,2,525,3.052,526,2,527,3.052,528,3.052,529,3.052,530,2,531,2,532,2,533,2,534,2,535,2,536,2,537,2,538,2,539,2,540,2,541,2,542,2,543,2,544,2,545,2,546,2,547,2,548,1.651,549,1.651,550,2,551,2,552,2,553,1.421,554,1.651,555,2,556,2,557,2,558,3.052,559,2,560,2,561,2,562,2]],["title/classes/RegisterPayload.html",[71,0.057,216,1.686]],["body/classes/RegisterPayload.html",[3,0.393,4,0.339,5,0.238,7,0.575,9,0.511,16,1.573,17,2.558,18,0.039,30,1.153,35,1.473,36,0.726,38,2.177,52,0.454,60,1.769,70,0.393,71,0.096,93,0.02,94,0.026,95,0.02,142,2.177,152,2.851,202,3.516,213,2.66,216,2.368,257,1.917,290,3.797,321,1.432,345,2.261,379,2.851,438,4.232,439,2.627,441,4.712,442,2.627,444,4.412,445,3.516,446,4.541,447,2.627,448,2.261,449,2.627,563,2.627,564,3.182,565,3.182,566,3.182,567,4.259,568,4.259,569,3.182,570,3.182,571,3.182,572,3.182,573,4.259,574,3.182]],["title/classes/Roles.html",[71,0.057,131,1.235]],["body/classes/Roles.html",[3,0.385,4,0.331,5,0.232,7,0.562,8,2.62,9,0.5,12,2.98,17,2.368,18,0.038,21,2.98,30,1.067,36,0.719,52,0.506,68,2.62,70,0.385,71,0.089,80,2.183,93,0.019,94,0.026,95,0.019,131,2.069,132,2.568,255,2.62,257,1.888,270,3.463,285,2.568,289,2.639,321,1.4,358,2.535,463,1.552,467,4.511,468,4.688,470,3.918,472,2.98,484,3.463,486,3.463,487,2.98,488,3.463,489,3.463,498,4.61,553,3.768,554,4.193,575,2.568,576,3.111,577,3.111,578,4.195,579,4.195,580,3.111,581,3.111,582,3.111,583,4.195,584,4.195,585,3.463,586,3.111,587,3.111,588,3.111,589,3.111]],["title/modules/WinstonModule.html",[81,0.548,110,1.686]],["body/modules/WinstonModule.html",[3,0.404,4,0.348,5,0.244,10,1.206,18,0.039,30,0.974,34,1.6,35,1.194,36,0.613,37,1.452,39,1.317,52,0.518,53,1.452,55,0.9,70,0.404,71,0.061,72,1.736,76,1.08,81,1.05,93,0.02,94,0.027,95,0.02,97,1.33,102,2.494,103,2.162,110,2.88,115,2.039,116,2.189,191,1.452,325,3.235,399,2.039,590,3.264,591,3.264,592,4.332,593,3.235,594,3.264,595,4.332,596,3.367,597,5.39,598,4.332,599,3.264,600,2.88,601,3.264,602,3.576,603,4.332,604,3.264,605,2.319,606,2.319,607,3.264,608,4.332,609,3.264,610,3.264,611,3.264]],["title/interfaces/WinstonModuleAsyncOptions.html",[366,1.513,600,1.686]],["body/interfaces/WinstonModuleAsyncOptions.html",[3,0.448,4,0.386,5,0.271,7,0.654,9,0.582,18,0.039,36,0.724,37,1.554,39,1.41,52,0.494,70,0.573,81,0.974,93,0.022,94,0.029,95,0.022,102,2.087,116,2.508,134,2.844,135,3.367,184,2.262,189,2.896,257,2.087,358,2.313,366,1.807,408,2.573,426,3.827,593,2.896,596,3.481,600,2.578,602,3.827,612,2.573,613,4.636,614,4.636,615,4.636,616,3.622,617,3.622,618,3.294,619,3.622,620,3.622]],["title/coverage.html",[621,2.929]],["body/coverage.html",[0,2.274,1,1.872,5,0.224,6,2.474,18,0.038,36,0.424,56,1.495,63,1.107,71,0.102,80,1.107,81,0.541,93,0.018,94,0.025,95,0.018,125,0.826,131,1.666,161,1.004,180,1.847,182,2.474,196,1.872,197,2.474,204,1.666,216,1.666,222,1.495,239,1.666,256,2.474,322,2.906,323,1.872,349,3.717,366,2.041,411,2.474,436,2.474,450,1.872,451,2.474,466,2.474,507,2.474,563,2.474,575,2.474,600,1.666,605,2.129,606,2.129,612,2.129,621,2.129,622,2.474,623,2.474,624,2.997,625,2.474,626,5.106,627,5.981,628,4.09,629,2.129,630,5.404,631,4.09,632,2.997,633,4.09,634,3.376,635,2.474,636,2.474,637,3.376,638,4.566,639,2.474,640,2.474,641,2.474,642,2.474,643,2.474,644,2.474,645,2.474,646,2.474,647,2.474,648,2.997,649,2.997]],["title/dependencies.html",[98,1.484,650,2.539]],["body/dependencies.html",[5,0.264,18,0.039,55,0.973,60,1.963,62,2.205,67,2.205,68,2.205,69,2.205,71,0.086,93,0.022,94,0.028,95,0.022,98,1.438,116,2.052,118,2.914,119,2.914,122,2.205,244,2.508,248,2.205,361,2.508,363,2.508,424,3.764,448,2.508,452,2.508,462,2.508,463,1.761,651,3.53,652,5.339,653,3.53,654,3.53,655,3.53,656,3.764,657,4.17,658,4.407,659,3.53,660,3.53,661,3.53,662,3.53,663,3.53,664,3.53,665,3.764,666,3.764,667,3.53,668,3.764,669,3.53,670,3.53,671,3.764,672,3.53,673,3.53,674,2.914,675,3.53,676,3.53,677,3.53,678,3.53,679,3.53,680,3.53,681,3.53,682,3.53,683,3.53,684,3.53,685,3.53,686,2.508,687,3.53,688,3.53,689,3.53,690,3.53]],["title/miscellaneous/enumerations.html",[691,1.267,692,3.007]],["body/miscellaneous/enumerations.html",[9,0.74,18,0.036,93,0.028,94,0.033,95,0.028,339,2.987,553,3.816,629,3.274,691,2.299,692,3.804,693,3.804,694,5.372,695,5.372]],["title/index.html",[9,0.408,696,2.539,697,2.539]],["body/index.html",[4,0.161,5,0.265,7,0.273,8,2.954,16,0.417,18,0.037,33,1.249,36,0.347,38,0.998,49,1.772,50,1.929,51,1.075,52,0.416,67,2.608,69,0.945,81,0.705,91,1.363,93,0.009,94,0.015,95,0.009,96,0.842,98,1.7,113,1.223,116,1.103,125,0.417,134,0.755,139,1.249,142,0.998,144,2.817,161,0.507,184,1.531,186,0.842,187,2.083,191,0.821,195,0.945,200,0.945,250,1.249,267,1.741,269,0.945,274,1.249,275,2.023,283,1.249,288,2.023,300,1.249,302,1.249,304,1.741,306,1.249,311,2.966,325,0.945,330,1.075,333,1.363,337,1.075,347,2.771,349,0.945,358,2.083,365,1.075,372,1.741,376,1.075,379,1.717,383,1.075,385,1.075,387,1.075,389,1.075,391,1.075,393,1.075,395,1.075,397,1.075,463,1.772,508,1.249,548,2.023,549,1.249,585,1.249,621,1.741,622,2.023,626,2.55,656,2.55,657,4.102,658,4.313,665,2.931,666,3.22,668,2.931,671,2.55,674,2.55,686,1.075,698,1.514,699,1.514,700,3.089,701,2.451,702,1.514,703,1.514,704,2.451,705,1.514,706,2.451,707,1.514,708,1.514,709,1.514,710,1.514,711,3.55,712,1.514,713,2.451,714,1.514,715,1.514,716,4.175,717,2.451,718,1.514,719,1.514,720,2.451,721,1.514,722,1.514,723,1.514,724,5.404,725,3.089,726,3.089,727,1.514,728,1.514,729,3.778,730,2.451,731,1.514,732,1.514,733,3.089,734,2.451,735,3.089,736,2.451,737,1.514,738,1.514,739,3.089,740,3.089,741,2.451,742,1.514,743,1.514,744,2.451,745,1.514,746,1.514,747,2.451,748,2.451,749,1.514,750,1.514,751,2.451,752,1.514,753,1.514,754,1.514,755,2.451,756,1.514,757,1.514,758,4.577,759,1.514,760,1.514,761,1.514,762,2.451,763,1.514,764,2.451,765,1.514,766,3.55,767,1.514,768,1.514,769,3.9,770,2.451,771,1.514,772,1.514,773,1.514,774,4.858,775,3.55,776,1.514,777,2.451,778,2.451,779,1.514,780,2.451,781,1.514,782,1.514,783,1.514,784,1.514,785,3.089,786,1.514,787,1.514,788,1.514,789,1.514,790,1.514,791,3.55,792,1.514,793,1.514,794,1.514,795,1.514,796,1.514,797,1.514,798,1.514,799,2.451,800,1.514,801,1.514,802,1.514,803,1.514,804,1.514,805,1.514,806,1.514,807,1.514,808,1.514,809,1.514,810,1.514,811,3.446,812,2.451,813,1.514,814,1.249,815,1.514,816,1.514,817,1.514,818,1.514,819,1.514,820,2.023,821,1.514,822,1.514,823,1.514,824,1.514,825,2.451,826,1.514,827,1.514,828,1.514,829,1.514,830,1.514,831,2.451,832,1.514,833,2.451,834,1.514,835,2.451,836,1.514,837,2.451,838,1.514,839,1.514,840,2.451,841,1.514,842,1.514,843,2.451,844,1.514,845,2.451,846,1.514,847,1.514,848,1.514,849,2.451,850,1.514,851,1.514,852,1.514,853,1.514,854,1.514,855,2.451,856,1.514,857,1.514,858,2.023,859,2.451,860,2.451,861,2.451,862,1.514,863,1.514,864,1.514,865,1.514,866,2.55,867,1.514,868,1.514,869,2.451,870,1.514,871,1.514,872,1.514,873,1.514,874,1.514,875,1.514,876,1.514,877,1.514,878,1.514,879,1.514,880,1.514,881,1.514,882,2.451,883,1.514,884,1.514,885,2.451,886,3.55,887,3.089,888,3.55,889,2.451,890,2.451,891,1.514,892,1.514,893,1.514,894,3.089,895,1.514,896,1.514,897,1.514,898,2.451,899,1.514,900,1.514,901,1.514,902,2.55,903,2.023,904,1.514,905,1.514,906,1.514,907,1.514,908,1.514,909,1.514,910,3.089,911,1.514,912,1.514,913,1.514,914,1.514,915,1.514,916,1.514,917,1.514,918,1.514,919,1.514,920,1.514,921,1.514,922,1.514,923,1.514,924,2.451,925,2.451,926,1.514,927,1.514,928,1.514,929,1.514,930,1.514,931,1.514,932,1.514,933,1.514,934,1.514,935,1.514,936,1.514]],["title/modules.html",[97,1.679]],["body/modules.html",[18,0.032,93,0.027,94,0.032,95,0.027,96,2.48,97,1.817,107,2.48,108,2.225,109,2.225,110,2.48,866,4.784,937,5.796,938,5.796,939,5.914,940,4.46,941,4.46]],["title/overview.html",[942,3.403]],["body/overview.html",[2,1.988,18,0.037,56,2.536,63,2.134,81,0.646,93,0.022,94,0.028,95,0.022,96,3.356,97,1.456,98,1.456,99,1.988,100,1.988,101,1.988,102,1.609,103,1.784,104,2.951,105,2.951,106,2.951,107,3.337,108,2.769,109,2.883,110,2.826,111,2.557,112,1.988,113,1.784,125,1.478,181,1.988,222,2.536,236,2.951,238,2.951,239,2.826,314,2.951,315,2.951,321,1.609,408,2.54,500,2.951,501,2.951,502,2.951,942,2.951,943,3.575,944,4.598,945,3.575,946,3.575]],["title/miscellaneous/typealiases.html",[691,1.267,947,3.642]],["body/miscellaneous/typealiases.html",[9,0.75,18,0.033,36,0.661,93,0.029,94,0.033,95,0.029,184,2.917,593,3.381,596,2.917,612,3.318,618,3.318,691,2.33,948,4.67,949,4.67]],["title/miscellaneous/variables.html",[333,2.025,691,1.267]],["body/miscellaneous/variables.html",[7,0.654,8,2.648,9,0.404,11,1.134,16,1.485,18,0.039,26,1.573,35,0.694,36,0.807,49,1.257,72,1.213,76,0.902,81,0.766,93,0.016,94,0.022,95,0.016,116,2.086,131,1.727,134,1.807,135,2.648,161,1.213,187,1.807,189,1.573,191,1.213,200,1.573,269,1.573,318,3.499,333,1.4,339,3.198,340,1.789,358,2.891,382,1.789,399,1.573,593,2.262,596,2.648,600,1.4,605,2.572,606,2.572,618,1.789,623,2.079,625,2.079,629,1.789,634,2.079,635,3.826,636,3.826,637,2.079,638,2.079,639,3.499,640,3.499,641,2.989,642,2.989,643,2.989,644,2.989,645,2.989,646,2.079,647,2.989,686,1.789,691,1.257,693,2.079,729,2.079,811,2.079,814,2.079,820,2.079,858,3.499,902,2.989,903,4.449,950,2.518,951,3.621,952,2.518,953,5.267,954,3.621,955,2.518,956,2.518,957,2.518,958,2.518,959,2.518,960,2.518,961,2.518,962,2.518,963,3.621,964,2.518,965,2.518,966,2.518,967,4.91,968,2.518,969,2.518,970,3.621,971,3.621,972,2.518,973,2.518,974,2.518,975,3.621,976,2.518,977,2.518,978,2.518,979,2.518,980,2.518,981,2.518,982,2.518,983,2.518,984,2.518,985,2.518,986,2.518,987,2.518,988,2.518]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["0.1.13",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["0.2.19",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["1.0",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":753,"title":{},"body":{"index.html":{}}}],["100",{"_index":626,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["14d",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["16.1.4",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["1800",{"_index":807,"title":{},"body":{"index.html":{}}}],["2",{"_index":944,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["2.17.1",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["201",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["255",{"_index":476,"title":{},"body":{"classes/Profile.html":{}}}],["3.0.0",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["3.21.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":808,"title":{},"body":{"index.html":{}}}],["3600",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["4",{"_index":945,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["401",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["5",{"_index":943,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":946,"title":{},"body":{"overview.html":{}}}],["6.1.0",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["7/7",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["8.1.0",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["9000",{"_index":781,"title":{},"body":{"index.html":{}}}],["__dirname",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction",{"_index":913,"title":{},"body":{"index.html":{}}}],["access",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Roles.html":{},"dependencies.html":{}}}],["accesscontrolmodule",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["account",{"_index":546,"title":{},"body":{"injectables/ProfileService.html":{}}}],["acguard",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["acguard)@useroles({resource",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["action",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["actual",{"_index":822,"title":{},"body":{"index.html":{}}}],["addbearerauth(swagger_api_auth_name",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":817,"title":{},"body":{"index.html":{}}}],["admin_delete_profiles",{"_index":695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["against",{"_index":372,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["aliases",{"_index":948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":392,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["alphanumeric",{"_index":805,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":929,"title":{},"body":{"index.html":{}}}],["angular",{"_index":709,"title":{},"body":{"index.html":{}}}],["another",{"_index":549,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["any'})@delete('/api/profile/:username')@apiresponse({status",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["api",{"_index":903,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api/auth",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/docs",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["apimodelproperty",{"_index":444,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["apimodelproperty({required",{"_index":438,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["apiresponse",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["apis",{"_index":907,"title":{},"body":{"index.html":{}}}],["apiusetags",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags('authentication",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/Roles.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app.register(fastifyratelimiter",{"_index":842,"title":{},"body":{"index.html":{}}}],["app.register(headers",{"_index":841,"title":{},"body":{"index.html":{}}}],["app.roles",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"classes/Roles.html":{}}}],["app.service",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.use",{"_index":848,"title":{},"body":{"index.html":{}}}],["app.use(headers",{"_index":847,"title":{},"body":{"index.html":{}}}],["app/roles.entity",{"_index":495,"title":{},"body":{"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["app_env",{"_index":376,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["app_url",{"_index":195,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":706,"title":{},"body":{"index.html":{}}}],["applied",{"_index":357,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["approles",{"_index":553,"title":{},"body":{"injectables/ProfileService.html":{},"classes/Roles.html":{},"miscellaneous/enumerations.html":{}}}],["approles.admin_delete_profiles",{"_index":587,"title":{},"body":{"classes/Roles.html":{}}}],["appservice",{"_index":56,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appurl",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["args",{"_index":619,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["around",{"_index":756,"title":{},"body":{"index.html":{}}}],["array",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":338,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":602,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["auth.controller",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/payload/register.payload",{"_index":531,"title":{},"body":{"injectables/ProfileService.html":{}}}],["authcontroller",{"_index":196,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticating",{"_index":812,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["authmodule",{"_index":107,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":936,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice",{"_index":222,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":941,"title":{},"body":{"modules.html":{}}}],["await",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["backend",{"_index":715,"title":{},"body":{"index.html":{}}}],["backers",{"_index":930,"title":{},"body":{"index.html":{}}}],["bad",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":528,"title":{},"body":{"injectables/ProfileService.html":{}}}],["base",{"_index":801,"title":{},"body":{"index.html":{}}}],["based",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"classes/Roles.html":{}}}],["basis",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":481,"title":{},"body":{"classes/Profile.html":{}}}],["below",{"_index":747,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":827,"title":{},"body":{"index.html":{}}}],["beware",{"_index":583,"title":{},"body":{"classes/Roles.html":{}}}],["body",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["boilerplate",{"_index":711,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":348,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["bootstrap",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["both",{"_index":741,"title":{},"body":{"index.html":{}}}],["box",{"_index":720,"title":{},"body":{"index.html":{}}}],["browse",{"_index":939,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":937,"title":{},"body":{"modules.html":{}}}],["build",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":701,"title":{},"body":{"index.html":{}}}],["callback",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cascade",{"_index":579,"title":{},"body":{"classes/Roles.html":{}}}],["change",{"_index":831,"title":{},"body":{"index.html":{}}}],["changed",{"_index":828,"title":{},"body":{"index.html":{}}}],["check",{"_index":401,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["checks",{"_index":343,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["choice",{"_index":739,"title":{},"body":{"index.html":{}}}],["choose",{"_index":548,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["choosing",{"_index":825,"title":{},"body":{"index.html":{}}}],["class",{"_index":71,"title":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":321,"title":{},"body":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":314,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":315,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":500,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":501,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":502,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["code",{"_index":833,"title":{},"body":{"index.html":{}}}],["column",{"_index":468,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["column({name",{"_index":474,"title":{},"body":{"classes/Profile.html":{}}}],["column({type",{"_index":581,"title":{},"body":{"classes/Roles.html":{}}}],["column({unique",{"_index":490,"title":{},"body":{"classes/Profile.html":{}}}],["comes",{"_index":716,"title":{},"body":{"index.html":{}}}],["command",{"_index":769,"title":{},"body":{"index.html":{}}}],["completed",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["completed'})@apiresponse({status",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["compose",{"_index":740,"title":{},"body":{"index.html":{}}}],["config",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["config.service",{"_index":317,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":108,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":125,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["configservice('.env",{"_index":320,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('db_database",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('webtoken_secret_key",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.isenv('dev",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.validateinput(config",{"_index":369,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["configuration",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":922,"title":{},"body":{"index.html":{}}}],["configureopenapi",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conflict",{"_index":782,"title":{},"body":{"index.html":{}}}],["connection",{"_index":810,"title":{},"body":{"index.html":{}}}],["connections",{"_index":821,"title":{},"body":{"index.html":{}}}],["console",{"_index":840,"title":{},"body":{"index.html":{}}}],["const",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["constructor(config",{"_index":183,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(configservice",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(filepath",{"_index":327,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["constructor(jwtservice",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(profilerepository",{"_index":511,"title":{},"body":{"injectables/ProfileService.html":{}}}],["contain",{"_index":331,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["container",{"_index":788,"title":{},"body":{"index.html":{}}}],["control",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('api/auth",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["correct",{"_index":772,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":872,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":621,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":767,"title":{},"body":{"index.html":{}}}],["create",{"_index":508,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["create(payload",{"_index":516,"title":{},"body":{"injectables/ProfileService.html":{}}}],["created",{"_index":585,"title":{},"body":{"classes/Roles.html":{},"index.html":{}}}],["createlogger(loggeropts",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('profiles",{"_index":538,"title":{},"body":{"injectables/ProfileService.html":{}}}],["creates",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["createtoken",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["createwinstonasyncproviders",{"_index":605,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonasyncproviders(options",{"_index":610,"title":{},"body":{"modules/WinstonModule.html":{}}}],["createwinstonproviders",{"_index":606,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonproviders(options",{"_index":609,"title":{},"body":{"modules/WinstonModule.html":{}}}],["crypto",{"_index":462,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["crypto.createhmac('sha256",{"_index":464,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{}}}],["current",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currently",{"_index":547,"title":{},"body":{"injectables/ProfileService.html":{}}}],["d",{"_index":790,"title":{},"body":{"index.html":{}}}],["daily",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["databases",{"_index":916,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":397,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_host",{"_index":393,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_password",{"_index":391,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_port",{"_index":395,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_type",{"_index":387,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_username",{"_index":389,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["dd",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["decided",{"_index":854,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["declaring",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}}}],["decrypt",{"_index":802,"title":{},"body":{"index.html":{}}}],["dedicated",{"_index":909,"title":{},"body":{"index.html":{}}}],["default",{"_index":358,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_read",{"_index":694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["defaultmeta",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{}}}],["delete",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["delete('/api/profile/:username",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["delete(@param('username",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["delete(username",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/ProfileService.html":{}}}],["deleted",{"_index":558,"title":{},"body":{"injectables/ProfileService.html":{}}}],["deleted.affected",{"_index":560,"title":{},"body":{"injectables/ProfileService.html":{}}}],["deletes",{"_index":519,"title":{},"body":{"injectables/ProfileService.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploying",{"_index":764,"title":{},"body":{"index.html":{}}}],["describe",{"_index":905,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":736,"title":{},"body":{"index.html":{}}}],["details",{"_index":919,"title":{},"body":{"index.html":{}}}],["development",{"_index":778,"title":{},"body":{"index.html":{}}}],["different",{"_index":819,"title":{},"body":{"index.html":{}}}],["directory",{"_index":786,"title":{},"body":{"index.html":{}}}],["docker",{"_index":724,"title":{},"body":{"index.html":{}}}],["docs",{"_index":898,"title":{},"body":{"index.html":{}}}],["document",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":622,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentbuilder",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["done",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dotenv",{"_index":361,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["download",{"_index":871,"title":{},"body":{"index.html":{}}}],["dto",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dynamicmodule",{"_index":597,"title":{},"body":{"modules/WinstonModule.html":{}}}],["e2e",{"_index":889,"title":{},"body":{"index.html":{}}}],["each",{"_index":850,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":702,"title":{},"body":{"index.html":{}}}],["email",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["employs",{"_index":479,"title":{},"body":{"classes/Profile.html":{}}}],["empty",{"_index":813,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":814,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ensures",{"_index":352,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["entities",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":467,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["entity{.ts,.js",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":554,"title":{},"body":{"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["enumerations",{"_index":692,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":347,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["env.example",{"_index":768,"title":{},"body":{"index.html":{}}}],["envconfig",{"_index":323,"title":{"interfaces/EnvConfig.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["environment",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["envvarsschema",{"_index":373,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envvarsschema.validate",{"_index":403,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error(`config",{"_index":404,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error.message",{"_index":405,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["exclude",{"_index":492,"title":{},"body":{"classes/Profile.html":{}}}],["exec",{"_index":887,"title":{},"body":{"index.html":{}}}],["execute",{"_index":784,"title":{},"body":{"index.html":{}}}],["executing",{"_index":800,"title":{},"body":{"index.html":{}}}],["existing",{"_index":771,"title":{},"body":{"index.html":{}}}],["exists",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{}}}],["exp",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expires",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiresprettyprint",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["exports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"overview.html":{}}}],["exposed",{"_index":780,"title":{},"body":{"index.html":{}}}],["express",{"_index":657,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["express/fastify",{"_index":857,"title":{},"body":{"index.html":{}}}],["extends",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["extra",{"_index":856,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factory",{"_index":615,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["failed",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/ProfileService.html":{}}}],["fastify",{"_index":658,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastifyadapter",{"_index":835,"title":{},"body":{"index.html":{}}}],["fastifyratelimiter",{"_index":838,"title":{},"body":{"index.html":{}}}],["feature",{"_index":880,"title":{},"body":{"index.html":{}}}],["features",{"_index":719,"title":{},"body":{"index.html":{}}}],["fetches",{"_index":336,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ProfileService.html":{}}}],["field",{"_index":441,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["filepath",{"_index":329,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["files",{"_index":900,"title":{},"body":{"index.html":{}}}],["folder",{"_index":899,"title":{},"body":{"index.html":{}}}],["follow",{"_index":744,"title":{},"body":{"index.html":{}}}],["following",{"_index":785,"title":{},"body":{"index.html":{}}}],["format",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["formats",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["forroot",{"_index":591,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forroot(options",{"_index":592,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync",{"_index":598,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync(options",{"_index":599,"title":{},"body":{"modules/WinstonModule.html":{}}}],["found",{"_index":910,"title":{},"body":{"index.html":{}}}],["framework",{"_index":700,"title":{},"body":{"index.html":{}}}],["free",{"_index":749,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":455,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["fs",{"_index":364,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["function",{"_index":614,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["further",{"_index":918,"title":{},"body":{"index.html":{}}}],["generate",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":895,"title":{},"body":{"index.html":{}}}],["get('/api/profile",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/api/profile')@useguards(undefined)@apiresponse({status",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@useguards(undefined",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["get(id",{"_index":521,"title":{},"body":{"injectables/ProfileService.html":{}}}],["get(key",{"_index":334,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["getbyusername",{"_index":509,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusername(username",{"_index":523,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass",{"_index":510,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass(username",{"_index":525,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getone",{"_index":544,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getprofile",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@req",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":696,"title":{"index.html":{}},"body":{}}],["given",{"_index":340,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":603,"title":{},"body":{"modules/WinstonModule.html":{}}}],["grabs",{"_index":457,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["graph",{"_index":940,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":926,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":363,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["hash",{"_index":458,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{}}}],["hashed",{"_index":527,"title":{},"body":{"injectables/ProfileService.html":{}}}],["header",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":837,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":707,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":668,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":934,"title":{},"body":{"index.html":{}}}],["host",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["hour",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["hours",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["http",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:80",{"_index":796,"title":{},"body":{"index.html":{}}}],["http://localhost:9000",{"_index":795,"title":{},"body":{"index.html":{}}}],["https",{"_index":382,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["iat",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["identifier",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["images",{"_index":792,"title":{},"body":{"index.html":{}}}],["implements",{"_index":453,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["import",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["imports",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}}}],["including",{"_index":356,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":409,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["inestapplication",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["inject",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inject('winston",{"_index":190,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":180,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["injectables",{"_index":181,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"overview.html":{}}}],["injected",{"_index":332,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["injecting",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectrepository",{"_index":530,"title":{},"body":{"injectables/ProfileService.html":{}}}],["injectrepository(profile",{"_index":532,"title":{},"body":{"injectables/ProfileService.html":{}}}],["injectrepository(roles",{"_index":533,"title":{},"body":{"injectables/ProfileService.html":{}}}],["inspired",{"_index":708,"title":{},"body":{"index.html":{}}}],["install",{"_index":773,"title":{},"body":{"index.html":{}}}],["instead",{"_index":829,"title":{},"body":{"index.html":{}}}],["interface",{"_index":366,"title":{"interfaces/EnvConfig.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":408,"title":{},"body":{"interfaces/EnvConfig.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["involves",{"_index":877,"title":{},"body":{"index.html":{}}}],["ip",{"_index":851,"title":{},"body":{"index.html":{}}}],["isalpha",{"_index":572,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["isalphanumeric",{"_index":445,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["isemail",{"_index":573,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["isenv",{"_index":324,"title":{},"body":{"classes/ConfigService.html":{}}}],["isenv(env",{"_index":341,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["isnotempty",{"_index":446,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["it's",{"_index":806,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":355,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi",{"_index":362,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default('8889",{"_index":396,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(1800",{"_index":386,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.object",{"_index":375,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.objectschema",{"_index":374,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('localhost",{"_index":394,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('mariadb",{"_index":388,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('nest",{"_index":398,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('root",{"_index":390,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().required",{"_index":384,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().uri",{"_index":380,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["join",{"_index":932,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":239,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":550,"title":{},"body":{"injectables/ProfileService.html":{}}}],["keepconnectionalive",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":337,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["layer",{"_index":914,"title":{},"body":{"index.html":{}}}],["legend",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["length",{"_index":475,"title":{},"body":{"classes/Profile.html":{}}}],["level",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":874,"title":{},"body":{"index.html":{}}}],["license",{"_index":935,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":925,"title":{},"body":{"index.html":{}}}],["limit",{"_index":666,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["lines",{"_index":832,"title":{},"body":{"index.html":{}}}],["loads",{"_index":787,"title":{},"body":{"index.html":{}}}],["local",{"_index":737,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":734,"title":{},"body":{"index.html":{}}}],["locally",{"_index":727,"title":{},"body":{"index.html":{}}}],["location",{"_index":911,"title":{},"body":{"index.html":{}}}],["logger",{"_index":184,"title":{},"body":{"injectables/AppService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loggeroptions",{"_index":618,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loggeropts",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":717,"title":{},"body":{"index.html":{}}}],["login",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{}}}],["login(@body",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginpayload",{"_index":204,"title":{"classes/LoginPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{},"coverage.html":{}}}],["logs",{"_index":921,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["mac",{"_index":750,"title":{},"body":{"index.html":{}}}],["machine",{"_index":738,"title":{},"body":{"index.html":{}}}],["made",{"_index":712,"title":{},"body":{"index.html":{}}}],["main",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["main.ts",{"_index":834,"title":{},"body":{"index.html":{}}}],["make",{"_index":725,"title":{},"body":{"index.html":{}}}],["making",{"_index":551,"title":{},"body":{"injectables/ProfileService.html":{}}}],["manually",{"_index":763,"title":{},"body":{"index.html":{}}}],["many",{"_index":488,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["manytoone",{"_index":586,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(type",{"_index":588,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(undefined",{"_index":577,"title":{},"body":{"classes/Roles.html":{}}}],["mapping",{"_index":365,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["mariadb",{"_index":742,"title":{},"body":{"index.html":{}}}],["matches",{"_index":345,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/RegisterPayload.html":{}}}],["matches(/^[a",{"_index":574,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["matching",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor((ntime",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["math.floor(ntime",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["max",{"_index":843,"title":{},"body":{"index.html":{}}}],["maxfiles",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":561,"title":{},"body":{"injectables/ProfileService.html":{}}}],["meta",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["minlength",{"_index":447,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["minlength(8",{"_index":449,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["mins",{"_index":809,"title":{},"body":{"index.html":{}}}],["minute",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["minutes",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["miscellaneous",{"_index":691,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":924,"title":{},"body":{"index.html":{}}}],["mm",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["module",{"_index":81,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modulemetadata",{"_index":616,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":794,"title":{},"body":{"index.html":{}}}],["mongodb",{"_index":869,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":882,"title":{},"body":{"index.html":{}}}],["more",{"_index":933,"title":{},"body":{"index.html":{}}}],["moved",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["mssql",{"_index":870,"title":{},"body":{"index.html":{}}}],["mutate",{"_index":823,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":674,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["name",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":353,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["nest",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestfactory.create",{"_index":839,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":846,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":836,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/JwtStrategy.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":617,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["nestjs/core",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":656,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/swagger",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["new",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nginx",{"_index":743,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":699,"title":{},"body":{"index.html":{}}}],["non",{"_index":723,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":529,"title":{},"body":{"injectables/ProfileService.html":{}}}],["note",{"_index":748,"title":{},"body":{"index.html":{}}}],["npm",{"_index":774,"title":{},"body":{"index.html":{}}}],["ntime",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["number(time",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["object",{"_index":330,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["ondelete",{"_index":578,"title":{},"body":{"classes/Roles.html":{}}}],["one",{"_index":487,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["onetomany",{"_index":493,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(type",{"_index":497,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(undefined",{"_index":483,"title":{},"body":{"classes/Profile.html":{}}}],["open",{"_index":902,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["operations",{"_index":915,"title":{},"body":{"index.html":{}}}],["optional",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["options",{"_index":596,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.imports",{"_index":611,"title":{},"body":{"modules/WinstonModule.html":{}}}],["options.inject",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.usefactory",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":746,"title":{},"body":{"index.html":{}}}],["over",{"_index":855,"title":{},"body":{"index.html":{}}}],["overview",{"_index":942,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":650,"title":{"dependencies.html":{}},"body":{}}],["panel",{"_index":732,"title":{},"body":{"index.html":{}}}],["param",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["parameter",{"_index":346,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parameters",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["param{req",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["parse",{"_index":360,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parse(fs.readfilesync(filepath",{"_index":367,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["particular",{"_index":552,"title":{},"body":{"injectables/ProfileService.html":{}}}],["passport",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["password).digest('hex",{"_index":543,"title":{},"body":{"injectables/ProfileService.html":{}}}],["password.transformer",{"_index":494,"title":{},"body":{"classes/Profile.html":{}}}],["passwords",{"_index":480,"title":{},"body":{"classes/Profile.html":{}}}],["passwordtransformer",{"_index":450,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["paylaod",{"_index":437,"title":{},"body":{"classes/LoginPayload.html":{}}}],["payload",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{}}}],["payload/login.payload",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["payload/register.payload",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["per",{"_index":853,"title":{},"body":{"index.html":{}}}],["performance",{"_index":826,"title":{},"body":{"index.html":{}}}],["permit",{"_index":584,"title":{},"body":{"classes/Roles.html":{}}}],["pick",{"_index":613,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["please",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["port",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["portion",{"_index":876,"title":{},"body":{"index.html":{}}}],["ports",{"_index":818,"title":{},"body":{"index.html":{}}}],["possession",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["post",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":868,"title":{},"body":{"index.html":{}}}],["pre",{"_index":776,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["prerequisites",{"_index":722,"title":{},"body":{"index.html":{}}}],["prettyprintseconds",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["prettyprintseconds(time",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["primarygeneratedcolumn",{"_index":470,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["private",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["pro",{"_index":754,"title":{},"body":{"index.html":{}}}],["procedure",{"_index":745,"title":{},"body":{"index.html":{}}}],["prod",{"_index":378,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["produce",{"_index":897,"title":{},"body":{"index.html":{}}}],["production",{"_index":777,"title":{},"body":{"index.html":{}}}],["profile",{"_index":80,"title":{"classes/Profile.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{}}}],["profile.entity",{"_index":505,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["profile.roles",{"_index":589,"title":{},"body":{"classes/Roles.html":{}}}],["profile.service",{"_index":504,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile/profile.entity",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"classes/Roles.html":{}}}],["profile/profile.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["profile/profile.service",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["profilemodule",{"_index":109,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":515,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profiles",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"classes/Profile.html":{},"classes/Roles.html":{}}}],["profiles.password",{"_index":540,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profileservice",{"_index":63,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":698,"title":{},"body":{"index.html":{}}}],["project",{"_index":791,"title":{},"body":{"index.html":{}}}],["promise",{"_index":620,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["properties",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["prototype",{"_index":714,"title":{},"body":{"index.html":{}}}],["provide",{"_index":318,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":520,"title":{},"body":{"injectables/ProfileService.html":{}}}],["provider",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["provides",{"_index":908,"title":{},"body":{"index.html":{}}}],["public",{"_index":608,"title":{},"body":{"modules/WinstonModule.html":{}}}],["purge",{"_index":859,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":713,"title":{},"body":{"index.html":{}}}],["random",{"_index":804,"title":{},"body":{"index.html":{}}}],["rate",{"_index":665,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ratelimiter",{"_index":845,"title":{},"body":{"index.html":{}}}],["react",{"_index":783,"title":{},"body":{"index.html":{}}}],["read",{"_index":799,"title":{},"body":{"index.html":{}}}],["readable",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["received",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["received'})@apiresponse({status",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["records",{"_index":562,"title":{},"body":{"injectables/ProfileService.html":{}}}],["reflect",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterPayload.html":{}}}],["register(@body",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerpayload",{"_index":216,"title":{"classes/RegisterPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"coverage.html":{}}}],["registration",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":912,"title":{},"body":{"index.html":{}}}],["relations",{"_index":535,"title":{},"body":{"injectables/ProfileService.html":{}}}],["relationship",{"_index":489,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["remove",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["removing",{"_index":860,"title":{},"body":{"index.html":{}}}],["replace",{"_index":770,"title":{},"body":{"index.html":{}}}],["replicating",{"_index":878,"title":{},"body":{"index.html":{}}}],["repository",{"_index":512,"title":{},"body":{"injectables/ProfileService.html":{}}}],["represent",{"_index":486,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["represents",{"_index":399,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["req",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":852,"title":{},"body":{"index.html":{}}}],["required",{"_index":379,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["reset",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["resolve",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["resource",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["respectively",{"_index":797,"title":{},"body":{"index.html":{}}}],["restful",{"_index":906,"title":{},"body":{"index.html":{}}}],["result",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["rich",{"_index":881,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":861,"title":{},"body":{"index.html":{}}}],["role",{"_index":498,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["role.profile",{"_index":499,"title":{},"body":{"classes/Profile.html":{}}}],["role.role",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["roles",{"_index":131,"title":{"classes/Roles.html":{}},"body":{"modules/AppModule.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesbuilder",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":513,"title":{},"body":{"injectables/ProfileService.html":{}}}],["root",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["rotate",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["rotatefile",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["routes",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["run",{"_index":758,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":864,"title":{},"body":{"index.html":{}}}],["saveif",{"_index":863,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":703,"title":{},"body":{"index.html":{}}}],["schema",{"_index":370,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["scheme",{"_index":381,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["schemes",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["second",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["seconds",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["secretorkey",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":718,"title":{},"body":{"index.html":{}}}],["server",{"_index":704,"title":{},"body":{"index.html":{}}}],["service",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ProfileService.html":{}}}],["set",{"_index":344,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["setdescription(swagger_api_description",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":542,"title":{},"body":{"injectables/ProfileService.html":{}}}],["setparameter('username",{"_index":541,"title":{},"body":{"injectables/ProfileService.html":{}}}],["setschemes(...swagger_api_schemes",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":879,"title":{},"body":{"index.html":{}}}],["settitle(swagger_api_name",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":762,"title":{},"body":{"index.html":{}}}],["setversion(swagger_api_current_version",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":705,"title":{},"body":{"index.html":{}}}],["signed",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["sits",{"_index":815,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["specification",{"_index":904,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":928,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":867,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":875,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":693,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.hmr.ts",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.constants.ts",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.interfaces.ts",{"_index":949,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../winston.providers.ts",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.hmr.ts",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/modules/app/app.controller.ts:30",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:44",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:61",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.module.ts",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/app/app.roles.ts",{"_index":629,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.service.ts",{"_index":182,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/modules/app/app.service.ts:24",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/app.service.ts:9",{"_index":185,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/roles.entity.ts",{"_index":575,"title":{},"body":{"classes/Roles.html":{},"coverage.html":{}}}],["src/modules/app/roles.entity.ts:14",{"_index":576,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:25",{"_index":582,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:31",{"_index":580,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:17",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:37",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:54",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:69",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:12",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:33",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/payload/login.payload.ts",{"_index":436,"title":{},"body":{"classes/LoginPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/login.payload.ts:16",{"_index":443,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/login.payload.ts:26",{"_index":440,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts",{"_index":563,"title":{},"body":{"classes/RegisterPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/register.payload.ts:23",{"_index":565,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:33",{"_index":571,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:43",{"_index":569,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:53",{"_index":570,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/config/config.module.ts",{"_index":316,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/modules/config/config.service.ts",{"_index":322,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/modules/config/config.service.ts:19",{"_index":328,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:35",{"_index":351,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:77",{"_index":335,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:8",{"_index":410,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/modules/config/config.service.ts:86",{"_index":342,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/profile/password.transformer.ts",{"_index":451,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["src/modules/profile/password.transformer.ts:12",{"_index":460,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/password.transformer.ts:20",{"_index":456,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/profile.entity.ts",{"_index":466,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/modules/profile/profile.entity.ts:17",{"_index":471,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:23",{"_index":491,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:29",{"_index":473,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:35",{"_index":469,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:41",{"_index":485,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:52",{"_index":478,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":503,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":507,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:18",{"_index":514,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:35",{"_index":522,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:43",{"_index":524,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:52",{"_index":526,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:68",{"_index":517,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:89",{"_index":518,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/winston/winston.constants.ts",{"_index":634,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/winston/winston.interfaces.ts",{"_index":612,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/winston/winston.module.ts",{"_index":590,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:21",{"_index":594,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:35",{"_index":601,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.providers.ts",{"_index":637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/constants.ts",{"_index":638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/index.ts",{"_index":646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":730,"title":{},"body":{"index.html":{}}}],["start",{"_index":733,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":779,"title":{},"body":{"index.html":{}}}],["started",{"_index":697,"title":{"index.html":{}},"body":{}}],["starting",{"_index":793,"title":{},"body":{"index.html":{}}}],["statements",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":325,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"index.html":{}}}],["status",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["steps",{"_index":830,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":866,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":726,"title":{},"body":{"index.html":{}}}],["svg",{"_index":938,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":671,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swagger_api_auth_location",{"_index":639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_auth_name",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_current_version",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_description",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_name",{"_index":643,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_root",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_schemes",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup(swagger_api_root",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":888,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":892,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":891,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":890,"title":{},"body":{"index.html":{}}}],["testing",{"_index":884,"title":{},"body":{"index.html":{}}}],["tests",{"_index":886,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":927,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":883,"title":{},"body":{"index.html":{}}}],["this.appservice.root",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(profile",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('app_url",{"_index":193,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.envconfig",{"_index":368,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig.app_env",{"_index":407,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig[key",{"_index":406,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.expiration",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyusername(payload.username",{"_index":545,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.jwtservice.sign",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.info('logging",{"_index":194,"title":{},"body":{"injectables/AppService.html":{}}}],["this.prettyprintseconds(this.expiration",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.profilerepository",{"_index":537,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.create",{"_index":557,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.delete",{"_index":559,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.findone",{"_index":536,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.findone(id",{"_index":534,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.save",{"_index":556,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profileservice.create(payload",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.profileservice.delete(username",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["this.profileservice.getbyusernameandpass",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesrepository.save(roles",{"_index":555,"title":{},"body":{"injectables/ProfileService.html":{}}}],["through",{"_index":759,"title":{},"body":{"index.html":{}}}],["throw",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ProfileService.html":{}}}],["time",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timewindow",{"_index":844,"title":{},"body":{"index.html":{}}}],["to(value",{"_index":459,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":803,"title":{},"body":{"index.html":{}}}],["toolbox",{"_index":757,"title":{},"body":{"index.html":{}}}],["transform",{"_index":461,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":452,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"dependencies.html":{}}}],["transports",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":442,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@isemail()@isnotempty",{"_index":564,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":439,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@matches(/^[a",{"_index":566,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["try",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["type",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":947,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":894,"title":{},"body":{"index.html":{}}}],["typeorm",{"_index":463,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":506,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forrootasync",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":820,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["types/express",{"_index":862,"title":{},"body":{"index.html":{}}}],["typing",{"_index":896,"title":{},"body":{"index.html":{}}}],["ui",{"_index":686,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":484,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["undefined})@exclude",{"_index":477,"title":{},"body":{"classes/Profile.html":{}}}],["unique",{"_index":496,"title":{},"body":{"classes/Profile.html":{}}}],["unit",{"_index":885,"title":{},"body":{"index.html":{}}}],["up",{"_index":789,"title":{},"body":{"index.html":{}}}],["url",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["use",{"_index":811,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":858,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(authguard",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(undefined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["username",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["useroles",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["usevalue",{"_index":319,"title":{},"body":{"modules/ConfigModule.html":{}}}],["using",{"_index":766,"title":{},"body":{"index.html":{}}}],["usually",{"_index":816,"title":{},"body":{"index.html":{}}}],["utilizing",{"_index":728,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":472,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["valid",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid('dev",{"_index":377,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validate",{"_index":371,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":354,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validatedenvconfig",{"_index":402,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateinput",{"_index":326,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":350,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validates",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":400,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":448,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["value",{"_index":339,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PasswordTransformer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":465,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["values",{"_index":359,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["valuetransformer",{"_index":454,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":349,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{},"index.html":{}}}],["variables",{"_index":333,"title":{"miscellaneous/variables.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":917,"title":{},"body":{"index.html":{}}}],["vm",{"_index":760,"title":{},"body":{"index.html":{}}}],["web",{"_index":729,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webtoken_expiration_time",{"_index":385,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["webtoken_secret_key",{"_index":383,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["where('profiles.username",{"_index":539,"title":{},"body":{"injectables/ProfileService.html":{}}}],["whether",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["windowms",{"_index":849,"title":{},"body":{"index.html":{}}}],["windows",{"_index":751,"title":{},"body":{"index.html":{}}}],["winson",{"_index":595,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.interfaces",{"_index":604,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.providers",{"_index":607,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.transports.console",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["winston/winston.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_options",{"_index":635,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winston_module_provider",{"_index":636,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule",{"_index":110,"title":{"modules/WinstonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["winstonmodule.forrootasync",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleasyncoptions",{"_index":600,"title":{"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmoduleoptions",{"_index":593,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":765,"title":{},"body":{"index.html":{}}}],["work",{"_index":755,"title":{},"body":{"index.html":{}}}],["works",{"_index":752,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":873,"title":{},"body":{"index.html":{}}}],["writing",{"_index":482,"title":{},"body":{"classes/Profile.html":{}}}],["x1f3d7",{"_index":824,"title":{},"body":{"index.html":{}}}],["x1f433",{"_index":735,"title":{},"body":{"index.html":{}}}],["x1f465",{"_index":923,"title":{},"body":{"index.html":{}}}],["x1f4a1",{"_index":893,"title":{},"body":{"index.html":{}}}],["x1f4da",{"_index":710,"title":{},"body":{"index.html":{}}}],["x1f4dd",{"_index":901,"title":{},"body":{"index.html":{}}}],["x1f50a",{"_index":920,"title":{},"body":{"index.html":{}}}],["x1f512",{"_index":798,"title":{},"body":{"index.html":{}}}],["x1f5b4",{"_index":865,"title":{},"body":{"index.html":{}}}],["x1f680",{"_index":761,"title":{},"body":{"index.html":{}}}],["x1f6e0",{"_index":721,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":731,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":775,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":931,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":568,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["za",{"_index":567,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["zippedarchive",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                getProfile\n                            \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined, ACGuard)@UseRoles({resource: 'profiles', action: 'delete', possession: 'any'})@Delete('/api/profile/:username')@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:61\n                \n            \n\n\n            \n                \n                    Delete route to remove profiles from app\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/api/profile')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:44\n                \n            \n\n\n            \n                \n                    Debug route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:30\n                \n            \n\n\n            \n                \n                    Main route\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application environment url\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Req, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProfileService } from '../profile/profile.service';\nimport { ACGuard, UseRoles } from 'nest-access-control';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param appService\n   * @param profileService\n   */\n  constructor(\n    private readonly appService: AppService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Main route\n   * @returns {string} the application environment url\n   */\n  @Get()\n  @UseGuards(AuthGuard())\n  root(): string {\n    return this.appService.root();\n  }\n\n  // These routes can be moved to the profile module.\n\n  /**\n   * Debug route\n   * @param{Req} req the request body\n   */\n  @Get('/api/profile')\n  @UseGuards(AuthGuard())\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  getProfile(@Req() req) {\n    return req.user;\n  }\n\n  /**\n   * Delete route to remove profiles from app\n   * @param {string} username the username to remove\n   */\n  @UseGuards(AuthGuard(), ACGuard)\n  @UseRoles({\n    resource: 'profiles',\n    action: 'delete',\n    possession: 'any',\n  })\n  @Delete('/api/profile/:username')\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  async delete(@Param('username') username: string) {\n    return await this.profileService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            WinstonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as winston from 'winston';\nimport * as rotateFile from 'winston-daily-rotate-file';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '../config/config.module';\nimport { ConfigService } from '../config/config.service';\nimport { AuthModule } from '../auth/auth.module';\nimport { ProfileModule } from '../profile/profile.module';\nimport { WinstonModule } from '../winston/winston.module';\nimport { AccessControlModule } from 'nest-access-control';\nimport { roles } from './app.roles';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + './../**/**.entity{.ts,.js}'],\n          synchronize: configService.isEnv('dev'),\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.isEnv('dev')\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new rotateFile({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AccessControlModule.forRoles(roles),\n    ConfigModule,\n    AuthModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.service.ts\n        \n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/app/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logger service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/app/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Main application method\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application url\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '../config/config.service';\nimport { Logger } from 'winston';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {ConfigService} config configuration service\n   * @param {Logger} logger logger service\n   */\n  constructor(\n    private config: ConfigService,\n    @Inject('winston') private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Main application method\n   * @returns {string} the application url\n   */\n  root(): string {\n    const appURL = this.config.get('APP_URL');\n    this.logger.info('Logging the APP_URL -> ' + appURL);\n    return appURL;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n                    Authentication route to login\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginPayload } from './payload/login.payload';\nimport { RegisterPayload } from './payload/register.payload';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Authentication Controller\n */\n@Controller('api/auth')\n@ApiUseTags('authentication')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Authentication route to login\n   * @param {LoginPayload} payload the login dto\n   */\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginPayload) {\n    const profile = await this.authService.validateUser(payload);\n    return await this.authService.createToken(profile);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterPayload} payload the registration dto\n   */\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterPayload) {\n    const profile = await this.profileService.create(payload);\n    return await this.authService.createToken(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { ProfileModule } from '../profile/profile.module';\nimport { ConfigModule } from '../config/config.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '../config/config.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_SECRET_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n    ConfigModule,\n    ProfileModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [PassportModule.register({ defaultStrategy: 'jwt' })],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Private\n                                prettyPrintSeconds\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                profile service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on payload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            prettyPrintSeconds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prettyPrintSeconds(time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n                    Formats the time in seconds into human-readable format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:69\n                \n            \n\n\n            \n                \n                    Validates whether or not the profile exists in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                        Time in seconds when the token is to expire\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} config configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on payload\n   * @param {Profile} param dto to generate token from\n   */\n  async createToken({ id, username, name, email }: Profile) {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   */\n  private prettyPrintSeconds(time: string) {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   */\n  async validateUser({ username, password }: LoginPayload) {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService('.env'),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Config Service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                isEnv\n                            \n                            \n                                    Private\n                                    Static\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                        Object that will contain the injected environment variables\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:77\n                \n            \n\n\n            \n                \n                    Fetches the key from the configuration file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the associated value for a given key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEnv\n                        \n                        \n                    \n                \n            \n            \n                \nisEnv(env: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:86\n                \n            \n\n\n            \n                \n                    Checks whether the application environment set in the configuration file matches the environment parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not the environment variable matches the application environment\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:35\n                \n            \n\n\n            \n                \n                    Ensures all needed variables are set, and returns the validated JavaScript object\nincluding the applied default values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Key-value mapping\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtPayload, done)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:33\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                            JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    done\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to resolve the request user with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy, JwtPayload } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ConfigService } from '../config/config.service';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService\n   */\n  constructor(\n    readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('WEBTOKEN_SECRET_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {JwtPayload} jwtpayload validation method for jwt token\n   * @param {any} done callback to resolve the request user with\n   */\n  async validate({ iat, exp, id }: JwtPayload, done) {\n    const timeDiff = exp - iat;\n    if (timeDiff  role.role) });\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginPayload.html":{"url":"classes/LoginPayload.html","title":"class - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/login.payload.ts\n        \n\n            \n                Description\n            \n            \n                Login Paylaod Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:26\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:16\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Paylaod Class\n */\nexport class LoginPayload {\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/password.transformer.ts\n        \n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            from\n                        \n                        \n                    \n                \n            \n            \n                \nfrom(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        value to return\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            to\n                        \n                        \n                    \n                \n            \n            \n                \nto(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param value string to hash\n   */\n  to(value) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash\n   * @param value value to return\n   */\n  from(value) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.entity.ts\n        \n\n            \n                Description\n            \n            \n                Profile Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:35\n                            \n                        \n\n                \n                    \n                        Email column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:17\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Name column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'password', length: 255, transformer: undefined})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:52\n                            \n                        \n\n                \n                    \n                        Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Roles[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Column to represent a one to many relationship with the roles entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Username column\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { PasswordTransformer } from './password.transformer';\nimport { Roles } from '../app/roles.entity';\n\n/**\n * Profile Entity Class\n */\n@Entity({\n  name: 'profiles',\n})\nexport class Profile {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(type => Roles, role => role.profile)\n  roles: Roles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { Profile } from './profile.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Roles } from '../app/roles.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile, Roles])],\n  providers: [ProfileService],\n  exports: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Profile Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getByUsername\n                            \n                            \n                                    Async\n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:68\n                \n            \n\n\n            \n                \n                    Creates a profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        profile payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:89\n                \n            \n\n\n            \n                \n                    Deletes profile from provided username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:35\n                \n            \n\n\n            \n                \n                    Fetches profile from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:43\n                \n            \n\n\n            \n                \n                    Fetches profile from database by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUsernameAndPass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:52\n                \n            \n\n\n            \n                \n                    Fetches profile by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   */\n  async get(id: number) {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   */\n  async getByUsername(username: string) {\n    return await this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   */\n  async getByUsernameAndPass(username: string, password: string) {\n    return await this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Creates a profile\n   * @param {RegisterPayload} payload profile payload\n   */\n  async create(payload: RegisterPayload) {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making roles for a particular profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return await this.profileRepository.save(\n      this.profileRepository.create({ ...payload, roles }),\n    );\n  }\n\n  /**\n   * Deletes profile from provided username\n   * @param {string} username\n   */\n  async delete(username: string) {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterPayload.html":{"url":"classes/RegisterPayload.html","title":"class - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/register.payload.ts\n        \n\n            \n                Description\n            \n            \n                Register Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:23\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:43\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:53\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:33\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport {\n  IsAlpha,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Register Payload Class\n */\nexport class RegisterPayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Roles.html":{"url":"classes/Roles.html","title":"class - Roles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/roles.entity.ts\n        \n\n            \n                Description\n            \n            \n                Roles Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                profile\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:14\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Profile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Column to represent a many to one relationship with the profile entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AppRoles\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AppRoles, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { AppRoles } from './app.roles';\nimport { Profile } from '../profile/profile.entity';\n\n/**\n * Roles Entity Class\n */\n@Entity()\nexport class Roles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: AppRoles,\n    default: AppRoles.ADMIN_DELETE_PROFILES,\n  })\n  role: AppRoles;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(type => Profile, profile => profile.roles, { onDelete: 'CASCADE' })\n  profile: Profile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WinstonModule.html":{"url":"modules/WinstonModule.html","title":"module - WinstonModule","body":"\n                   \n\n\n\n\n    Modules\n    WinstonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/winston/winston.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: WinstonModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:21\n                \n            \n\n\n            \n                \n                    Constructor for winson module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: WinstonModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:35\n                \n            \n\n\n            \n                \n                    Asynchronous constructor for winston module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport {\n  WinstonModuleAsyncOptions,\n  WinstonModuleOptions,\n} from './winston.interfaces';\nimport {\n  createWinstonAsyncProviders,\n  createWinstonProviders,\n} from './winston.providers';\n\n@Global()\n@Module({})\n/**\n * Represents a Winston Module\n */\nexport class WinstonModule {\n  /**\n   * Constructor for winson module\n   * @param options\n   */\n  public static forRoot(options: WinstonModuleOptions): DynamicModule {\n    const providers = createWinstonProviders(options);\n\n    return {\n      module: WinstonModule,\n      providers,\n      exports: providers,\n    };\n  }\n\n  /**\n   * Asynchronous constructor for winston module\n   * @param options\n   */\n  public static forRootAsync(\n    options: WinstonModuleAsyncOptions,\n  ): DynamicModule {\n    const providers = createWinstonAsyncProviders(options);\n\n    return {\n      module: WinstonModule,\n      imports: options.imports,\n      providers,\n      exports: providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WinstonModuleAsyncOptions.html":{"url":"interfaces/WinstonModuleAsyncOptions.html","title":"interface - WinstonModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WinstonModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/winston/winston.interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Asynchronous winston module options\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Providers to inject\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default factory method that returns winston module options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { LoggerOptions } from 'winston';\n\n/**\n * Logger options\n */\nexport type WinstonModuleOptions = LoggerOptions;\n\n/**\n * Asynchronous winston module options\n */\nexport interface WinstonModuleAsyncOptions\n  extends Pick {\n  /**\n   * Default factory method that returns winston module options\n   */\n  useFactory: (\n    ...args: any[]\n  ) => Promise | WinstonModuleOptions;\n\n  /**\n   * Providers to inject\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.hmr.ts\n            \n            variable\n            module\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/app/app.roles.ts\n            \n            variable\n            roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/roles.entity.ts\n            \n            class\n            Roles\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/login.payload.ts\n            \n            class\n            LoginPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/register.payload.ts\n            \n            class\n            RegisterPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            interface\n            EnvConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/profile/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.entity.ts\n            \n            class\n            Profile\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_PROVIDER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.interfaces.ts\n            \n            interface\n            WinstonModuleAsyncOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonAsyncProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_LOCATION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_SCHEMES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/index.ts\n            \n            variable\n            configureOpenAPI\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^16.1.4\n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/platform-fastify : ^6.7.2\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @nestjs/typeorm : ^6.1.3\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.10.0\n        \n            crypto : ^1.0.1\n        \n            dotenv : ^8.1.0\n        \n            express-rate-limit : ^5.0.0\n        \n            fastify-helmet : ^3.0.1\n        \n            fastify-rate-limit : ^2.3.0\n        \n            fastify-swagger : ^2.4.0\n        \n            helmet : ^3.21.1\n        \n            mysql : ^2.17.1\n        \n            nest-access-control : ^2.0.1\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            swagger-ui-express : ^4.1.1\n        \n            typeorm : ^0.2.19\n        \n            winston : ^3.2.1\n        \n            winston-daily-rotate-file : ^4.1.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/app/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                        \n                            \n                                 DEFAULT_READ\n                            \n                        \n                        \n                            \n                                Value : DEFAULT_READ\n                            \n                        \n                        \n                            \n                                 ADMIN_DELETE_PROFILES\n                            \n                        \n                        \n                            \n                                Value : ADMIN_DELETE_PROFILES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n&#x1F4DA; Description\nThis boilerplate is made to quickly prototype backend applications. It comes with database, logging, security, and authentication features out of the box.\n\n&#x1F6E0;️ Prerequisites\nNon Docker\n\nPlease make sure to have MYSQL locally by utilizing a web server stack XAMPP. The control panel can start with MYSQL on localhost.\n\nDocker &#x1F433;\n\nPlease make sure to have docker desktop on the local machine of choice to quickly compose both mariadb and nginx. Then follow the docker procedure outlined below.\n\nNote Docker Desktop comes free on both Mac and Windows, but it only works with Windows 10 Pro. A work around is to get Docker Toolbox which will run through a VM.\n\n&#x1F680; Setup\nManually Deploying without Docker\n\nCreate a .env file using the cp .env.example .env command and replace the existing env variables with the correct variables (username and password database)\nInstall dependencies using npm i or yarn\nStart the app for pre-production using npm run start or for development using npm run start:dev (the app will be exposed on the port 9000; not to conflict with React)\n\nDeploying with Docker &#x1F433;\n\nExecute the following command in app directory:\n\n# creates and loads the docker container with required configuration\n$ docker-compose up -d\nThe following command will setup the project for you (building the Docker images, starting docker-compose stack). The Web application and mongo will exposed on http://localhost:9000 and http://localhost:80 respectively\n\n&#x1F512; Environment Configuration\nBy default the application comes with a config module that can inject the ConfigService and read every environment variable from the .env. file.\nAPP_ENV - the application environment it will be executing as, either in development or production.\nAPP_URL - the base url for application.\nWEBTOKEN_SECRET_KEY - the secret key to decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds on when the web token will expire; by default it's 1800 seconds which is 30 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against database.\nDB_PASSWORD - password for authenticating against database, can be empty.\nDB_HOST - the endpoint where this database sits (usually localhost but can be a static address).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database to mutate.\n\n&#x1F3D7; Choosing a Web Framework\nBy default this boilerplate comes with Fastify as its default web framework for performance benefits. But can be changed to use Express instead. Please follow the steps below to change the web app from Fastify to Express.\n\nReplace the following lines of code in the main.ts file\n\n// from (fastify):\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport * as headers from 'fastify-helmet';\nimport * as fastifyRateLimiter from 'fastify-rate-limit';\nconst app = await NestFactory.create(\n  AppModule,\n  new FastifyAdapter({ logger: console }),\n);\napp.register(headers);\napp.register(fastifyRateLimiter, {\n  max: 100,\n  timeWindow: '1 minute',\n});\n\n// to (express):\nimport * as headers from 'helmet';\nimport * as rateLimiter from 'express-rate-limit';\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\napp.use(headers());\napp.use(\n  rateLimiter({\n    windowMs: 60, // 1 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }),\n);Note If you decided to use Fastify or Express over the other, please remove the extra Express/Fastify dependencies not used.\nIf you choose to use Fastify, this command will purge the project of all Express dependencies:\n# removing Express dependencies\n$ npm rm @nestjs/platform-express express-rate-limit helmet swagger-ui-express @types/express --saveIf you choose to use Express, this command will purge the project of all Fastify dependencies:\n# removing Fastify dependencies\n$ npm rm @nestjs/platform-fastify fastify-helmet fastify-rate-limit fastify-swagger --save\n&#x1F5B4; Choosing a Database\nBy default MYSQL is the database of choice but support for other database types like sqlite, postgres, mongodb, and mssql. To use the any of these, either change the configuration in the .env file, or download the corresponding wrapper library, like sqlite3.\nThe configuration portion involves replicating the settings required for the database type of choice.\nFor MongoDB, TypeORM is not a feature rich as Mongoose. Therefore I created another boilerplate for Mongoose.\n\n✅ Testing\nDocker &#x1F433;\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n&#x1F4A1; TypeDocs\nThe documentation can be generated by typing in npm run typedocs. This will produce a docs folder with the required files.\n# generate docs for code\n$ npm run typedocs\n&#x1F4DD; Open API\nOut of the box, the web app comes with an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is a Object-relational mapping that creates an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n&#x1F50A; Logs\nThis boilerplate comes with a winston module for logging, the configurations for winston can be found in the app module.\n\n&#x1F465; Support\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\n\nLicense\nNest is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WinstonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            WinstonModuleOptions   (src/.../winston.interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    WinstonModuleOptions\n                \n            \n            \n                \n                    Logger options\n\n                \n            \n            \n                \n                        LoggerOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configureOpenAPI   (src/.../index.ts)\n                        \n                        \n                            createWinstonAsyncProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            createWinstonProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            module   (src/.../main.hmr.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_LOCATION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_CURRENT_VERSION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_DESCRIPTION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_ROOT   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_SCHEMES   (src/.../constants.ts)\n                        \n                        \n                            WINSTON_MODULE_OPTIONS   (src/.../winston.constants.ts)\n                        \n                        \n                            WINSTON_MODULE_PROVIDER   (src/.../winston.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/swagger/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configureOpenAPI\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (app: INestApplication) => {\n  const options = new DocumentBuilder()\n    .setTitle(SWAGGER_API_NAME)\n    .setDescription(SWAGGER_API_DESCRIPTION)\n    .setVersion(SWAGGER_API_CURRENT_VERSION)\n    .setSchemes(...SWAGGER_API_SCHEMES)\n    .addBearerAuth(SWAGGER_API_AUTH_NAME, SWAGGER_API_AUTH_LOCATION)\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup(SWAGGER_API_ROOT, app, document);\n}\n                        \n                    \n\n                \n                    \n                        Open api configuration to be used as a basis for web application\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonAsyncProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  options: WinstonModuleAsyncOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_OPTIONS,\n      useFactory: options.useFactory,\n      inject: options.inject || [],\n    },\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: (loggerOpts: LoggerOptions) => createLogger(loggerOpts),\n      inject: [WINSTON_MODULE_OPTIONS],\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Async constructor for a winston provider\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  loggerOpts: WinstonModuleOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: () => createLogger(loggerOpts),\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Constructor a winston provider\n\n                    \n                \n\n            \n        \n\n    src/main.hmr.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Represents the webpack meta data\n\n                    \n                \n\n            \n        \n\n    src/modules/app/app.roles.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolesBuilder\n\n                        \n                    \n                    \n                        \n                            Default value : new RolesBuilder()\n                        \n                    \n\n                \n                    \n                        Roles Builder\n\n                    \n                \n\n            \n        \n\n    src/swagger/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_LOCATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'header'\n                        \n                    \n\n                \n                    \n                        Where the SWAGGER_API_AUTH_NAME will be used in the request\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Authorization'\n                        \n                    \n\n                \n                    \n                        The default authentication method\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_CURRENT_VERSION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n\n                \n                    \n                        Current version of the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_DESCRIPTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API Description'\n                        \n                    \n\n                \n                    \n                        A short description for api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API'\n                        \n                    \n\n                \n                    \n                        The name given to the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_ROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'api/docs'\n                        \n                    \n\n                \n                    \n                        The endpoint for open api ui\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_SCHEMES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Default value : ['http', 'https']\n                        \n                    \n\n                \n                    \n                        Types of api schemes\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'WinstonModuleOptions'\n                        \n                    \n\n                \n                    \n                        Token for the type of configuration to be used when declaring in the app module\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_PROVIDER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'winston'\n                        \n                    \n\n                \n                    \n                        An identifier to use for injecting the winston provider\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
