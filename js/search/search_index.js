var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.505,1,2.035]],["body/controllers/AppController.html",[0,2.58,1,2.927,2,1.638,3,0.398,4,0.398,5,0.256,6,2.878,7,1.225,8,3.699,9,0.398,10,1.288,11,5.442,12,1.497,13,0.034,14,3.455,15,3.302,16,5.442,17,3.935,18,2.878,19,3.302,20,3.302,21,0.619,22,3.455,23,1.535,24,4.534,25,3.935,26,4.261,27,0.571,28,0.818,29,3.804,30,3.699,31,1.638,32,1.258,33,1.155,34,2.947,35,2.878,36,2.927,37,3.455,38,0.398,39,0.092,40,1.371,41,1.497,42,1.799,43,2.498,44,1.638,45,1.061,46,2.927,47,2.498,48,0.894,49,3.455,50,0.023,51,0.023]],["title/modules/AppModule.html",[52,1.26,53,1.827]],["body/modules/AppModule.html",[1,2.757,2,1.727,3,0.495,4,0.287,5,0.27,13,0.034,27,0.595,28,0.592,34,2.734,35,2.081,38,0.287,39,0.066,42,2.463,45,0.767,48,0.942,50,0.019,51,0.019,52,1.446,53,3.394,54,1.184,55,1.578,56,2.081,57,2.081,58,2.081,59,3.021,60,3.021,61,3.021,62,2.097,63,1.437,64,1.301,65,2.497,66,2.335,67,3.419,68,3.583,69,3.119,70,1.437,71,1.806,72,3.643,73,1.437,74,3.583,75,2.497,76,1.601,77,3.031,78,3.643,79,2.081,80,2.081,81,2.497,82,2.497,83,2.497,84,2.497,85,2.497,86,2.497,87,2.497,88,2.081,89,2.497,90,1.806,91,2.497,92,2.081,93,2.497,94,2.081,95,2.497,96,2.081,97,2.497,98,2.081,99,2.497,100,2.081,101,2.497,102,2.081,103,2.497,104,2.081,105,2.497,106,2.081,107,2.497,108,2.497,109,2.635,110,3.035,111,0.287,112,2.497,113,2.497,114,2.497,115,2.081,116,2.497,117,0.909,118,2.497,119,0.991,120,2.497,121,1.301,122,2.497,123,1.601,124,2.497,125,2.497,126,2.497,127,3.643,128,3.035,129,2.497,130,2.242,131,1.806,132,2.497,133,2.497,134,4.301,135,4.728,136,3.643,137,3.643,138,0.652,139,3.643,140,1.876,141,3.643,142,3.643,143,2.497,144,3.643,145,2.497,146,2.497,147,2.497,148,2.497,149,2.497,150,2.497,151,2.497,152,2.497,153,2.497,154,2.497,155,2.497,156,2.497,157,2.497]],["title/injectables/AppService.html",[34,1.654,158,0.821]],["body/injectables/AppService.html",[3,0.402,4,0.402,5,0.259,7,0.995,9,0.402,10,1.296,13,0.034,21,0.823,23,1.541,24,4.73,25,4.106,26,4.283,27,0.551,28,0.827,32,1.271,33,1.167,34,2.394,38,0.402,39,0.093,40,2.168,41,1.512,42,2.846,44,1.655,45,1.072,48,0.903,50,0.024,51,0.024,76,2.237,77,2.947,109,2.524,111,0.402,131,3.324,158,1.189,159,1.655,160,2.908,161,3.83,162,5.464,163,3.49,164,5.025,165,3.49,166,1.072,167,0.688,168,1.072,169,3.49,170,3.49,171,3.49,172,1.818,173,3.49,174,3.49,175,3.49,176,2.524,177,3.49,178,2.908,179,2.524]],["title/controllers/AuthController.html",[0,1.505,180,2.035]],["body/controllers/AuthController.html",[0,2.043,2,1.188,3,0.289,4,0.289,5,0.186,7,1.31,9,0.289,10,1.03,12,1.582,13,0.034,17,2.642,18,3.043,19,3.425,21,0.654,23,1.03,27,0.561,28,0.594,30,3.924,31,1.188,32,0.913,33,0.838,36,2.763,38,0.289,39,0.067,40,1.45,41,2.052,42,1.903,44,1.732,46,3.369,47,2.642,48,0.945,50,0.019,51,0.019,111,0.42,138,0.654,166,1.122,167,0.72,168,1.122,172,1.903,180,2.342,181,2.088,182,2.088,183,2.507,184,3.641,185,2.492,186,4.021,187,3.946,188,2.507,189,2.897,190,2.507,191,4.736,192,4.736,193,3.653,194,4.736,195,4.736,196,2.507,197,4.736,198,3.043,199,2.642,200,3.043,201,2.102,202,3.024,203,3.036,204,1.903,205,2.507,206,2.897,207,2.507,208,4.736,209,2.507,210,2.507,211,1.813,212,2.507,213,2.088,214,2.088,215,1.725,216,1.607,217,2.622,218,2.088,219,2.088,220,2.507,221,2.088,222,2.507,223,2.507,224,2.088,225,2.088,226,2.507,227,2.507,228,1.45,229,2.725,230,2.507,231,3.653,232,2.507,233,2.507,234,2.507]],["title/modules/AuthModule.html",[52,1.26,59,1.827]],["body/modules/AuthModule.html",[2,2.02,3,0.359,4,0.359,5,0.231,13,0.034,27,0.614,28,0.738,38,0.359,39,0.083,48,0.806,50,0.022,51,0.022,52,1.691,54,1.478,55,1.846,59,3.533,62,2.452,63,1.794,64,1.623,66,2.731,67,3.081,68,4.045,69,3.003,70,1.794,71,2.254,73,1.794,109,2.254,110,2.597,138,0.558,180,3.112,185,1.478,215,2.054,216,1.998,217,3.198,218,2.597,235,2.597,236,2.597,237,2.597,238,3.533,239,3.117,240,3.55,241,3.117,242,2.254,243,3.117,244,1.998,245,1.846,246,3.117,247,1.998,248,1.623,249,3.117,250,3.117,251,2.597,252,3.117,253,3.117,254,1.794,255,3.117,256,3.117,257,2.597,258,3.117,259,4.261,260,2.597,261,1.794]],["title/injectables/AuthService.html",[158,0.821,217,1.654]],["body/injectables/AuthService.html",[3,0.273,4,0.273,5,0.176,7,0.758,9,0.273,10,0.988,13,0.034,21,0.825,23,1.3,27,0.552,28,0.561,32,0.862,33,0.792,38,0.273,39,0.063,40,1.829,41,2.231,42,2.683,44,2.442,48,0.906,50,0.018,51,0.018,69,3.067,70,1.363,111,0.566,117,1.678,119,1.39,121,1.825,138,1.065,140,0.94,158,0.906,159,1.123,166,1.281,167,0.97,168,1.281,172,2.683,184,2.534,185,2.442,186,1.712,189,2.831,201,2.016,202,2.4,203,1.518,204,2.683,211,2.534,214,1.973,215,2.035,216,1.518,217,1.825,219,1.973,228,0.94,229,1.363,242,1.712,248,1.233,254,2.652,260,1.973,261,2.4,262,1.973,263,1.518,264,4.17,265,4.17,266,4.17,267,2.368,268,5.472,269,3.504,270,2.368,271,2.368,272,2.919,273,2.919,274,3.957,275,2.919,276,2.368,277,2.368,278,3.504,279,2.534,280,2.919,281,3.504,282,2.919,283,3.474,284,2.919,285,2.919,286,3.474,287,3.504,288,2.368,289,1.973,290,1.825,291,2.016,292,2.016,293,2.368,294,2.368,295,2.368,296,2.368,297,3.504,298,2.368,299,1.712,300,1.712,301,1.973,302,2.368]],["title/injectables/CaslAbilityFactory.html",[158,0.821,303,1.505]],["body/injectables/CaslAbilityFactory.html",[3,0.379,4,0.379,5,0.245,9,0.379,10,1.248,13,0.034,21,0.59,23,0.93,27,0.539,28,0.781,32,1.201,33,1.48,38,0.509,39,0.088,48,0.853,50,0.023,51,0.023,111,0.615,117,1.201,138,1.067,140,1.308,158,1.145,159,1.563,166,1.013,167,0.65,168,1.013,228,1.308,248,1.717,303,2.098,304,3.201,305,2.384,306,4.426,307,4.426,308,3.297,309,2.875,310,4.426,311,4.426,312,4.426,313,3.687,314,2.747,315,2.384,316,2.747,317,3.297,318,2.547,319,3.687,320,3.297,321,3.201,322,3.297,323,3.297,324,3.297,325,4.426,326,1.897,327,3.297,328,2.747,329,4.426,330,3.297,331,2.547,332,2.384,333,3.297,334,4.163,335,3.297,336,3.687,337,4.426,338,3.297,339,3.297,340,3.297,341,3.297,342,3.297,343,3.297,344,1.563,345,2.747,346,3.297,347,3.297,348,3.297]],["title/modules/CaslModule.html",[52,1.26,60,1.827]],["body/modules/CaslModule.html",[3,0.486,4,0.486,5,0.313,13,0.033,27,0.524,28,1,38,0.486,39,0.112,50,0.027,51,0.027,52,2.059,54,2.001,55,2.248,60,3.571,62,2.986,63,2.429,64,2.199,66,3.326,240,4.323,303,3.041,318,2.429,349,3.517,350,3.517,351,3.517,352,4.221,353,2.429]],["title/classes/DeleteUserPolicyHandler.html",[39,0.084,354,1.827]],["body/classes/DeleteUserPolicyHandler.html",[3,0.446,4,0.446,5,0.288,9,0.446,10,1.387,13,0.033,21,0.694,23,1.093,27,0.545,32,1.411,33,1.296,38,0.566,39,0.103,48,1.002,50,0.025,51,0.025,111,0.622,138,0.881,166,1.19,167,0.764,168,1.19,248,2.018,309,2.831,315,2.802,318,2.23,326,3.45,344,1.837,353,2.23,354,2.831,355,3.153,356,2.484,357,3.153,358,3.271,359,4.098,360,4.502,361,3.875,362,2.23,363,4.098,364,3.557,365,2.23,366,2.802,367,2.23,368,3.228]],["title/interfaces/IPolicyHandler.html",[358,1.827,362,1.827]],["body/interfaces/IPolicyHandler.html",[3,0.447,4,0.447,5,0.288,9,0.447,10,1.39,13,0.033,21,0.696,23,1.096,27,0.546,32,1.415,33,1.3,38,0.567,39,0.103,48,1.005,50,0.025,51,0.025,111,0.623,138,0.882,166,1.194,167,0.766,168,1.194,248,2.024,309,2.836,315,2.81,318,2.236,326,3.453,353,2.236,354,2.236,355,3.159,356,2.491,357,2.491,358,3.275,359,4.105,360,4.508,362,2.236,363,4.508,364,3.563,365,2.236,366,2.81,367,2.236,368,3.237,369,3.886,370,3.886]],["title/injectables/JwtAuthGuard.html",[158,0.821,371,2.035]],["body/injectables/JwtAuthGuard.html",[3,0.422,4,0.422,5,0.272,7,0.794,9,0.422,10,1.339,13,0.034,21,0.85,23,1.034,27,0.562,28,0.869,38,0.422,39,0.097,40,1.455,43,2.652,48,1.228,50,0.024,51,0.024,111,0.547,130,1.739,158,1.228,159,1.739,166,1.459,167,0.936,168,1.459,184,3.434,221,3.055,228,1.455,244,2.351,254,2.732,371,3.044,372,4.387,373,3.055,374,3.044,375,3.956,376,3.055,377,4.923,378,3.668,379,3.956,380,4.639,381,3.668,382,3.055,383,2.351,384,3.668,385,2.652,386,3.055,387,3.668,388,3.055,389,3.956,390,3.668,391,3.055,392,3.668,393,3.668]],["title/injectables/JwtStrategy.html",[158,0.821,238,1.827]],["body/injectables/JwtStrategy.html",[3,0.36,4,0.36,5,0.232,7,0.676,9,0.36,10,1.204,13,0.034,21,0.764,23,1.204,27,0.57,28,0.74,38,0.36,39,0.129,40,2.073,41,2.106,44,2.023,50,0.022,51,0.022,69,3.385,70,1.798,111,0.491,138,0.559,158,1.104,159,1.481,166,1.311,167,0.842,168,1.311,172,2.223,185,2.304,198,4.05,204,2.532,215,2.142,216,2.002,224,2.603,228,1.24,238,2.456,244,2.002,248,1.627,254,3.006,257,2.603,273,3.555,274,3.955,285,2.603,290,1.627,386,2.603,388,2.603,394,2.603,395,4.861,396,3.124,397,3.124,398,3.124,399,5.224,400,3.124,401,4.268,402,4.268,403,3.555,404,3.086,405,3.124,406,3.124,407,2.603,408,3.124,409,3.124,410,3.124,411,3.124,412,2.259,413,3.124,414,3.124,415,3.124,416,3.124,417,4.268,418,4.268,419,4.268]],["title/classes/LoginDto.html",[39,0.084,189,1.827]],["body/classes/LoginDto.html",[3,0.439,4,0.439,5,0.283,7,0.825,9,0.439,12,2.108,13,0.034,21,0.871,27,0.491,31,1.806,38,0.439,39,0.15,45,1.735,50,0.025,51,0.025,111,0.56,117,2.126,119,2.316,130,2.307,186,3.519,189,2.8,203,3.12,263,2.108,344,1.806,420,3.174,421,3.519,422,3.174,423,3.81,424,4.085,425,2.755,426,3.81,427,3.877,428,3.519,429,3.877,430,2.755,431,2.443,432,3.12,433,2.755]],["title/classes/PasswordTransformer.html",[39,0.084,434,2.035]],["body/classes/PasswordTransformer.html",[3,0.415,4,0.415,5,0.268,7,1.131,9,0.415,10,1.325,13,0.034,21,0.842,23,1.325,27,0.474,38,0.415,39,0.139,41,2.036,45,1.955,48,1.216,50,0.024,51,0.024,111,0.541,119,1.865,166,1.444,167,0.927,168,1.444,344,1.711,357,3.012,434,3.012,435,3.007,436,3.398,437,5.226,438,4.7,439,3.61,440,4.7,441,4.611,442,4.992,443,4.7,444,3.61,445,4.7,446,3.915,447,1.88,448,3.007,449,3.61]],["title/classes/PatchUserDto.html",[39,0.084,450,1.827]],["body/classes/PatchUserDto.html",[3,0.38,4,0.38,5,0.245,7,0.715,9,0.38,12,2.316,13,0.034,21,0.957,27,0.447,31,1.567,38,0.38,39,0.142,45,1.831,50,0.023,51,0.023,111,0.615,117,2.03,119,2.213,130,1.567,138,0.794,167,1.1,202,2.551,263,1.921,292,3.209,344,1.567,421,2.39,424,4.31,425,2.39,427,4.032,428,3.206,429,4.151,430,2.39,431,2.118,432,2.118,433,2.39,450,2.551,451,4.645,452,2.753,453,3.693,454,3.305,455,3.305,456,3.305,457,3.693,458,3.693,459,3.305,460,3.305,461,3.305,462,3.305,463,3.693,464,2.753,465,2.753]],["title/guards/PoliciesGuard.html",[374,2.035,466,1.827]],["body/guards/PoliciesGuard.html",[3,0.366,4,0.366,5,0.236,9,0.366,10,1.219,13,0.034,21,0.879,23,1.219,27,0.555,28,0.754,38,0.366,39,0.085,40,1.715,48,1.269,50,0.022,51,0.022,111,0.565,138,0.57,158,1.118,166,1.507,167,0.968,168,1.507,172,2.867,185,2.327,204,2.251,228,1.947,303,2.753,309,3.167,318,1.831,326,3.029,353,1.831,357,2.04,365,3.029,366,2.301,367,1.831,375,4.385,376,2.651,377,4.729,379,3.6,380,4.385,382,2.651,383,2.04,391,2.651,466,2.487,467,3.182,468,2.651,469,4.322,470,3.182,471,3.182,472,4.322,473,3.182,474,4.322,475,3.125,476,3.182,477,2.651,478,3.182,479,3.182,480,3.182,481,3.182,482,3.182,483,3.182,484,3.182,485,2.301,486,3.182,487,3.182]],["title/classes/RegisterDto.html",[39,0.084,206,1.827]],["body/classes/RegisterDto.html",[3,0.376,4,0.376,5,0.242,7,0.707,9,0.376,12,2.305,13,0.034,21,0.953,27,0.444,31,1.548,38,0.376,39,0.141,45,1.826,50,0.023,51,0.023,111,0.612,117,2.022,119,2.204,130,2.522,167,1.095,187,3.664,203,2.819,206,2.531,263,1.905,292,3.196,344,1.548,421,3.847,422,2.72,424,4.298,425,2.361,427,4.016,428,3.18,429,4.137,430,2.361,431,2.093,432,3.41,433,2.361,457,3.664,458,3.664,463,3.664,464,2.72,465,2.72,488,2.72,489,3.265,490,3.265,491,3.265,492,3.265,493,3.265,494,3.265]],["title/entities/User.html",[138,0.568,495,1.827]],["body/entities/User.html",[3,0.303,4,0.303,5,0.196,7,0.571,9,0.303,12,2.387,13,0.034,21,0.987,27,0.489,38,0.303,39,0.129,45,1.79,50,0.02,51,0.02,111,0.634,117,1.871,119,2.039,121,1.974,123,1.69,130,1.797,138,0.92,140,1.046,167,1.087,201,1.517,245,2.101,247,1.69,261,2.181,263,1.642,290,2.31,291,2.956,292,2.956,331,2.181,412,1.907,434,3.109,436,3.208,441,3.157,447,1.373,495,3.078,496,2.197,497,3.984,498,5.254,499,2.637,500,2.637,501,2.74,502,3.695,503,2.637,504,2.74,505,2.637,506,2.637,507,3.79,508,3.79,509,2.197,510,3.79,511,2.637,512,2.637,513,3.79,514,3.79,515,3.79,516,3.79,517,2.637,518,3.79,519,2.637,520,3.157,521,2.429,522,3.157,523,3.157,524,2.637,525,2.637,526,3.79,527,3.79,528,2.637,529,2.637]],["title/entities/UserRoles.html",[245,1.375,495,1.827]],["body/entities/UserRoles.html",[3,0.359,4,0.359,5,0.231,7,0.675,8,3.081,9,0.359,12,2.103,13,0.034,21,0.869,27,0.49,32,1.135,33,1.042,38,0.359,39,0.129,50,0.022,51,0.022,111,0.601,123,1.998,138,1.091,225,4.348,245,1.846,261,2.452,263,1.846,275,3.55,290,2.529,291,2.452,316,4.553,331,3.323,332,2.254,336,3.55,447,1.623,495,3.246,498,4.898,502,4.045,504,3.081,509,2.597,520,3.55,521,2.731,522,3.55,523,3.55,530,4.348,531,2.597,532,3.117,533,3.117,534,5.219,535,3.345,536,3.117,537,4.261,538,4.261,539,3.081,540,3.081,541,4.261,542,3.117,543,4.261,544,4.261,545,4.261,546,3.117,547,4.261,548,1.998]],["title/controllers/UsersController.html",[0,1.505,549,2.035]],["body/controllers/UsersController.html",[0,1.772,2,0.938,3,0.228,4,0.228,5,0.147,7,1.256,9,0.228,10,0.862,12,1.822,13,0.034,15,3.476,17,4.109,19,3.476,20,3.476,21,0.753,23,1.46,27,0.536,28,0.469,29,2.547,30,3.624,31,0.938,32,0.72,33,0.662,38,0.228,39,0.053,40,0.785,41,1.97,43,1.43,44,0.938,45,1.539,46,3.081,48,1.088,50,0.016,51,0.016,111,0.43,117,2.012,121,1.593,138,1.128,140,0.785,166,1.292,167,0.829,168,1.292,182,1.648,185,2.519,201,1.76,202,2.151,204,2.827,211,1.43,213,1.648,215,1.531,228,0.785,229,2.151,279,2.211,299,1.43,328,1.648,354,1.76,367,1.138,450,2.42,453,4.005,466,1.138,477,1.648,540,3.288,548,1.268,549,1.96,550,1.648,551,1.978,552,3.738,553,3.058,554,3.058,555,3.058,556,1.978,557,1.978,558,1.978,559,3.738,560,1.978,561,3.058,562,3.058,563,2.547,564,1.978,565,3.058,566,1.978,567,4.206,568,2.547,569,3.058,570,3.058,571,3.504,572,4.005,573,1.978,574,1.978,575,4.807,576,1.978,577,3.058,578,2.211,579,1.978,580,1.978,581,1.978,582,2.547,583,2.547,584,2.547,585,1.978,586,1.648,587,1.43,588,1.978,589,1.648,590,1.978,591,1.648,592,1.648,593,1.648,594,1.978,595,1.978,596,1.978,597,1.978,598,3.738,599,1.978,600,1.978,601,1.648,602,1.648,603,1.978,604,1.978,605,1.978,606,1.978,607,1.978,608,1.978,609,1.978]],["title/modules/UsersModule.html",[52,1.26,61,1.827]],["body/modules/UsersModule.html",[2,2.228,3,0.415,4,0.415,5,0.268,13,0.034,27,0.625,28,0.855,38,0.415,39,0.096,50,0.024,51,0.024,52,1.865,54,1.711,55,2.036,61,3.496,62,2.704,63,2.077,64,1.88,66,3.012,67,2.61,71,2.61,73,2.077,138,0.842,215,2.143,245,2.036,247,2.314,251,3.007,303,2.79,353,2.077,371,3.012,383,2.314,466,2.704,548,2.314,549,3.35,589,3.007,593,3.007,610,3.61,611,3.61,612,3.61,613,4.7,614,3.61,615,3.61,616,3.61,617,3.61,618,3.61,619,3.61]],["title/injectables/UsersService.html",[158,0.821,215,1.156]],["body/injectables/UsersService.html",[3,0.187,4,0.187,5,0.121,7,0.567,9,0.187,10,0.739,13,0.034,15,1.176,20,1.176,21,0.832,23,1.505,25,1.176,27,0.517,28,0.385,32,0.592,33,0.544,38,0.187,39,0.043,40,1.497,41,2.162,42,1.364,44,1.242,45,1.729,47,1.894,48,1.143,50,0.013,51,0.013,73,0.936,111,0.535,117,2.145,119,1.981,121,1.964,138,1.098,140,1.497,158,0.678,159,0.771,166,1.428,167,0.953,168,1.428,172,1.364,185,2.366,199,2.727,201,1.507,202,2.782,204,2.986,206,2.38,215,0.954,228,1.641,229,2.17,245,1.425,247,1.042,261,2.17,279,1.894,280,1.355,290,1.713,291,1.893,299,2.379,300,1.894,301,1.355,321,1.176,331,0.936,446,2.182,447,0.847,448,2.182,450,2.38,497,1.894,501,1.176,504,1.894,521,1.042,535,1.042,539,1.894,540,3.361,548,1.042,563,2.182,571,3.682,572,4.445,578,1.894,582,3.142,583,2.182,584,2.74,586,1.355,591,1.355,592,1.355,602,2.182,620,1.355,621,2.619,622,2.619,623,1.626,624,4.991,625,3.289,626,1.626,627,3.289,628,2.619,629,1.626,630,2.619,631,2.619,632,1.626,633,2.619,634,2.619,635,1.626,636,2.619,637,1.626,638,4.419,639,2.619,640,1.626,641,2.619,642,1.626,643,2.619,644,2.619,645,1.626,646,1.626,647,1.626,648,1.626,649,1.626,650,1.626,651,1.626,652,1.626,653,1.626,654,1.626,655,1.626,656,1.626,657,1.626,658,1.626,659,1.626,660,1.626,661,1.626,662,1.626,663,1.626,664,1.626,665,1.355,666,2.182,667,1.626,668,1.626,669,1.626,670,1.626,671,1.626,672,1.626,673,1.626,674,1.626,675,1.626,676,1.626,677,1.626,678,1.355,679,1.626,680,1.626,681,1.626,682,2.182,683,1.626,684,1.626,685,1.626,686,1.626,687,1.626,688,1.626,689,1.626,690,1.626,691,1.042,692,1.626]],["title/coverage.html",[693,3.12]],["body/coverage.html",[0,2.183,1,1.809,5,0.209,6,2.351,13,0.033,34,1.47,36,1.809,39,0.14,50,0.02,51,0.02,111,0.325,138,0.712,140,1.12,158,1.415,160,2.351,179,2.04,180,1.809,181,2.351,189,1.624,206,1.624,215,1.027,217,1.47,238,1.624,245,1.222,262,2.351,303,1.338,304,2.04,305,2.04,354,1.624,355,2.549,356,2.549,358,1.624,362,1.624,371,1.809,372,2.351,373,2.351,374,1.809,385,2.04,394,2.351,420,2.351,434,1.809,435,2.351,450,1.624,451,2.351,452,2.351,466,1.624,468,2.351,475,2.04,485,2.04,488,2.351,495,2.288,496,2.351,530,2.351,531,2.351,549,1.809,550,2.351,587,2.04,620,2.351,693,2.04,694,2.822,695,2.822,696,2.351,697,5.103,698,3.313,699,6.163,700,5.979,701,5.186,702,2.822,703,5.271,704,2.351,705,3.313,706,2.351,707,5,708,2.822,709,2.822,710,3.313,711,4.605,712,3.313,713,3.313,714,2.822,715,2.351,716,2.876,717,2.351,718,3.812,719,2.351,720,2.351,721,5.469,722,2.351,723,2.351,724,2.351,725,2.822,726,2.822,727,2.351]],["title/dependencies.html",[55,1.652,728,2.216]],["body/dependencies.html",[5,0.256,13,0.034,28,0.818,31,1.638,39,0.121,50,0.023,51,0.023,55,1.497,70,1.988,73,1.988,74,2.878,76,2.215,77,3.279,79,2.878,80,2.878,242,2.498,244,2.215,254,1.988,286,2.878,314,2.878,383,2.215,407,2.878,431,2.215,436,2.498,447,1.799,497,2.498,729,3.455,730,6.019,731,3.455,732,3.455,733,3.455,734,3.455,735,4.566,736,3.804,737,3.455,738,3.455,739,3.455,740,3.455,741,3.455,742,3.455,743,2.878,744,3.455,745,3.455,746,3.455,747,5.659,748,3.455,749,3.804,750,2.878,751,2.878,752,3.455,753,3.455,754,3.455,755,3.455,756,3.455,757,3.455,758,3.455,759,3.455,760,3.455,761,3.455,762,3.455,763,3.455,764,3.455,765,3.455,766,3.455,767,3.455,768,3.455,769,3.455,770,3.455,771,3.455,772,3.455,773,3.455,774,3.455,775,3.455,776,3.455,777,3.455]],["title/miscellaneous/functions.html",[778,1.386,779,3.177]],["body/miscellaneous/functions.html",[9,0.566,13,0.029,50,0.029,51,0.029,718,3.557,719,4.995,778,2.562,779,4.098,780,4.098]],["title/index.html",[9,0.306,781,2.66,782,2.66]],["body/index.html",[5,0.259,7,0.509,8,3.322,13,0.033,27,0.389,33,0.786,45,0.438,46,0.913,50,0.012,51,0.012,52,1.531,53,0.82,55,2.063,64,1.564,69,0.82,76,2.473,77,1.508,88,1.187,90,2.172,92,1.187,94,1.187,96,1.187,98,1.187,100,1.187,102,1.187,104,1.187,106,1.187,111,0.271,115,1.187,117,0.519,119,0.933,121,2.555,128,1.959,131,2.172,140,0.565,161,2.904,164,1.959,167,0.281,176,2.521,179,1.701,199,1.03,200,1.187,228,0.933,229,1.353,272,1.187,274,1.03,282,1.187,283,1.959,284,1.187,289,1.959,300,2.521,321,1.03,334,1.187,345,1.187,403,1.187,404,1.03,432,1.925,447,2.163,501,1.03,521,0.913,535,2.235,539,1.701,601,2.904,665,1.959,666,1.187,678,1.187,682,1.187,691,1.508,693,1.701,697,1.959,701,2.502,716,2.521,727,1.187,743,3.214,749,2.502,750,4.28,751,4.493,783,2.352,784,1.425,785,2.352,786,3.486,787,1.425,788,1.425,789,1.425,790,2.352,791,1.425,792,2.352,793,1.425,794,1.425,795,2.352,796,1.425,797,2.352,798,3.003,799,2.352,800,3.486,801,2.352,802,2.352,803,1.425,804,4.593,805,2.352,806,2.352,807,1.425,808,1.425,809,4.154,810,1.425,811,1.425,812,1.425,813,1.425,814,3.003,815,1.425,816,5.233,817,3.486,818,3.486,819,1.425,820,2.352,821,1.425,822,1.425,823,1.425,824,3.858,825,2.352,826,2.352,827,2.352,828,3.003,829,3.003,830,4.394,831,1.425,832,1.425,833,1.425,834,1.425,835,1.425,836,3.486,837,3.003,838,1.425,839,1.425,840,1.425,841,1.425,842,2.352,843,1.425,844,1.425,845,1.425,846,2.352,847,1.425,848,1.425,849,2.352,850,1.425,851,1.425,852,1.425,853,3.003,854,4.762,855,3.486,856,3.486,857,1.425,858,1.425,859,3.858,860,2.352,861,1.425,862,1.425,863,1.425,864,2.352,865,1.425,866,4.154,867,1.425,868,1.425,869,1.425,870,1.425,871,1.425,872,2.352,873,3.003,874,3.003,875,1.425,876,1.425,877,1.425,878,1.425,879,3.858,880,1.425,881,1.425,882,1.425,883,1.425,884,2.352,885,1.425,886,1.425,887,1.425,888,1.425,889,1.425,890,1.425,891,1.425,892,1.425,893,1.425,894,1.425,895,1.425,896,1.425,897,1.425,898,1.425,899,1.425,900,1.425,901,1.425,902,1.425,903,1.425,904,1.425,905,1.425,906,3.858,907,2.352,908,2.352,909,1.425,910,1.425,911,1.425,912,1.425,913,1.187,914,1.425,915,1.425,916,1.425,917,1.425,918,1.425,919,1.425,920,1.425,921,1.425,922,2.352,923,2.352,924,1.425,925,1.425,926,1.425,927,2.352,928,1.425,929,1.425,930,1.425,931,1.425,932,2.352,933,1.425,934,1.425,935,1.425,936,2.352,937,1.425,938,2.352,939,3.486,940,1.425,941,3.486,942,1.425,943,2.352,944,1.425,945,1.425,946,2.352,947,1.425,948,1.425,949,2.352,950,1.425,951,1.425,952,1.425,953,2.352,954,1.425,955,1.425,956,1.425,957,1.425,958,1.425,959,1.425,960,1.425,961,1.425,962,1.425,963,1.425,964,1.425,965,1.425,966,1.425,967,1.425,968,1.425,969,1.425,970,1.425,971,1.425,972,1.425,973,1.425,974,2.352,975,2.352,976,2.352,977,3.486,978,1.187,979,1.425,980,1.425,981,1.425,982,2.352,983,1.425,984,1.425,985,1.425,986,1.425,987,2.352,988,1.425,989,1.425,990,1.425,991,1.425,992,1.425,993,1.425,994,1.425,995,1.425,996,1.425,997,1.425,998,1.425,999,2.352,1000,1.425,1001,2.352,1002,3.486,1003,3.003,1004,3.486,1005,2.352,1006,2.352,1007,1.425,1008,1.425,1009,1.425,1010,1.425,1011,3.003,1012,1.425,1013,1.425,1014,1.425,1015,1.425,1016,1.425,1017,1.425,1018,1.425,1019,1.425,1020,1.425,1021,1.425,1022,1.959,1023,1.425,1024,1.425,1025,1.425,1026,1.425,1027,1.425,1028,1.425,1029,1.425,1030,1.425,1031,1.425,1032,1.425,1033,1.425,1034,1.425,1035,1.425,1036,1.425,1037,1.425,1038,1.425,1039,1.425,1040,1.425,1041,1.425,1042,1.425,1043,1.425,1044,1.425,1045,1.187,1046,1.425,1047,1.425,1048,1.425,1049,1.425,1050,1.425,1051,1.425,1052,1.425,1053,1.187,1054,1.187,1055,1.425,1056,1.187]],["title/modules.html",[54,2.046]],["body/modules.html",[13,0.028,50,0.028,51,0.028,53,2.704,54,2.228,59,2.704,60,2.704,61,2.704,736,5.061,1045,5.061,1057,6.075,1058,6.075]],["title/overview.html",[1059,3.595]],["body/overview.html",[2,1.725,13,0.033,34,2.732,50,0.024,51,0.024,53,3.571,54,1.725,55,2.046,56,3.031,57,3.031,58,3.031,59,3.596,60,3.393,61,3.454,62,2.718,63,2.094,64,1.895,123,2.332,159,1.725,215,2.022,217,3.127,235,3.031,236,3.031,237,3.031,238,3.454,303,2.885,344,1.725,349,3.031,350,3.031,351,3.031,362,2.094,374,2.332,691,3.028,1059,3.031,1060,3.638,1061,3.638,1062,3.638,1063,3.638,1064,3.638]],["title/properties.html",[263,1.652,728,2.216]],["body/properties.html",[13,0.032,50,0.029,51,0.029,263,2.108,1053,4.054,1054,4.054,1056,4.054,1065,4.054,1066,4.866,1067,4.866,1068,4.866]],["title/miscellaneous/typealiases.html",[778,1.386,1069,3.814]],["body/miscellaneous/typealiases.html",[9,0.523,13,0.031,50,0.028,51,0.028,111,0.523,304,3.285,305,4.195,309,2.614,313,3.785,319,4.52,326,3.122,355,2.912,356,3.718,358,2.614,364,4.195,365,3.122,485,3.285,778,2.366,1070,4.543,1071,5.425,1072,5.425]],["title/miscellaneous/variables.html",[778,1.386,1073,3.177]],["body/miscellaneous/variables.html",[7,0.885,9,0.338,13,0.034,36,2.621,45,1.701,50,0.021,51,0.021,90,2.957,111,0.686,130,1.939,138,0.958,140,1.623,167,0.579,176,4.006,178,2.446,245,1.771,290,2.451,291,1.69,292,1.69,331,2.353,332,2.957,365,1.69,367,2.353,385,2.957,389,2.446,404,2.957,412,2.123,442,5.135,475,2.957,535,3.951,568,2.446,578,2.123,587,2.957,691,3.262,696,2.446,698,4.239,704,2.446,705,2.446,706,3.407,710,2.446,712,2.446,713,3.92,715,2.446,716,3.679,717,2.446,718,2.123,720,3.407,722,3.407,723,3.407,724,3.407,778,1.529,780,4.239,913,2.446,978,2.446,1022,2.446,1065,2.446,1073,2.446,1074,4.089,1075,2.936,1076,2.936,1077,4.089,1078,2.936,1079,2.936,1080,4.089,1081,2.936,1082,2.936,1083,2.936,1084,4.089,1085,2.936,1086,2.936,1087,2.936,1088,2.936,1089,2.936]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1066,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.7.0",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":701,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["14.1.1",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":819,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1062,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":902,"title":{},"body":{"index.html":{}}}],["255",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1061,"title":{},"body":{"overview.html":{}}}],["3.8.1",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1060,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":903,"title":{},"body":{"index.html":{}}}],["400",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["4200",{"_index":868,"title":{},"body":{"index.html":{}}}],["5",{"_index":1064,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1063,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":954,"title":{},"body":{"index.html":{}}}],["7.3.0",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":309,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":368,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["ability.factory",{"_index":353,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{}}}],["ability.factory.ts",{"_index":305,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:21",{"_index":308,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":310,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":311,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstraction",{"_index":1035,"title":{},"body":{"index.html":{}}}],["access",{"_index":336,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/UserRoles.html":{}}}],["account",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1034,"title":{},"body":{"index.html":{}}}],["actual",{"_index":920,"title":{},"body":{"index.html":{}}}],["add(this.expiration",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["address",{"_index":917,"title":{},"body":{"index.html":{}}}],["again",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["against",{"_index":908,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1070,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":899,"title":{},"body":{"index.html":{}}}],["angular",{"_index":795,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1068,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":989,"title":{},"body":{"index.html":{}}}],["api",{"_index":176,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":178,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":427,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":454,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":460,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@matches(/^[a",{"_index":456,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty({required",{"_index":421,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiresponse",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1027,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["app.register(fastifyratelimiter",{"_index":945,"title":{},"body":{"index.html":{}}}],["app.register(headers",{"_index":944,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.use",{"_index":952,"title":{},"body":{"index.html":{}}}],["app.use(headers",{"_index":951,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":613,"title":{},"body":{"modules/UsersModule.html":{}}}],["app_url",{"_index":888,"title":{},"body":{"index.html":{}}}],["appability",{"_index":326,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":161,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":792,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":53,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1047,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.controller.test.ts",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl",{"_index":1071,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1072,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":696,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":160,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":165,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":169,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/auth/auth.controller.test.ts",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.controller.ts",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.controller.ts:37",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:51",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:21",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:41",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:68",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":420,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:16",{"_index":426,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:26",{"_index":423,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":488,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:22",{"_index":490,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:32",{"_index":494,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:42",{"_index":492,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:52",{"_index":493,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":372,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":394,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:13",{"_index":397,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl",{"_index":304,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":352,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":468,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:15",{"_index":471,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:30",{"_index":473,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":470,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":355,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/dto/patch",{"_index":451,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":435,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":444,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":439,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":530,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":496,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:18",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:24",{"_index":525,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:30",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:36",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:42",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:48",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:60",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:41",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:53",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:71",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:85",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":612,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:108",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:131",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:22",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:40",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:49",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:59",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:76",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":34,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":827,"title":{},"body":{"index.html":{}}}],["async",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":615,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":373,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":378,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":381,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/register.dto",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":614,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":180,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["authenticating",{"_index":907,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["authentication/authorization",{"_index":810,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":384,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":387,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":59,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1056,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":217,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["backend",{"_index":808,"title":{},"body":{"index.html":{}}}],["bad",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":889,"title":{},"body":{"index.html":{}}}],["based",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["below",{"_index":846,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":926,"title":{},"body":{"index.html":{}}}],["between",{"_index":963,"title":{},"body":{"index.html":{}}}],["beware",{"_index":537,"title":{},"body":{"entities/UserRoles.html":{}}}],["bloated",{"_index":966,"title":{},"body":{"index.html":{}}}],["body",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":804,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":363,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["bootstrap",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":960,"title":{},"body":{"index.html":{}}}],["box",{"_index":814,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1042,"title":{},"body":{"index.html":{}}}],["brew",{"_index":825,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1058,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":736,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":329,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["building",{"_index":787,"title":{},"body":{"index.html":{}}}],["can(useractionsenum.manage",{"_index":333,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(useractionsenum.read",{"_index":338,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(useractionsenum.update",{"_index":339,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canactivate",{"_index":375,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":379,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["cascade",{"_index":545,"title":{},"body":{"entities/UserRoles.html":{}}}],["casl",{"_index":318,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":314,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl",{"_index":616,"title":{},"body":{"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["caslabilityfactory",{"_index":303,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":60,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["change",{"_index":990,"title":{},"body":{"index.html":{}}}],["check",{"_index":476,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["check_policies_key",{"_index":475,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["checks",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":826,"title":{},"body":{"index.html":{}}}],["choice",{"_index":983,"title":{},"body":{"index.html":{}}}],["choose",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["choosing",{"_index":923,"title":{},"body":{"index.html":{}}}],["class",{"_index":39,"title":{"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":344,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["clone",{"_index":849,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":349,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":350,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":351,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":610,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":611,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":932,"title":{},"body":{"index.html":{}}}],["column",{"_index":498,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["column({name",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":533,"title":{},"body":{"entities/UserRoles.html":{}}}],["column({unique",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["comes",{"_index":809,"title":{},"body":{"index.html":{}}}],["coming",{"_index":327,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["command",{"_index":859,"title":{},"body":{"index.html":{}}}],["completed",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["compose",{"_index":842,"title":{},"body":{"index.html":{}}}],["config",{"_index":882,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["configservice.get('app_env",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":879,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1041,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":869,"title":{},"body":{"index.html":{}}}],["connection",{"_index":905,"title":{},"body":{"index.html":{}}}],["connections",{"_index":919,"title":{},"body":{"index.html":{}}}],["console",{"_index":943,"title":{},"body":{"index.html":{}}}],["const",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":396,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":163,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":376,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(userrepository",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["container",{"_index":877,"title":{},"body":{"index.html":{}}}],["contents",{"_index":796,"title":{},"body":{"index.html":{}}}],["context",{"_index":382,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":391,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":480,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":833,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('v1/auth",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('v1/users",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":991,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":693,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":857,"title":{},"body":{"index.html":{}}}],["create",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":539,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createforuser",{"_index":306,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":307,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createquerybuilder('users",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtoken",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":317,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["crud",{"_index":811,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":446,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":448,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["current",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1037,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1029,"title":{},"body":{"index.html":{}}}],["default",{"_index":535,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":540,"title":{},"body":{"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':username",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(username",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":354,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1013,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":55,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":968,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":829,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":798,"title":{},"body":{"index.html":{}}}],["describe",{"_index":1025,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":840,"title":{},"body":{"index.html":{}}}],["detached",{"_index":878,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":935,"title":{},"body":{"index.html":{}}}],["details",{"_index":345,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["detection#use",{"_index":343,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":346,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["determines",{"_index":883,"title":{},"body":{"index.html":{}}}],["dev",{"_index":886,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1052,"title":{},"body":{"index.html":{}}}],["development",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":918,"title":{},"body":{"index.html":{}}}],["directory",{"_index":875,"title":{},"body":{"index.html":{}}}],["docker",{"_index":816,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1011,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":894,"title":{},"body":{"index.html":{}}}],["download",{"_index":853,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":838,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":821,"title":{},"body":{"index.html":{}}}],["dto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["dto/login.dto",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/patch",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register.dto",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["dynamic",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1005,"title":{},"body":{"index.html":{}}}],["each",{"_index":956,"title":{},"body":{"index.html":{}}}],["edit",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edit(payload",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["efficient",{"_index":788,"title":{},"body":{"index.html":{}}}],["email",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["employs",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":910,"title":{},"body":{"index.html":{}}}],["enable",{"_index":961,"title":{},"body":{"index.html":{}}}],["encouraged",{"_index":971,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":897,"title":{},"body":{"index.html":{}}}],["end",{"_index":1019,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":913,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["enough",{"_index":929,"title":{},"body":{"index.html":{}}}],["entities",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":495,"title":{"entities/User.html":{},"entities/UserRoles.html":{}},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":534,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":856,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":858,"title":{},"body":{"index.html":{}}}],["environment",{"_index":716,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["everything",{"_index":337,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exclude",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["exec",{"_index":1003,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":469,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":472,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":873,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":380,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["exist",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":861,"title":{},"body":{"index.html":{}}}],["exists",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["expiresinformatted",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":867,"title":{},"body":{"index.html":{}}}],["express",{"_index":750,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extends",{"_index":386,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":312,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["failed",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":511,"title":{},"body":{"entities/User.html":{}}}],["fastify",{"_index":751,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["fastifyadapter",{"_index":936,"title":{},"body":{"index.html":{}}}],["fastifyratelimiter",{"_index":940,"title":{},"body":{"index.html":{}}}],["feat",{"_index":1044,"title":{},"body":{"index.html":{}}}],["feature",{"_index":997,"title":{},"body":{"index.html":{}}}],["features",{"_index":812,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":424,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["fields",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1020,"title":{},"body":{"index.html":{}}}],["folder",{"_index":1017,"title":{},"body":{"index.html":{}}}],["follow",{"_index":843,"title":{},"body":{"index.html":{}}}],["following",{"_index":874,"title":{},"body":{"index.html":{}}}],["format",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["format('lll",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":786,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":438,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1018,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1048,"title":{},"body":{"index.html":{}}}],["function",{"_index":485,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":779,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1039,"title":{},"body":{"index.html":{}}}],["generate",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1012,"title":{},"body":{"index.html":{}}}],["get(':username",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(id",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass(username",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["getone",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["getstartingmessage",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":781,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@request",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(req",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(@param('username",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":850,"title":{},"body":{"index.html":{}}}],["github",{"_index":1009,"title":{},"body":{"index.html":{}}}],["given",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":440,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":497,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":374,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":467,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handle",{"_index":359,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handle(ability",{"_index":360,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handler",{"_index":474,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":486,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":487,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":367,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":356,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:17",{"_index":361,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:7",{"_index":370,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":441,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{}}}],["hashed",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["headers",{"_index":938,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":793,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":939,"title":{},"body":{"index.html":{}}}],["highly",{"_index":970,"title":{},"body":{"index.html":{}}}],["host",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1021,"title":{},"body":{"index.html":{}}}],["http",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["http://localhost:4200",{"_index":881,"title":{},"body":{"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":342,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":851,"title":{},"body":{"index.html":{}}}],["iat",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["igenericmessagebody",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imessage",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":357,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":900,"title":{},"body":{"index.html":{}}}],["infersubjects",{"_index":313,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{}}}],["inject(winston_module_provider",{"_index":171,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":158,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":159,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":794,"title":{},"body":{"index.html":{}}}],["instead",{"_index":930,"title":{},"body":{"index.html":{}}}],["interface",{"_index":362,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":369,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ip",{"_index":957,"title":{},"body":{"index.html":{}}}],["ipolicyhandler",{"_index":358,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":385,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalphanumeric",{"_index":428,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isemail",{"_index":463,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":429,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["ispublic",{"_index":389,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":901,"title":{},"body":{"index.html":{}}}],["item",{"_index":347,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":348,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["itokenreturnbody",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["javascript",{"_index":822,"title":{},"body":{"index.html":{}}}],["joi",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":371,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":238,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepconnectionalive",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["keyword",{"_index":323,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["layer",{"_index":1036,"title":{},"body":{"index.html":{}}}],["leaves",{"_index":965,"title":{},"body":{"index.html":{}}}],["left",{"_index":909,"title":{},"body":{"index.html":{}}}],["length",{"_index":507,"title":{},"body":{"entities/User.html":{}}}],["level",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":993,"title":{},"body":{"index.html":{}}}],["license",{"_index":1053,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1055,"title":{},"body":{"index.html":{}}}],["limit",{"_index":743,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["lines",{"_index":931,"title":{},"body":{"index.html":{}}}],["loads",{"_index":876,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":837,"title":{},"body":{"index.html":{}}}],["locally",{"_index":820,"title":{},"body":{"index.html":{}}}],["location",{"_index":1031,"title":{},"body":{"index.html":{}}}],["logger",{"_index":164,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["logging",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["login(@body",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":189,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logs",{"_index":1040,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["made",{"_index":805,"title":{},"body":{"index.html":{}}}],["main",{"_index":1043,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":933,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":890,"title":{},"body":{"index.html":{}}}],["make",{"_index":817,"title":{},"body":{"index.html":{}}}],["manage",{"_index":320,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["manual",{"_index":847,"title":{},"body":{"index.html":{}}}],["many",{"_index":522,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["manytoone",{"_index":547,"title":{},"body":{"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":542,"title":{},"body":{"entities/UserRoles.html":{}}}],["mapping",{"_index":1033,"title":{},"body":{"index.html":{}}}],["matches",{"_index":464,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^[a",{"_index":465,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":946,"title":{},"body":{"index.html":{}}}],["maxfiles",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migrating",{"_index":962,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":430,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":433,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["mins",{"_index":904,"title":{},"body":{"index.html":{}}}],["minute",{"_index":948,"title":{},"body":{"index.html":{}}}],["minutes",{"_index":955,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":778,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1054,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":864,"title":{},"body":{"index.html":{}}}],["modular",{"_index":928,"title":{},"body":{"index.html":{}}}],["module",{"_index":52,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":54,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["mongodb",{"_index":987,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":999,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":988,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":828,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":982,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":167,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":177,"title":{},"body":{"injectables/AppService.html":{}}}],["necessary",{"_index":995,"title":{},"body":{"index.html":{}}}],["needed",{"_index":911,"title":{},"body":{"index.html":{}}}],["nest",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["nestfactory.create",{"_index":942,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":950,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":937,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":383,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":749,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/swagger",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":785,"title":{},"body":{"index.html":{}}}],["non",{"_index":815,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["note",{"_index":996,"title":{},"body":{"index.html":{}}}],["npm",{"_index":854,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["number",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":803,"title":{},"body":{"index.html":{}}}],["object",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.keys(payload).foreach((key",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":924,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":544,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":521,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["ones",{"_index":934,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":527,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":1022,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":723,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":724,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["operation",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":841,"title":{},"body":{"index.html":{}}}],["operations",{"_index":922,"title":{},"body":{"index.html":{}}}],["optional",{"_index":168,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":884,"title":{},"body":{"index.html":{}}}],["os",{"_index":1051,"title":{},"body":{"index.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":845,"title":{},"body":{"index.html":{}}}],["over",{"_index":927,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1059,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":728,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1010,"title":{},"body":{"index.html":{}}}],["panel",{"_index":834,"title":{},"body":{"index.html":{}}}],["param",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('username",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["particular",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1050,"title":{},"body":{"index.html":{}}}],["passport",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":528,"title":{},"body":{"entities/User.html":{}}}],["passwords",{"_index":514,"title":{},"body":{"entities/User.html":{}}}],["passwordtransformer",{"_index":434,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"coverage.html":{}}}],["patch",{"_index":453,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["patch()@apiresponse({status",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(payload",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":450,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["payload",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload[key",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["per",{"_index":959,"title":{},"body":{"index.html":{}}}],["perform",{"_index":921,"title":{},"body":{"index.html":{}}}],["performance",{"_index":925,"title":{},"body":{"index.html":{}}}],["permit",{"_index":538,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":813,"title":{},"body":{"index.html":{}}}],["pg",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":862,"title":{},"body":{"index.html":{}}}],["plaintoclass(user",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":477,"title":{},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":466,"title":{"guards/PoliciesGuard.html":{}},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":366,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":365,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":364,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":478,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":482,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["ports",{"_index":872,"title":{},"body":{"index.html":{}}}],["post",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":986,"title":{},"body":{"index.html":{}}}],["power",{"_index":892,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":797,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":502,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":172,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":844,"title":{},"body":{"index.html":{}}}],["prod",{"_index":887,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1016,"title":{},"body":{"index.html":{}}}],["production",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"entities/UserRoles.html":{}}}],["profiles",{"_index":541,"title":{},"body":{"entities/UserRoles.html":{}}}],["profileservice",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["progress",{"_index":801,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":784,"title":{},"body":{"index.html":{}}}],["promise",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":263,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":807,"title":{},"body":{"index.html":{}}}],["provide",{"_index":618,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":1028,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1046,"title":{},"body":{"index.html":{}}}],["public",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('/')@apiresponse({status",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register')@apiresponse({status",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["purge",{"_index":974,"title":{},"body":{"index.html":{}}}],["purged",{"_index":973,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":896,"title":{},"body":{"index.html":{}}}],["queried",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["quickly",{"_index":806,"title":{},"body":{"index.html":{}}}],["r",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["random",{"_index":898,"title":{},"body":{"index.html":{}}}],["rate",{"_index":941,"title":{},"body":{"index.html":{}}}],["ratelimiter",{"_index":949,"title":{},"body":{"index.html":{}}}],["react",{"_index":870,"title":{},"body":{"index.html":{}}}],["read",{"_index":334,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["received",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["recommended",{"_index":912,"title":{},"body":{"index.html":{}}}],["record",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["records",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":377,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{}}}],["register(@body",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":206,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registered",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerpayload",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":1032,"title":{},"body":{"index.html":{}}}],["relations",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["relationship",{"_index":523,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1049,"title":{},"body":{"index.html":{}}}],["remark",{"_index":321,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["removed",{"_index":893,"title":{},"body":{"index.html":{}}}],["removes",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["removing",{"_index":975,"title":{},"body":{"index.html":{}}}],["replace",{"_index":860,"title":{},"body":{"index.html":{}}}],["repo",{"_index":802,"title":{},"body":{"index.html":{}}}],["repository",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["represent",{"_index":520,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":324,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["req",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user",{"_index":328,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["request'})@apiresponse({status",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":958,"title":{},"body":{"index.html":{}}}],["required",{"_index":432,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"index.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":863,"title":{},"body":{"index.html":{}}}],["rest",{"_index":852,"title":{},"body":{"index.html":{}}}],["restful",{"_index":1026,"title":{},"body":{"index.html":{}}}],["results",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rich",{"_index":998,"title":{},"body":{"index.html":{}}}],["rm",{"_index":976,"title":{},"body":{"index.html":{}}}],["role",{"_index":331,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":531,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":532,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":536,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":546,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["roles",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["rotate",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":866,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":823,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["sal",{"_index":1067,"title":{},"body":{"properties.html":{}}}],["save",{"_index":981,"title":{},"body":{"index.html":{}}}],["saveif",{"_index":980,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":789,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":510,"title":{},"body":{"entities/User.html":{}}}],["serve",{"_index":895,"title":{},"body":{"index.html":{}}}],["server",{"_index":790,"title":{},"body":{"index.html":{}}}],["service",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["setmetadata(check_policies_key",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('username",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":891,"title":{},"body":{"index.html":{}}}],["side",{"_index":791,"title":{},"body":{"index.html":{}}}],["signed",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":1014,"title":{},"body":{"index.html":{}}}],["sits",{"_index":914,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":322,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["specification",{"_index":1023,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":985,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":994,"title":{},"body":{"index.html":{}}}],["stack",{"_index":831,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":839,"title":{},"body":{"index.html":{}}}],["start",{"_index":836,"title":{},"body":{"index.html":{}}}],["started",{"_index":782,"title":{"index.html":{}},"body":{}}],["starter",{"_index":783,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["startingmessage",{"_index":162,"title":{},"body":{"injectables/AppService.html":{}}}],["state",{"_index":967,"title":{},"body":{"index.html":{}}}],["statements",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":916,"title":{},"body":{"index.html":{}}}],["status",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["strategy",{"_index":395,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":325,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":319,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":388,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1045,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":984,"title":{},"body":{"index.html":{}}}],["sure",{"_index":818,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1057,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":977,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":727,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":1004,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1008,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":1007,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1006,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":799,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1002,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1000,"title":{},"body":{"index.html":{}}}],["this.appservice.startingmessage",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(user",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslabilityfactory.createforuser(user",{"_index":481,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":483,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyusername(payload.username",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(username",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.info('calling",{"_index":173,"title":{},"body":{"injectables/AppService.html":{}}}],["this.reflector.get",{"_index":479,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":390,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.userrepository",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.delete(username",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(payload",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusernameandpass",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["thus",{"_index":969,"title":{},"body":{"index.html":{}}}],["time",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timewindow",{"_index":947,"title":{},"body":{"index.html":{}}}],["to(value",{"_index":443,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["tokens",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["transform",{"_index":445,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":436,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transports",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":835,"title":{},"body":{"index.html":{}}}],["true",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":425,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["true})@isemail()@isnotempty",{"_index":489,"title":{},"body":{"classes/RegisterDto.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":422,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["true})@matches(/^[a",{"_index":491,"title":{},"body":{"classes/RegisterDto.html":{}}}],["try",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":964,"title":{},"body":{"index.html":{}}}],["type",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1069,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":800,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":484,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["typeorm",{"_index":447,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["types/express",{"_index":979,"title":{},"body":{"index.html":{}}}],["typing",{"_index":1015,"title":{},"body":{"index.html":{}}}],["ui",{"_index":978,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":509,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["unique",{"_index":529,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1001,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["unused",{"_index":972,"title":{},"body":{"index.html":{}}}],["up",{"_index":880,"title":{},"body":{"index.html":{}}}],["update",{"_index":341,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["url",{"_index":501,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["url(payload.email",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":906,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":619,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1024,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":138,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":452,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":455,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:30",{"_index":462,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:38",{"_index":459,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:46",{"_index":461,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.entity",{"_index":548,"title":{},"body":{"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":543,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":330,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.username",{"_index":340,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user[key",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":315,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["username",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userrepository",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":245,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":316,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":332,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":617,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.entity",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":549,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":61,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":215,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":865,"title":{},"body":{"index.html":{}}}],["usually",{"_index":915,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":885,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":504,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["v1/auth",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["v1/users",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["valid",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":398,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validates",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":431,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":442,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":449,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":437,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":697,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1073,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1065,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":824,"title":{},"body":{"index.html":{}}}],["view",{"_index":1038,"title":{},"body":{"index.html":{}}}],["vue",{"_index":871,"title":{},"body":{"index.html":{}}}],["web",{"_index":830,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["welcomemessage",{"_index":174,"title":{},"body":{"injectables/AppService.html":{}}}],["where('users.username",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["windowms",{"_index":953,"title":{},"body":{"index.html":{}}}],["winston",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":170,"title":{},"body":{"injectables/AppService.html":{}}}],["winstonfilerotator",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":848,"title":{},"body":{"index.html":{}}}],["work",{"_index":1030,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":992,"title":{},"body":{"index.html":{}}}],["write",{"_index":335,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["writing",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["xampp",{"_index":832,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":855,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":458,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["za",{"_index":457,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["zippedarchive",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStartingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStartingMessage\n                        \n                    \n                \n            \n            \n                \ngetStartingMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/')@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get('/')\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  getStartingMessage(): IMessage {\n    return this.appService.startingMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule,\n    UsersModule,\n    CaslModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                startingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        startingMessage\n                        \n                    \n                \n            \n            \n                \nstartingMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  startingMessage(): IMessage {\n    this.logger.info('Calling welcomeMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { ITokenReturnBody } from '@starter/api-types';\n\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { Public } from './public.decorator';\n\n/**\n * Authentication Controller\n */\n@ApiTags('authentication')\n@Controller('v1/auth')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} usersService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginDto): Promise {\n    const user = await this.authService.validateUser(payload);\n    return await this.authService.createToken(user);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterDto) {\n    const user = await this.usersService.create(payload);\n    return await this.authService.createToken(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([User, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, JwtStrategy, UsersService],\n  exports: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                users service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as moment from 'moment';\n\nimport { ITokenReturnBody } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { LoginDto } from './dto/login.dto';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {User} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    roles,\n    email,\n  }: User): Promise {\n    return {\n      expiresIn: this.expiration,\n      expiresInFormatted: moment()\n        .add(this.expiration, 'seconds')\n        .format('LLL'),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        roles,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ username, password }: LoginDto): Promise {\n    const user = await this.usersService.getByUsernameAndPass(\n      username,\n      password,\n    );\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl-ability.factory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    can(UserActionsEnum.Update, User, { username: user.username }); // update own user\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl-ability.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl-ability.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate({ iat, exp, id }: Record): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:26\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:16\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class LoginDto {\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:38\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:46\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, caslAbilityFactory: CaslAbilityFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        caslAbilityFactory\n                                                  \n                                                        \n                                                                        CaslAbilityFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslAbilityFactory } from './casl-ability.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.caslAbilityFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:22\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:42\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:52\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:32\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class RegisterDto {\n  /**\n   * Email field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                gravatar\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:36\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gravatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:42\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:18\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:30\n                        \n                    \n\n            \n                \n                    Name column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:60\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:24\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class User {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  gravatar: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { User } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => User, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:85\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:53\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    patchUser(payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiResponse({status: 200, description: 'Patch User Request Received'})@ApiResponse({status: 400, description: 'Patch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:71\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('v1/users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves current authenticated user\n   * @returns {Promise} queried user data\n   */\n  @Get('user')\n  getUser(@Request() req) {\n    return req.user;\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Patch()\n  @ApiResponse({ status: 200, description: 'Patch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Patch User Request Failed' })\n  async patchUser(@Body() payload: PatchUserDto): Promise {\n    return await this.usersService.edit(payload);\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return await this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslAbilityFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslAbilityFactory } from '../casl/casl-ability.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, UserRoles])],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslAbilityFactory,\n  ],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:131\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchUserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:108\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:49\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsernameAndPass\n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.username = :username and users.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {RegisterDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: RegisterDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        gravatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {PatchUserDto} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(payload: PatchUserDto): Promise {\n    const { username } = payload;\n    const user = await this.getByUsername(username);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (8/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\nDescription |\nPrerequisites |\nDeployment |\nTesting |\nTypeDocs |\nProgress\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the app in development mode by using npm run start (the app will be exposed on the port 4200; not to conflict with React, Angular, or Vue ports).\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:4200.\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: dev or prod.\nAPP_URL - the base URL for the application. Made mainly to showcase the power of ConfigService and can be removed as it doesn't serve any other purpose\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds indicating when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not recommended).\nDB_HOST - the endpoint where this database sits (usually localhost but can be a static address).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But this boilerplate is modular enough to use the Express framework instead of Fastify.\nReplace the following lines of code in the main.ts file with the ones detailed below:\nFastify:\n// to fastify:\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport * as headers from 'fastify-helmet';\nimport * as fastifyRateLimiter from 'fastify-rate-limit';\n\nconst app = await NestFactory.create(\n  AppModule,\n  new FastifyAdapter({ logger: console }),\n);\napp.register(headers);\napp.register(fastifyRateLimiter, {\n  max: 100,\n  timeWindow: '1 minute',\n});Express:\n// to express:\nimport * as rateLimiter from 'express-rate-limit';\nimport * as headers from 'helmet';\n\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\napp.use(headers());\napp.use(\n  rateLimiter({\n    windowMs: 60, // 1 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }),\n);\nRemark: The boilerplate comes with production dependencies for both Express and Fastify to enable migrating between the two. But this leaves it in a bloated state when only one web framework is deployed. Thus, it is highly encouraged that when deploying to production, unused dependencies are purged.\n\nIf you choose to use Fastify, this command will purge all of the Express dependencies:\n# removing Express dependencies\n$ npm rm @nestjs/platform-express express-rate-limit helmet swagger-ui-express @types/express --saveIf you choose to use Express, this command will purge all of the Fastify dependencies:\n# removing Fastify dependencies\n$ npm rm @nestjs/platform-fastify fastify-helmet fastify-rate-limit fastify-swagger --save\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3 if necessary.\nNote: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n✅ Testing\nDocker 🐳\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, simply, by typing npm run typedocs. This will produce a docs folder with the required front-end files and start hosting on localhost.\n# generate docs for code\n$ npm run typedocs\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\nUsersModule -->\n\nCaslAbilityFactory->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl-ability.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects<> | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            moduleMocker   (apps/.../auth.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(User, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
