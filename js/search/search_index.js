var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.505,1,2.035]],["body/controllers/AppController.html",[0,2.571,1,2.91,2,1.624,3,0.394,4,0.394,5,0.254,6,2.853,7,1.221,8,3.683,9,0.394,10,1.28,11,5.423,12,1.483,13,0.034,14,3.425,15,3.283,16,5.423,17,3.922,18,2.853,19,3.283,20,3.283,21,0.613,22,3.425,23,1.529,24,4.518,25,3.922,26,4.243,27,0.649,28,0.811,29,3.782,30,3.683,31,1.624,32,1.247,33,1.145,34,2.939,35,2.853,36,2.91,37,3.425,38,0.394,39,0.091,40,1.359,41,1.483,42,1.784,43,2.476,44,1.624,45,1.052,46,2.91,47,2.476,48,0.886,49,3.425,50,0.023,51,0.023]],["title/modules/AppModule.html",[52,1.26,53,2.035]],["body/modules/AppModule.html",[1,2.736,2,1.71,3,0.491,4,0.284,5,0.268,13,0.034,27,0.677,28,0.584,34,2.721,35,2.052,38,0.284,39,0.065,42,2.447,45,0.757,48,0.933,50,0.019,51,0.019,52,1.431,53,3.771,54,1.168,55,1.563,56,2.052,57,2.052,58,2.052,59,3.006,60,3.006,61,3.006,62,2.076,63,1.418,64,1.283,65,2.464,66,2.312,67,3.397,68,3.555,69,3.105,70,1.418,71,1.781,72,3.607,73,1.418,74,3.555,75,2.464,76,1.579,77,3.011,78,3.607,79,2.052,80,2.052,81,2.464,82,2.464,83,2.464,84,2.464,85,2.464,86,2.464,87,2.464,88,2.052,89,2.464,90,1.781,91,2.464,92,2.052,93,2.464,94,2.052,95,2.464,96,2.052,97,2.464,98,2.052,99,2.464,100,2.052,101,2.464,102,2.052,103,2.464,104,2.052,105,2.464,106,2.052,107,2.464,108,2.464,109,2.608,110,3.005,111,0.284,112,2.464,113,2.464,114,2.464,115,2.464,116,2.464,117,0.897,118,2.464,119,0.978,120,2.464,121,1.283,122,2.464,123,1.579,124,2.464,125,2.464,126,2.464,127,3.607,128,3.005,129,2.464,130,2.227,131,1.781,132,2.464,133,2.464,134,4.268,135,4.698,136,3.607,137,3.607,138,0.646,139,3.607,140,2.035,141,3.607,142,3.607,143,2.464,144,3.607,145,2.464,146,2.464,147,2.464,148,2.464,149,2.464,150,2.464,151,2.464,152,2.464,153,2.464,154,2.464,155,2.464,156,2.464,157,2.464]],["title/injectables/AppService.html",[34,1.654,158,0.821]],["body/injectables/AppService.html",[3,0.398,4,0.398,5,0.257,7,0.989,9,0.398,10,1.289,13,0.034,21,0.818,23,1.536,24,4.717,25,4.094,26,4.264,27,0.627,28,0.82,32,1.26,33,1.157,34,2.381,38,0.398,39,0.092,40,2.161,41,1.499,42,2.836,44,1.64,45,1.063,48,0.895,50,0.024,51,0.024,76,2.218,77,2.93,109,2.502,111,0.398,131,3.305,158,1.182,159,1.64,160,2.883,161,3.808,162,5.445,163,3.46,164,6.021,165,3.46,166,1.063,167,0.682,168,1.063,169,3.46,170,3.46,171,3.46,172,1.802,173,3.46,174,3.46,175,3.46,176,2.502,177,3.46,178,2.883,179,2.502]],["title/controllers/AuthController.html",[0,1.505,180,2.035]],["body/controllers/AuthController.html",[0,2.028,2,1.172,3,0.285,4,0.285,5,0.183,7,1.307,9,0.285,10,1.02,12,1.567,13,0.034,17,2.616,18,3.013,19,3.403,21,0.648,23,1.02,27,0.638,28,0.586,30,3.907,31,1.172,32,0.9,33,0.827,36,2.741,38,0.285,39,0.066,40,1.435,41,2.039,42,1.884,44,1.715,46,3.353,47,2.616,48,0.936,50,0.019,51,0.019,111,0.416,138,0.648,166,1.111,167,0.713,168,1.111,172,1.884,180,2.319,181,2.06,182,2.06,183,2.473,184,3.621,185,2.48,186,4.006,187,3.92,188,2.473,189,2.881,190,2.473,191,4.706,192,4.706,193,3.617,194,4.706,195,4.706,196,2.473,197,4.706,198,3.013,199,2.616,200,3.013,201,2.081,202,3.01,203,3.016,204,1.884,205,2.473,206,2.881,207,2.473,208,4.706,209,2.473,210,2.473,211,1.788,212,2.473,213,2.06,214,2.06,215,1.714,216,1.585,217,2.608,218,2.06,219,2.06,220,2.473,221,2.06,222,2.473,223,2.473,224,2.06,225,2.06,226,2.473,227,2.473,228,1.567,229,3.016,230,2.473,231,3.617,232,2.473,233,2.473,234,2.473]],["title/modules/AuthModule.html",[52,1.26,59,1.827]],["body/modules/AuthModule.html",[2,2.006,3,0.355,4,0.355,5,0.229,13,0.034,27,0.7,28,0.731,38,0.355,39,0.082,48,0.798,50,0.022,51,0.022,52,1.679,54,1.462,55,1.833,59,3.527,62,2.434,63,1.775,64,1.606,66,2.712,67,3.059,68,4.023,69,2.99,70,1.775,71,2.23,73,1.775,109,2.23,110,2.569,138,0.552,180,3.095,185,1.462,215,2.048,216,1.977,217,3.192,218,2.569,235,2.569,236,2.569,237,2.569,238,3.527,239,3.084,240,3.524,241,3.084,242,2.23,243,3.084,244,1.977,245,1.833,246,3.084,247,1.977,248,1.606,249,3.084,250,3.084,251,2.569,252,3.084,253,3.084,254,1.775,255,3.084,256,3.084,257,2.569,258,3.084,259,4.23,260,2.569,261,1.775]],["title/injectables/AuthService.html",[158,0.821,217,1.654]],["body/injectables/AuthService.html",[3,0.269,4,0.269,5,0.173,7,0.75,9,0.269,10,0.978,13,0.034,21,0.819,23,1.291,27,0.627,28,0.553,32,0.85,33,0.781,38,0.269,39,0.062,40,1.816,41,2.219,42,2.669,44,2.429,48,0.897,50,0.018,51,0.018,69,3.053,70,1.343,111,0.563,117,1.667,119,1.376,121,1.806,138,1.063,140,1.011,158,0.897,159,1.107,166,1.27,167,0.964,168,1.27,172,2.669,184,2.507,185,2.429,186,1.688,189,2.814,201,1.995,202,2.38,203,1.496,204,2.669,211,2.507,214,1.945,215,2.027,216,1.496,217,1.806,219,1.945,228,1.011,229,1.496,242,1.688,248,1.216,254,2.634,260,1.945,261,2.38,262,1.945,263,1.502,264,4.135,265,4.135,266,4.135,267,2.334,268,5.449,269,3.467,270,2.334,271,2.334,272,2.888,273,2.888,274,3.94,275,2.888,276,2.334,277,2.334,278,3.467,279,2.507,280,2.888,281,3.467,282,2.888,283,3.445,284,2.888,285,2.888,286,3.445,287,3.467,288,2.334,289,1.945,290,1.806,291,1.995,292,1.995,293,2.334,294,2.334,295,2.334,296,2.334,297,3.467,298,2.334,299,1.688,300,1.688,301,1.945,302,2.334]],["title/injectables/CaslAbilityFactory.html",[158,0.821,303,1.505]],["body/injectables/CaslAbilityFactory.html",[3,0.376,4,0.376,5,0.242,9,0.376,10,1.24,13,0.034,21,0.585,23,0.921,27,0.612,28,0.773,32,1.189,33,1.471,38,0.506,39,0.087,48,0.845,50,0.023,51,0.023,111,0.612,117,1.189,138,1.064,140,1.415,158,1.138,159,1.548,166,1.003,167,0.644,168,1.003,228,1.415,248,1.701,303,2.085,304,3.18,305,2.361,306,4.398,307,4.398,308,3.265,309,2.861,310,4.398,311,4.398,312,4.398,313,3.664,314,2.72,315,2.361,316,2.72,317,3.265,318,2.531,319,3.664,320,3.265,321,3.18,322,3.265,323,3.265,324,3.265,325,4.398,326,1.879,327,3.265,328,2.72,329,4.398,330,3.265,331,2.531,332,2.361,333,3.265,334,4.143,335,3.265,336,3.664,337,4.398,338,3.265,339,3.265,340,3.265,341,3.265,342,3.265,343,3.265,344,1.548,345,2.72,346,3.265,347,3.265,348,3.265]],["title/modules/CaslModule.html",[52,1.26,60,1.827]],["body/modules/CaslModule.html",[3,0.483,4,0.483,5,0.312,13,0.033,27,0.595,28,0.995,38,0.483,39,0.112,50,0.027,51,0.027,52,2.053,54,1.992,55,2.241,60,3.567,62,2.977,63,2.417,64,2.188,66,3.316,240,4.31,303,3.039,318,2.417,349,3.5,350,3.5,351,3.5,352,4.201,353,2.417]],["title/classes/DeleteUserPolicyHandler.html",[39,0.084,354,1.827]],["body/classes/DeleteUserPolicyHandler.html",[3,0.443,4,0.443,5,0.286,9,0.443,10,1.381,13,0.033,21,0.689,23,1.086,27,0.62,32,1.402,33,1.287,38,0.564,39,0.102,48,0.996,50,0.025,51,0.025,111,0.62,138,0.877,166,1.182,167,0.759,168,1.182,248,2.005,309,2.819,315,2.784,318,2.215,326,3.444,344,1.825,353,2.215,354,2.819,355,3.14,356,2.467,357,3.14,358,3.263,359,4.081,360,4.488,361,3.849,362,2.215,363,4.081,364,3.542,365,2.215,366,2.784,367,2.215,368,3.207]],["title/interfaces/IPolicyHandler.html",[358,1.827,362,1.827]],["body/interfaces/IPolicyHandler.html",[3,0.444,4,0.444,5,0.286,9,0.444,10,1.384,13,0.033,21,0.691,23,1.089,27,0.621,32,1.406,33,1.291,38,0.565,39,0.103,48,0.999,50,0.025,51,0.025,111,0.621,138,0.879,166,1.186,167,0.761,168,1.186,248,2.011,309,2.824,315,2.792,318,2.221,326,3.447,353,2.221,354,2.221,355,3.146,356,2.475,357,2.475,358,3.267,359,4.088,360,4.494,362,2.221,363,4.494,364,3.549,365,2.221,366,2.792,367,2.221,368,3.216,369,3.86,370,3.86]],["title/injectables/JwtAuthGuard.html",[158,0.821,371,2.035]],["body/injectables/JwtAuthGuard.html",[3,0.419,4,0.419,5,0.27,7,0.788,9,0.419,10,1.332,13,0.034,21,0.846,23,1.026,27,0.639,28,0.862,38,0.419,39,0.097,40,1.444,43,2.632,48,1.222,50,0.024,51,0.024,111,0.544,130,1.725,158,1.222,159,1.725,166,1.451,167,0.932,168,1.451,184,3.417,221,3.032,228,1.577,244,2.333,254,2.719,371,3.029,372,4.371,373,3.032,374,3.029,375,3.936,376,3.032,377,4.913,378,3.639,379,3.936,380,4.626,381,3.639,382,3.032,383,2.333,384,3.639,385,2.632,386,3.032,387,3.639,388,3.032,389,3.936,390,3.639,391,3.032,392,3.639,393,3.639]],["title/injectables/JwtStrategy.html",[158,0.821,238,1.827]],["body/injectables/JwtStrategy.html",[3,0.356,4,0.356,5,0.229,7,0.669,9,0.356,10,1.195,13,0.034,21,0.759,23,1.195,27,0.648,28,0.732,38,0.356,39,0.129,40,2.064,41,2.094,44,2.009,50,0.022,51,0.022,69,3.377,70,1.779,111,0.488,138,0.554,158,1.096,159,1.466,166,1.302,167,0.836,168,1.302,172,2.207,185,2.292,198,4.027,204,2.518,215,2.137,216,1.982,224,2.575,228,1.339,238,2.438,244,1.982,248,1.61,254,2.993,257,2.575,273,3.53,274,3.94,285,2.575,290,1.61,386,2.575,388,2.575,394,2.575,395,4.834,396,3.091,397,3.091,398,3.091,399,5.201,400,3.091,401,4.237,402,4.237,403,3.53,404,3.064,405,3.091,406,3.091,407,2.575,408,3.091,409,3.091,410,3.091,411,3.091,412,2.235,413,3.091,414,3.091,415,3.091,416,3.091,417,4.237,418,4.237,419,4.237]],["title/classes/LoginDto.html",[39,0.084,189,1.827]],["body/classes/LoginDto.html",[3,0.436,4,0.436,5,0.281,7,0.819,9,0.436,12,2.099,13,0.034,21,0.868,27,0.558,31,1.794,38,0.436,39,0.15,45,1.731,50,0.025,51,0.025,111,0.558,117,2.121,119,2.312,130,2.297,186,3.503,189,2.788,203,3.106,263,2.099,344,1.794,420,3.152,421,3.503,422,3.152,423,3.784,424,4.075,425,2.736,426,3.784,427,3.865,428,3.503,429,3.865,430,2.736,431,2.425,432,3.106,433,2.736]],["title/classes/PasswordTransformer.html",[39,0.084,434,2.035]],["body/classes/PasswordTransformer.html",[3,0.412,4,0.412,5,0.266,7,1.127,9,0.412,10,1.318,13,0.034,21,0.837,23,1.318,27,0.538,38,0.412,39,0.138,41,2.025,45,1.953,48,1.209,50,0.024,51,0.024,111,0.538,119,1.855,166,1.436,167,0.922,168,1.436,344,1.698,357,2.997,434,2.997,435,2.983,436,3.381,437,5.205,438,4.675,439,3.581,440,4.675,441,4.597,442,4.982,443,4.675,444,3.581,445,4.675,446,3.895,447,1.865,448,2.983,449,3.581]],["title/classes/PatchUserDto.html",[39,0.084,450,1.827]],["body/classes/PatchUserDto.html",[3,0.377,4,0.377,5,0.243,7,0.708,9,0.377,12,2.307,13,0.034,21,0.954,27,0.507,31,1.552,38,0.377,39,0.142,45,1.827,50,0.023,51,0.023,111,0.613,117,2.024,119,2.206,130,1.552,138,0.789,167,1.096,202,2.535,263,1.908,292,3.198,344,1.552,421,2.367,424,4.3,425,2.367,427,4.019,428,3.185,429,4.139,430,2.367,431,2.098,432,2.098,433,2.367,450,2.535,451,4.63,452,2.727,453,3.67,454,3.273,455,3.273,456,3.273,457,3.67,458,3.67,459,3.273,460,3.273,461,3.273,462,3.273,463,3.67,464,2.727,465,2.727]],["title/guards/PoliciesGuard.html",[374,2.035,466,1.827]],["body/guards/PoliciesGuard.html",[3,0.363,4,0.363,5,0.234,9,0.363,10,1.21,13,0.034,21,0.874,23,1.21,27,0.631,28,0.746,38,0.363,39,0.084,40,1.703,48,1.263,50,0.022,51,0.022,111,0.562,138,0.564,158,1.11,166,1.499,167,0.963,168,1.499,172,2.857,185,2.314,204,2.235,228,2.115,303,2.746,309,3.156,318,1.812,326,3.016,353,1.812,357,2.019,365,3.016,366,2.278,367,1.812,375,4.367,376,2.624,377,4.715,379,3.575,380,4.367,382,2.624,383,2.019,391,2.624,466,2.47,467,3.15,468,2.624,469,4.292,470,3.15,471,3.15,472,4.292,473,3.15,474,4.292,475,3.103,476,2.624,477,2.624,478,3.15,479,3.15,480,3.15,481,3.15,482,3.15,483,3.15,484,3.15,485,2.278,486,3.15,487,3.15]],["title/classes/RegisterDto.html",[39,0.084,206,1.827]],["body/classes/RegisterDto.html",[3,0.372,4,0.372,5,0.24,7,0.7,9,0.372,12,2.296,13,0.034,21,0.949,27,0.503,31,1.533,38,0.372,39,0.141,45,1.822,50,0.022,51,0.022,111,0.61,117,2.015,119,2.196,130,2.512,167,1.092,187,3.64,203,2.801,206,2.514,263,1.893,292,3.185,344,1.533,421,3.832,422,2.694,424,4.289,425,2.338,427,4.002,428,3.159,429,4.125,430,2.338,431,2.073,432,3.397,433,2.338,457,3.64,458,3.64,463,3.64,464,2.694,465,2.694,488,2.694,489,3.234,490,3.234,491,3.234,492,3.234,493,3.234,494,3.234]],["title/entities/User.html",[138,0.568,495,1.827]],["body/entities/User.html",[3,0.3,4,0.3,5,0.193,7,0.563,9,0.3,12,2.378,13,0.034,21,0.983,27,0.555,38,0.3,39,0.128,45,1.785,50,0.019,51,0.019,111,0.632,117,1.861,119,2.028,121,1.955,123,1.669,130,1.78,138,0.915,140,1.128,167,1.082,201,1.498,245,2.088,247,1.669,261,2.16,263,1.626,290,2.294,291,2.941,292,2.941,331,2.16,412,1.882,434,3.09,436,3.184,441,3.128,447,1.356,495,3.064,496,2.168,497,3.969,498,5.247,499,2.603,500,2.603,501,2.715,502,3.669,503,2.603,504,2.715,505,2.603,506,2.603,507,3.754,508,3.754,509,2.168,510,3.754,511,2.603,512,2.603,513,3.754,514,3.754,515,3.754,516,3.754,517,2.603,518,3.754,519,2.603,520,3.128,521,2.715,522,3.128,523,3.128,524,2.603,525,2.603,526,3.754,527,3.754,528,2.603,529,2.603]],["title/entities/UserRoles.html",[245,1.375,495,1.827]],["body/entities/UserRoles.html",[3,0.355,4,0.355,5,0.229,7,0.668,8,3.059,9,0.355,12,2.092,13,0.034,21,0.865,27,0.556,32,1.123,33,1.031,38,0.355,39,0.128,50,0.022,51,0.022,111,0.598,123,1.977,138,1.088,225,4.329,245,1.833,261,2.434,263,1.833,275,3.524,290,2.515,291,2.434,316,4.536,331,3.314,332,2.23,336,3.524,447,1.606,495,3.236,498,4.886,502,4.023,504,3.059,509,2.569,520,3.524,521,3.059,522,3.524,523,3.524,530,4.329,531,2.569,532,3.084,533,3.084,534,5.196,535,3.331,536,3.084,537,4.23,538,4.23,539,3.059,540,3.059,541,4.23,542,3.084,543,4.23,544,4.23,545,4.23,546,3.084,547,4.23,548,1.977]],["title/controllers/UsersController.html",[0,1.505,549,2.035]],["body/controllers/UsersController.html",[0,1.754,2,0.923,3,0.224,4,0.224,5,0.144,7,1.252,9,0.224,10,0.852,12,1.806,13,0.034,15,3.453,17,4.094,19,3.453,20,3.453,21,0.747,23,1.452,27,0.609,28,0.461,29,2.516,30,3.603,31,0.923,32,0.709,33,0.651,38,0.224,39,0.052,40,0.772,41,1.955,43,1.407,44,0.923,45,1.53,46,3.061,48,1.078,50,0.016,51,0.016,111,0.426,117,2.004,121,1.573,138,1.126,140,0.843,166,1.281,167,0.822,168,1.281,182,1.621,185,2.507,201,1.738,202,2.129,204,2.814,211,1.407,213,1.621,215,1.518,228,0.843,229,2.372,279,2.184,299,1.407,328,1.621,354,1.738,367,1.12,450,2.399,453,3.978,466,1.12,477,1.621,540,3.263,548,1.248,549,1.936,550,1.621,551,1.946,552,3.7,553,3.02,554,3.02,555,3.02,556,1.946,557,1.946,558,1.946,559,3.7,560,1.946,561,3.02,562,3.02,563,2.516,564,1.946,565,3.02,566,1.946,567,4.169,568,2.516,569,3.02,570,3.02,571,3.473,572,3.978,573,1.946,574,1.946,575,4.775,576,1.946,577,3.02,578,2.184,579,1.946,580,1.946,581,1.946,582,2.516,583,2.516,584,2.516,585,1.946,586,1.621,587,1.407,588,1.946,589,1.621,590,1.946,591,1.621,592,1.621,593,1.621,594,1.946,595,1.946,596,1.946,597,1.946,598,3.7,599,1.946,600,1.946,601,1.621,602,1.621,603,1.946,604,1.946,605,1.946,606,1.946,607,1.946,608,1.946,609,1.946]],["title/modules/UsersModule.html",[52,1.26,61,1.827]],["body/modules/UsersModule.html",[2,2.216,3,0.412,4,0.412,5,0.266,13,0.034,27,0.712,28,0.848,38,0.412,39,0.095,50,0.024,51,0.024,52,1.855,54,1.698,55,2.025,61,3.49,62,2.69,63,2.061,64,1.865,66,2.997,67,2.589,71,2.589,73,2.061,138,0.837,215,2.138,245,2.025,247,2.295,251,2.983,303,2.783,353,2.061,371,2.997,383,2.295,466,2.69,548,2.295,549,3.337,589,2.983,593,2.983,610,3.581,611,3.581,612,3.581,613,4.675,614,3.581,615,3.581,616,3.581,617,3.581,618,3.581,619,3.581]],["title/injectables/UsersService.html",[158,0.821,215,1.156]],["body/injectables/UsersService.html",[3,0.184,4,0.184,5,0.118,7,0.559,9,0.184,10,0.728,13,0.034,15,1.155,20,1.155,21,0.826,23,1.497,25,1.155,27,0.586,28,0.378,32,0.581,33,0.534,38,0.184,39,0.042,40,1.481,41,2.149,42,1.345,44,1.224,45,1.722,47,1.867,48,1.134,50,0.013,51,0.013,73,0.919,111,0.531,117,2.139,119,1.968,121,1.944,138,1.095,140,1.617,158,0.668,159,0.757,166,1.417,167,0.947,168,1.417,172,1.345,185,2.352,199,2.699,201,1.485,202,2.763,204,2.975,206,2.358,215,0.94,228,1.775,229,2.392,245,1.408,247,1.024,261,2.148,279,1.867,280,1.33,290,1.692,291,1.87,299,2.35,300,1.867,301,1.33,321,1.155,331,0.919,446,2.151,447,0.832,448,2.151,450,2.358,497,1.867,501,1.155,504,1.867,521,1.155,535,1.024,539,1.867,540,3.336,548,1.024,563,2.151,571,3.651,572,4.423,578,1.867,582,3.109,583,2.151,584,2.707,586,1.33,591,1.33,592,1.33,602,2.151,620,1.33,621,2.581,622,2.581,623,1.597,624,4.96,625,3.249,626,1.597,627,3.249,628,2.581,629,1.597,630,2.581,631,2.581,632,1.597,633,2.581,634,2.581,635,1.597,636,2.581,637,1.597,638,4.383,639,2.581,640,1.597,641,2.581,642,1.597,643,2.581,644,2.581,645,1.597,646,1.597,647,1.597,648,1.597,649,1.597,650,1.597,651,1.597,652,1.597,653,1.597,654,1.597,655,1.597,656,1.597,657,1.597,658,1.597,659,1.597,660,1.597,661,1.597,662,1.597,663,1.597,664,1.597,665,1.597,666,2.151,667,1.597,668,1.597,669,1.597,670,1.597,671,1.597,672,1.597,673,1.597,674,1.597,675,1.597,676,1.597,677,1.597,678,1.33,679,1.597,680,1.597,681,1.597,682,2.151,683,1.597,684,1.597,685,1.597,686,1.597,687,1.597,688,1.597,689,1.597,690,1.597,691,1.155,692,1.597]],["title/coverage.html",[693,3.12]],["body/coverage.html",[0,2.169,1,1.787,5,0.207,6,2.322,13,0.033,34,1.452,36,1.787,39,0.139,50,0.02,51,0.02,111,0.321,138,0.706,140,1.208,158,1.409,160,2.322,179,2.016,180,1.787,181,2.322,189,1.604,206,1.604,215,1.015,217,1.452,238,1.604,245,1.208,262,2.322,303,1.322,304,2.016,305,2.016,354,1.604,355,2.527,356,2.527,358,1.604,362,1.604,371,1.787,372,2.322,373,2.322,374,1.787,385,2.016,394,2.322,420,2.322,434,1.787,435,2.322,450,1.604,451,2.322,452,2.322,466,1.604,468,2.322,475,2.016,485,2.016,488,2.322,495,2.269,496,2.322,530,2.322,531,2.322,549,1.787,550,2.322,587,2.016,620,2.322,693,2.016,694,2.788,695,2.788,696,2.322,697,5.094,698,3.285,699,6.152,700,5.965,701,6.215,702,2.788,703,5.248,704,2.322,705,3.285,706,2.322,707,4.973,708,2.788,709,2.788,710,3.285,711,4.575,712,3.285,713,3.285,714,2.788,715,2.322,716,2.851,717,2.322,718,3.795,719,2.322,720,2.322,721,5.448,722,2.322,723,2.322,724,2.322,725,2.788,726,2.788,727,2.322]],["title/dependencies.html",[55,1.652,728,2.216]],["body/dependencies.html",[5,0.254,13,0.034,28,0.811,31,1.624,39,0.121,50,0.023,51,0.023,55,1.483,70,1.971,73,1.971,74,2.853,76,2.195,77,3.265,79,2.853,80,2.853,242,2.476,244,2.195,254,1.971,286,2.853,314,2.853,383,2.195,407,2.853,431,2.195,436,2.476,447,1.784,497,2.476,729,3.425,730,6.007,731,3.425,732,3.425,733,3.425,734,3.425,735,4.54,736,3.782,737,3.425,738,3.425,739,3.425,740,3.425,741,3.425,742,3.425,743,3.425,744,3.425,745,3.425,746,3.425,747,5.643,748,3.425,749,4.54,750,2.853,751,2.853,752,3.425,753,3.425,754,3.425,755,3.425,756,3.425,757,3.425,758,3.425,759,3.425,760,3.425,761,3.425,762,3.425,763,3.425,764,3.425,765,3.425,766,3.425,767,3.425,768,3.425,769,3.425,770,3.425,771,3.425,772,3.425,773,3.425,774,3.425,775,3.425,776,3.425,777,3.425]],["title/miscellaneous/functions.html",[778,1.386,779,3.177]],["body/miscellaneous/functions.html",[9,0.565,13,0.029,50,0.029,51,0.029,718,3.552,719,4.992,778,2.558,779,4.092,780,4.092]],["title/index.html",[9,0.306,781,2.66,782,2.66]],["body/index.html",[5,0.247,7,0.574,8,3.219,13,0.032,33,1.112,45,0.508,46,1.059,50,0.014,51,0.014,52,1.654,55,1.44,64,1.732,69,0.951,76,2.672,77,1.701,88,1.376,90,1.195,92,1.376,94,1.376,96,1.376,98,1.376,100,1.376,102,1.376,104,1.376,106,1.376,111,0.305,117,0.602,119,1.053,121,2.791,128,2.21,131,2.404,161,3.171,167,0.326,176,2.753,179,1.919,199,1.919,200,1.376,272,1.376,274,1.195,282,1.376,283,2.21,284,1.376,289,2.21,300,2.753,321,1.919,334,1.376,345,1.376,403,1.376,404,1.195,432,2.131,447,2.318,476,1.376,501,1.195,535,2.44,539,1.919,601,3.171,666,1.376,678,1.376,682,1.376,693,1.919,697,2.21,716,3.015,727,1.376,750,2.21,751,1.376,783,2.653,784,1.652,785,2.653,786,3.325,787,1.652,788,1.652,789,1.652,790,2.653,791,1.652,792,2.653,793,1.652,794,1.652,795,2.653,796,1.652,797,2.653,798,3.325,799,4.451,800,3.806,801,4.678,802,2.653,803,3.806,804,2.653,805,2.653,806,1.652,807,4.451,808,2.653,809,2.653,810,1.652,811,1.652,812,4.169,813,1.652,814,1.652,815,1.652,816,1.652,817,3.325,818,1.652,819,5.445,820,3.806,821,3.806,822,1.652,823,2.653,824,1.652,825,1.652,826,1.652,827,4.169,828,2.653,829,2.653,830,2.653,831,3.325,832,2.653,833,1.652,834,1.652,835,1.652,836,1.652,837,1.652,838,3.806,839,3.325,840,1.652,841,1.652,842,1.652,843,1.652,844,2.653,845,1.652,846,1.652,847,1.652,848,1.652,849,1.652,850,1.652,851,2.653,852,1.652,853,1.652,854,1.652,855,3.325,856,4.678,857,3.806,858,3.806,859,1.652,860,1.652,861,3.325,862,1.652,863,1.652,864,1.652,865,1.652,866,2.653,867,1.652,868,4.451,869,1.652,870,2.653,871,1.652,872,1.652,873,1.652,874,2.653,875,3.325,876,2.653,877,1.652,878,1.652,879,1.652,880,1.652,881,1.652,882,1.652,883,1.652,884,2.653,885,1.652,886,1.652,887,1.652,888,1.652,889,1.652,890,1.652,891,1.652,892,1.652,893,1.652,894,1.652,895,1.652,896,1.652,897,1.652,898,1.652,899,1.652,900,1.652,901,1.652,902,1.652,903,1.652,904,1.652,905,1.652,906,2.653,907,2.653,908,2.653,909,1.652,910,1.652,911,1.652,912,1.652,913,1.376,914,1.652,915,1.652,916,1.652,917,1.652,918,2.653,919,1.652,920,1.652,921,1.652,922,2.653,923,1.652,924,1.652,925,1.652,926,2.653,927,1.195,928,1.652,929,1.652,930,1.652,931,2.653,932,1.652,933,1.652,934,1.652,935,1.652,936,2.653,937,1.652,938,1.652,939,1.652,940,1.652,941,1.652,942,1.652,943,1.652,944,1.652,945,1.652,946,1.652,947,1.652,948,2.653,949,1.652,950,2.653,951,3.806,952,3.325,953,3.806,954,2.653,955,2.653,956,1.652,957,1.652,958,2.653,959,1.652,960,3.325,961,1.652,962,1.652,963,1.652,964,1.652,965,1.652,966,1.652,967,1.652,968,1.652,969,1.652,970,1.652,971,1.652,972,2.21,973,2.653,974,1.652,975,1.652,976,1.652,977,1.652,978,1.652,979,1.652,980,1.652,981,1.652,982,1.652,983,1.652,984,1.652,985,1.652,986,1.652,987,1.652,988,1.652,989,1.652,990,1.652,991,1.652,992,1.652,993,1.652,994,1.652,995,1.652,996,1.652,997,1.652,998,1.652,999,1.652,1000,1.652,1001,1.652,1002,1.652,1003,1.376,1004,1.652,1005,1.652,1006,1.652,1007,1.652,1008,1.652,1009,1.652,1010,1.652,1011,1.376,1012,1.376,1013,1.652,1014,1.376]],["title/modules.html",[54,2.046]],["body/modules.html",[13,0.028,50,0.028,51,0.028,53,3.005,54,2.222,59,2.697,60,2.697,61,2.697,736,5.057,1003,5.057,1015,6.071,1016,6.071]],["title/overview.html",[1017,3.595]],["body/overview.html",[2,1.711,13,0.033,34,2.722,50,0.024,51,0.024,53,3.972,54,1.711,55,2.036,56,3.007,57,3.007,58,3.007,59,3.592,60,3.386,61,3.448,62,2.704,63,2.077,64,1.88,123,2.314,159,1.711,215,2.016,217,3.121,235,3.007,236,3.007,237,3.007,238,3.448,303,2.88,344,1.711,349,3.007,350,3.007,351,3.007,362,2.077,374,2.314,691,3.399,1017,3.007,1018,3.61,1019,3.61,1020,3.61,1021,3.61,1022,3.61]],["title/properties.html",[263,1.652,728,2.216]],["body/properties.html",[13,0.032,50,0.029,51,0.029,263,2.105,927,3.513,1011,4.047,1012,4.047,1014,4.047,1023,4.858,1024,4.858,1025,4.858]],["title/miscellaneous/typealiases.html",[778,1.386,1026,3.814]],["body/miscellaneous/typealiases.html",[9,0.521,13,0.031,50,0.028,51,0.028,111,0.521,304,3.275,305,4.189,309,2.606,313,3.773,319,4.511,326,3.116,355,2.903,356,3.713,358,2.606,364,4.189,365,3.116,485,3.275,778,2.359,1027,4.529,1028,5.415,1029,5.415]],["title/miscellaneous/variables.html",[778,1.386,1030,3.177]],["body/miscellaneous/variables.html",[7,0.878,9,0.334,13,0.034,36,2.6,45,1.695,50,0.021,51,0.021,90,2.934,111,0.685,130,1.923,138,0.954,140,1.757,167,0.573,176,3.991,178,2.418,245,1.757,290,2.436,291,1.671,292,1.671,331,2.334,332,2.934,365,1.671,367,2.334,385,2.934,389,2.418,404,2.934,412,2.099,442,5.126,475,2.934,535,3.944,568,2.418,578,2.099,587,2.934,691,3.661,696,2.418,698,4.218,704,2.418,705,2.418,706,3.38,710,2.418,712,2.418,713,3.896,715,2.418,716,3.661,717,2.418,718,2.099,720,3.38,722,3.38,723,3.38,724,3.38,778,1.512,780,4.218,913,2.418,927,2.099,972,2.418,1030,2.418,1031,4.057,1032,2.903,1033,2.903,1034,4.057,1035,2.903,1036,2.903,1037,4.057,1038,2.903,1039,2.903,1040,2.903,1041,4.057,1042,2.903,1043,2.903,1044,2.903,1045,2.903,1046,2.903,1047,2.903]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1023,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.7.0",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["14.1.1",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":822,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1020,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":902,"title":{},"body":{"index.html":{}}}],["255",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1019,"title":{},"body":{"overview.html":{}}}],["3.8.1",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1018,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":903,"title":{},"body":{"index.html":{}}}],["400",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["5",{"_index":1022,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1021,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":309,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":368,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["ability.factory",{"_index":353,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{}}}],["ability.factory.ts",{"_index":305,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:21",{"_index":308,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":310,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":311,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstraction",{"_index":986,"title":{},"body":{"index.html":{}}}],["access",{"_index":336,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/UserRoles.html":{}}}],["accessible",{"_index":929,"title":{},"body":{"index.html":{}}}],["account",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":985,"title":{},"body":{"index.html":{}}}],["actual",{"_index":920,"title":{},"body":{"index.html":{}}}],["add(this.expiration",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["address",{"_index":917,"title":{},"body":{"index.html":{}}}],["again",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["against",{"_index":908,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1027,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":899,"title":{},"body":{"index.html":{}}}],["angular",{"_index":795,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1025,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":938,"title":{},"body":{"index.html":{}}}],["api",{"_index":176,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":178,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":427,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":454,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":460,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@matches(/^[a",{"_index":456,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty({required",{"_index":421,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiresponse",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":978,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1002,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":613,"title":{},"body":{"modules/UsersModule.html":{}}}],["app_url",{"_index":888,"title":{},"body":{"index.html":{}}}],["appability",{"_index":326,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":161,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":792,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":53,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1005,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.controller.test.ts",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl",{"_index":1028,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1029,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":696,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":160,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":165,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":169,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/auth/auth.controller.test.ts",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.controller.ts",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.controller.ts:37",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:51",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:21",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:41",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:68",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":420,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:16",{"_index":426,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:26",{"_index":423,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":488,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:22",{"_index":490,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:32",{"_index":494,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:42",{"_index":492,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:52",{"_index":493,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":372,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":394,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:13",{"_index":397,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl",{"_index":304,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":352,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":468,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:15",{"_index":471,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:30",{"_index":473,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":470,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":355,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/dto/patch",{"_index":451,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":435,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":444,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":439,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":530,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":496,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:18",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:24",{"_index":525,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:30",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:36",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:42",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:48",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:60",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:41",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:53",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:71",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:85",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":612,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:108",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:131",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:22",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:40",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:49",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:59",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:76",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":34,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":830,"title":{},"body":{"index.html":{}}}],["async",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":615,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":373,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":378,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":381,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/register.dto",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":614,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":180,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["authenticating",{"_index":907,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["authentication/authorization",{"_index":813,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":384,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":387,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":59,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1014,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":217,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":811,"title":{},"body":{"index.html":{}}}],["bad",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":889,"title":{},"body":{"index.html":{}}}],["based",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["below",{"_index":848,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":925,"title":{},"body":{"index.html":{}}}],["beware",{"_index":537,"title":{},"body":{"entities/UserRoles.html":{}}}],["body",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":807,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":363,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["bootstrap",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":817,"title":{},"body":{"index.html":{}}}],["branch",{"_index":930,"title":{},"body":{"index.html":{}}}],["branches",{"_index":994,"title":{},"body":{"index.html":{}}}],["brew",{"_index":828,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1016,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":736,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":329,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["building",{"_index":787,"title":{},"body":{"index.html":{}}}],["can(useractionsenum.manage",{"_index":333,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(useractionsenum.read",{"_index":338,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(useractionsenum.update",{"_index":339,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canactivate",{"_index":375,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":379,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["cascade",{"_index":545,"title":{},"body":{"entities/UserRoles.html":{}}}],["casl",{"_index":318,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":314,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl",{"_index":616,"title":{},"body":{"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["caslabilityfactory",{"_index":303,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":60,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["change",{"_index":939,"title":{},"body":{"index.html":{}}}],["check",{"_index":476,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":475,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["checks",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":829,"title":{},"body":{"index.html":{}}}],["choice",{"_index":932,"title":{},"body":{"index.html":{}}}],["choose",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":800,"title":{},"body":{"index.html":{}}}],["class",{"_index":39,"title":{"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":344,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["clone",{"_index":851,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":349,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":350,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":351,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":610,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":611,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":971,"title":{},"body":{"index.html":{}}}],["column",{"_index":498,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["column({name",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":533,"title":{},"body":{"entities/UserRoles.html":{}}}],["column({unique",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["comes",{"_index":812,"title":{},"body":{"index.html":{}}}],["coming",{"_index":327,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["command",{"_index":861,"title":{},"body":{"index.html":{}}}],["completed",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["compose",{"_index":844,"title":{},"body":{"index.html":{}}}],["config",{"_index":882,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["configservice.get('app_env",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":799,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":992,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":871,"title":{},"body":{"index.html":{}}}],["connection",{"_index":905,"title":{},"body":{"index.html":{}}}],["connections",{"_index":919,"title":{},"body":{"index.html":{}}}],["const",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":396,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":163,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":376,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(userrepository",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["container",{"_index":879,"title":{},"body":{"index.html":{}}}],["contents",{"_index":796,"title":{},"body":{"index.html":{}}}],["context",{"_index":382,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":391,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":480,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":835,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('v1/auth",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('v1/users",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":940,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":693,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":859,"title":{},"body":{"index.html":{}}}],["create",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":539,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createforuser",{"_index":306,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":307,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createquerybuilder('users",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtoken",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":317,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["crud",{"_index":814,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":446,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":448,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["current",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":988,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":980,"title":{},"body":{"index.html":{}}}],["default",{"_index":535,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":540,"title":{},"body":{"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':username",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(username",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":354,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":962,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":55,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploying",{"_index":832,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":798,"title":{},"body":{"index.html":{}}}],["describe",{"_index":976,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":842,"title":{},"body":{"index.html":{}}}],["detached",{"_index":880,"title":{},"body":{"index.html":{}}}],["details",{"_index":345,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["detection#use",{"_index":343,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":346,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["determines",{"_index":883,"title":{},"body":{"index.html":{}}}],["dev",{"_index":886,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1010,"title":{},"body":{"index.html":{}}}],["development",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":918,"title":{},"body":{"index.html":{}}}],["directory",{"_index":877,"title":{},"body":{"index.html":{}}}],["docker",{"_index":819,"title":{},"body":{"index.html":{}}}],["docs",{"_index":960,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":894,"title":{},"body":{"index.html":{}}}],["download",{"_index":855,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":840,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":824,"title":{},"body":{"index.html":{}}}],["dto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["dto/login.dto",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/patch",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register.dto",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["dynamic",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":954,"title":{},"body":{"index.html":{}}}],["edit",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edit(payload",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["efficient",{"_index":788,"title":{},"body":{"index.html":{}}}],["email",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":998,"title":{},"body":{"index.html":{}}}],["employs",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":910,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":897,"title":{},"body":{"index.html":{}}}],["end",{"_index":968,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":913,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":495,"title":{"entities/User.html":{},"entities/UserRoles.html":{}},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":534,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":858,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":860,"title":{},"body":{"index.html":{}}}],["environment",{"_index":716,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["everything",{"_index":337,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["example",{"_index":1001,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["exec",{"_index":952,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":469,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":472,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":875,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":380,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["exist",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":863,"title":{},"body":{"index.html":{}}}],["exists",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["expiresinformatted",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":869,"title":{},"body":{"index.html":{}}}],["express",{"_index":750,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extends",{"_index":386,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":991,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":312,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["failed",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":511,"title":{},"body":{"entities/User.html":{}}}],["fastify",{"_index":751,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["feat",{"_index":996,"title":{},"body":{"index.html":{}}}],["feature",{"_index":946,"title":{},"body":{"index.html":{}}}],["features",{"_index":815,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":424,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["fields",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":969,"title":{},"body":{"index.html":{}}}],["folder",{"_index":966,"title":{},"body":{"index.html":{}}}],["follow",{"_index":845,"title":{},"body":{"index.html":{}}}],["following",{"_index":876,"title":{},"body":{"index.html":{}}}],["format",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["format('lll",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":786,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":438,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":967,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1006,"title":{},"body":{"index.html":{}}}],["function",{"_index":485,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":779,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":990,"title":{},"body":{"index.html":{}}}],["generate",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":961,"title":{},"body":{"index.html":{}}}],["get(':username",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(id",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass(username",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["getone",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["getstartingmessage",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":781,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@request",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(req",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(@param('username",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":852,"title":{},"body":{"index.html":{}}}],["github",{"_index":958,"title":{},"body":{"index.html":{}}}],["given",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":440,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":497,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":374,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":467,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handle",{"_index":359,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handle(ability",{"_index":360,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handler",{"_index":474,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":486,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":487,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":367,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":356,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:17",{"_index":361,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:7",{"_index":370,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":441,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{}}}],["hashed",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":793,"title":{},"body":{"index.html":{}}}],["host",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":970,"title":{},"body":{"index.html":{}}}],["http",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["http://localhost:4200",{"_index":870,"title":{},"body":{"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":342,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":853,"title":{},"body":{"index.html":{}}}],["https://typeorm.io",{"_index":944,"title":{},"body":{"index.html":{}}}],["iat",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["igenericmessagebody",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imessage",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":357,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":900,"title":{},"body":{"index.html":{}}}],["infersubjects",{"_index":313,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{}}}],["inject(winston_module_provider",{"_index":171,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":158,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":159,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":794,"title":{},"body":{"index.html":{}}}],["interface",{"_index":362,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":369,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":358,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":385,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalphanumeric",{"_index":428,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isemail",{"_index":463,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":429,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["ispublic",{"_index":389,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":901,"title":{},"body":{"index.html":{}}}],["item",{"_index":347,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":348,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["itokenreturnbody",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["javascript",{"_index":825,"title":{},"body":{"index.html":{}}}],["joi",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":371,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":238,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepconnectionalive",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["keyword",{"_index":323,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["layer",{"_index":987,"title":{},"body":{"index.html":{}}}],["left",{"_index":909,"title":{},"body":{"index.html":{}}}],["length",{"_index":507,"title":{},"body":{"entities/User.html":{}}}],["level",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":942,"title":{},"body":{"index.html":{}}}],["license",{"_index":1011,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1013,"title":{},"body":{"index.html":{}}}],["limit",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["loads",{"_index":878,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":839,"title":{},"body":{"index.html":{}}}],["locally",{"_index":823,"title":{},"body":{"index.html":{}}}],["location",{"_index":982,"title":{},"body":{"index.html":{}}}],["logger",{"_index":164,"title":{},"body":{"injectables/AppService.html":{}}}],["logging",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["login(@body",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":189,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logs",{"_index":804,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["made",{"_index":808,"title":{},"body":{"index.html":{}}}],["main",{"_index":995,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":890,"title":{},"body":{"index.html":{}}}],["make",{"_index":820,"title":{},"body":{"index.html":{}}}],["manage",{"_index":320,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["manual",{"_index":849,"title":{},"body":{"index.html":{}}}],["many",{"_index":522,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["manytoone",{"_index":547,"title":{},"body":{"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":542,"title":{},"body":{"entities/UserRoles.html":{}}}],["mapping",{"_index":984,"title":{},"body":{"index.html":{}}}],["matches",{"_index":464,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^[a",{"_index":465,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxfiles",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":430,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":433,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["mins",{"_index":904,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":778,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1012,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":866,"title":{},"body":{"index.html":{}}}],["module",{"_index":52,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":54,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["mongodb",{"_index":936,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":948,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":937,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":831,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":931,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":167,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":177,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":911,"title":{},"body":{"index.html":{}}}],["nest",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":383,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":785,"title":{},"body":{"index.html":{}}}],["non",{"_index":818,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":856,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["number",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":806,"title":{},"body":{"index.html":{}}}],["object",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.keys(payload).foreach((key",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":923,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":544,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":521,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":527,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":972,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":723,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":724,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["operation",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":843,"title":{},"body":{"index.html":{}}}],["operations",{"_index":922,"title":{},"body":{"index.html":{}}}],["optional",{"_index":168,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":884,"title":{},"body":{"index.html":{}}}],["os",{"_index":1009,"title":{},"body":{"index.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":847,"title":{},"body":{"index.html":{}}}],["over",{"_index":926,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1017,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":728,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":959,"title":{},"body":{"index.html":{}}}],["panel",{"_index":836,"title":{},"body":{"index.html":{}}}],["param",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('username",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["particular",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1008,"title":{},"body":{"index.html":{}}}],["passport",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":528,"title":{},"body":{"entities/User.html":{}}}],["passwords",{"_index":514,"title":{},"body":{"entities/User.html":{}}}],["passwordtransformer",{"_index":434,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"coverage.html":{}}}],["patch",{"_index":453,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["patch()@apiresponse({status",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(payload",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":450,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["payload",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload[key",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":921,"title":{},"body":{"index.html":{}}}],["performance",{"_index":924,"title":{},"body":{"index.html":{}}}],["permit",{"_index":538,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":816,"title":{},"body":{"index.html":{}}}],["pg",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":864,"title":{},"body":{"index.html":{}}}],["plaintoclass(user",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":477,"title":{},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":466,"title":{"guards/PoliciesGuard.html":{}},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":366,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":365,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":364,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":478,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":482,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":874,"title":{},"body":{"index.html":{}}}],["post",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":935,"title":{},"body":{"index.html":{}}}],["power",{"_index":892,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":797,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":502,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":172,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":846,"title":{},"body":{"index.html":{}}}],["prod",{"_index":887,"title":{},"body":{"index.html":{}}}],["produce",{"_index":965,"title":{},"body":{"index.html":{}}}],["production",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"entities/UserRoles.html":{}}}],["profiles",{"_index":541,"title":{},"body":{"entities/UserRoles.html":{}}}],["profileservice",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["progress",{"_index":993,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":784,"title":{},"body":{"index.html":{}}}],["promise",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":263,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":810,"title":{},"body":{"index.html":{}}}],["provide",{"_index":618,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":979,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1004,"title":{},"body":{"index.html":{}}}],["public",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('/')@apiresponse({status",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register')@apiresponse({status",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["purpose",{"_index":896,"title":{},"body":{"index.html":{}}}],["queried",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["quickly",{"_index":809,"title":{},"body":{"index.html":{}}}],["r",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["random",{"_index":898,"title":{},"body":{"index.html":{}}}],["react",{"_index":872,"title":{},"body":{"index.html":{}}}],["read",{"_index":334,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":999,"title":{},"body":{"index.html":{}}}],["received",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["recommended",{"_index":912,"title":{},"body":{"index.html":{}}}],["record",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["records",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":377,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{}}}],["register(@body",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":206,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registered",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerpayload",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":983,"title":{},"body":{"index.html":{}}}],["relations",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["relationship",{"_index":523,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1007,"title":{},"body":{"index.html":{}}}],["remark",{"_index":321,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["removed",{"_index":893,"title":{},"body":{"index.html":{}}}],["removes",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":862,"title":{},"body":{"index.html":{}}}],["repo",{"_index":805,"title":{},"body":{"index.html":{}}}],["repository",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["represent",{"_index":520,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":324,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["req",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user",{"_index":328,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["request'})@apiresponse({status",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":432,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"index.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":865,"title":{},"body":{"index.html":{}}}],["rest",{"_index":854,"title":{},"body":{"index.html":{}}}],["restful",{"_index":977,"title":{},"body":{"index.html":{}}}],["results",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rich",{"_index":947,"title":{},"body":{"index.html":{}}}],["role",{"_index":331,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":531,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":532,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":536,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":546,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["roles",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["rotate",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":868,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":826,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["sal",{"_index":1024,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":789,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":510,"title":{},"body":{"entities/User.html":{}}}],["serve",{"_index":895,"title":{},"body":{"index.html":{}}}],["server",{"_index":790,"title":{},"body":{"index.html":{}}}],["service",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["setmetadata(check_policies_key",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('username",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":891,"title":{},"body":{"index.html":{}}}],["side",{"_index":791,"title":{},"body":{"index.html":{}}}],["signed",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":963,"title":{},"body":{"index.html":{}}}],["sits",{"_index":914,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":322,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["specification",{"_index":974,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":934,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":943,"title":{},"body":{"index.html":{}}}],["stack",{"_index":833,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":841,"title":{},"body":{"index.html":{}}}],["start",{"_index":838,"title":{},"body":{"index.html":{}}}],["started",{"_index":782,"title":{"index.html":{}},"body":{}}],["starter",{"_index":783,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["startingmessage",{"_index":162,"title":{},"body":{"injectables/AppService.html":{}}}],["statements",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":916,"title":{},"body":{"index.html":{}}}],["status",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":928,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":395,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":325,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":319,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":388,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1003,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":945,"title":{},"body":{"index.html":{}}}],["supports",{"_index":933,"title":{},"body":{"index.html":{}}}],["sure",{"_index":821,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1015,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":973,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":727,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":997,"title":{},"body":{"index.html":{}}}],["test",{"_index":953,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":957,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":956,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":955,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":802,"title":{},"body":{"index.html":{}}}],["tests",{"_index":951,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":949,"title":{},"body":{"index.html":{}}}],["this.appservice.startingmessage",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(user",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslabilityfactory.createforuser(user",{"_index":481,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":483,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyusername(payload.username",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(username",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.info('calling",{"_index":173,"title":{},"body":{"injectables/AppService.html":{}}}],["this.reflector.get",{"_index":479,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":390,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.userrepository",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.delete(username",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(payload",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusernameandpass",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["to(value",{"_index":443,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["tokens",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["transform",{"_index":445,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":436,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transports",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":837,"title":{},"body":{"index.html":{}}}],["true",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":425,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["true})@isemail()@isnotempty",{"_index":489,"title":{},"body":{"classes/RegisterDto.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":422,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["true})@matches(/^[a",{"_index":491,"title":{},"body":{"classes/RegisterDto.html":{}}}],["try",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1026,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":803,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":484,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["typeorm",{"_index":447,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":964,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":509,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["unique",{"_index":529,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":950,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["up",{"_index":881,"title":{},"body":{"index.html":{}}}],["update",{"_index":341,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["url",{"_index":501,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["url(payload.email",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":906,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":619,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":975,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":138,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":452,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":455,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:30",{"_index":462,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:38",{"_index":459,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:46",{"_index":461,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.entity",{"_index":548,"title":{},"body":{"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":543,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":330,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.username",{"_index":340,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user[key",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":315,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["username",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userrepository",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":245,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":316,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":332,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":617,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.entity",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":549,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":61,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":215,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":867,"title":{},"body":{"index.html":{}}}],["usually",{"_index":915,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":885,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":504,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["v1/auth",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["v1/users",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["valid",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":398,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validates",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":431,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":442,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":449,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":437,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":697,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1030,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":927,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":827,"title":{},"body":{"index.html":{}}}],["view",{"_index":989,"title":{},"body":{"index.html":{}}}],["vue",{"_index":873,"title":{},"body":{"index.html":{}}}],["web",{"_index":801,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["welcomemessage",{"_index":174,"title":{},"body":{"injectables/AppService.html":{}}}],["where('users.username",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["winston",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":170,"title":{},"body":{"injectables/AppService.html":{}}}],["winstonfilerotator",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":850,"title":{},"body":{"index.html":{}}}],["work",{"_index":981,"title":{},"body":{"index.html":{}}}],["world",{"_index":1000,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":941,"title":{},"body":{"index.html":{}}}],["write",{"_index":335,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["writing",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["xampp",{"_index":834,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":857,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":458,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["za",{"_index":457,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["zippedarchive",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStartingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStartingMessage\n                        \n                    \n                \n            \n            \n                \ngetStartingMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/')@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get('/')\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  getStartingMessage(): IMessage {\n    return this.appService.startingMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule,\n    UsersModule,\n    CaslModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                startingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        startingMessage\n                        \n                    \n                \n            \n            \n                \nstartingMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  startingMessage(): IMessage {\n    this.logger.info('Calling welcomeMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { ITokenReturnBody } from '@starter/api-types';\n\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { Public } from './public.decorator';\n\n/**\n * Authentication Controller\n */\n@ApiTags('authentication')\n@Controller('v1/auth')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} usersService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginDto): Promise {\n    const user = await this.authService.validateUser(payload);\n    return await this.authService.createToken(user);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterDto) {\n    const user = await this.usersService.create(payload);\n    return await this.authService.createToken(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([User, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, JwtStrategy, UsersService],\n  exports: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                users service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as moment from 'moment';\n\nimport { ITokenReturnBody } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { LoginDto } from './dto/login.dto';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {User} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    roles,\n    email,\n  }: User): Promise {\n    return {\n      expiresIn: this.expiration,\n      expiresInFormatted: moment()\n        .add(this.expiration, 'seconds')\n        .format('LLL'),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        roles,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ username, password }: LoginDto): Promise {\n    const user = await this.usersService.getByUsernameAndPass(\n      username,\n      password,\n    );\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl-ability.factory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    can(UserActionsEnum.Update, User, { username: user.username }); // update own user\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl-ability.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl-ability.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate({ iat, exp, id }: Record): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:26\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:16\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class LoginDto {\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:38\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:46\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, caslAbilityFactory: CaslAbilityFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        caslAbilityFactory\n                                                  \n                                                        \n                                                                        CaslAbilityFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslAbilityFactory } from './casl-ability.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.caslAbilityFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:22\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:42\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:52\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:32\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class RegisterDto {\n  /**\n   * Email field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                gravatar\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:36\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gravatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:42\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:18\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:30\n                        \n                    \n\n            \n                \n                    Name column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:60\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:24\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class User {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  gravatar: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { User } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => User, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:85\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:53\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    patchUser(payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiResponse({status: 200, description: 'Patch User Request Received'})@ApiResponse({status: 400, description: 'Patch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:71\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('v1/users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves current authenticated user\n   * @returns {Promise} queried user data\n   */\n  @Get('user')\n  getUser(@Request() req) {\n    return req.user;\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Patch()\n  @ApiResponse({ status: 200, description: 'Patch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Patch User Request Failed' })\n  async patchUser(@Body() payload: PatchUserDto): Promise {\n    return await this.usersService.edit(payload);\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return await this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslAbilityFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslAbilityFactory } from '../casl/casl-ability.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, UserRoles])],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslAbilityFactory,\n  ],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:131\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchUserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:108\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:49\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsernameAndPass\n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.username = :username and users.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {RegisterDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: RegisterDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        gravatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {PatchUserDto} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(payload: PatchUserDto): Promise {\n    const { username } = payload;\n    const user = await this.getByUsername(username);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (8/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\nDescription |\nPrerequisites |\nDeployment |\nEnvironment Configuration |\nChoosing a Web Framework |\nChoosing a Database |\nTesting |\nTypeDocs |Logs\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the app in development mode by using npm run start (the app will be exposed on http://localhost:4200; not to conflict with React, Angular, or Vue ports).\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:4200.\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: dev or prod.\nAPP_URL - the base URL for the application. Made mainly to showcase the power of ConfigService and can be removed as it doesn't serve any other purpose\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds indicating when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not recommended).\nDB_HOST - the endpoint where this database sits (usually localhost but can be a static address).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express version is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n✅ Testing\nDocker 🐳\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, simply, by typing npm run typedocs. This will produce a docs folder with the required front-end files and start hosting on localhost.\n# generate docs for code\n$ npm run typedocs\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\nUsersModule -->\n\nCaslAbilityFactory->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl-ability.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects<> | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            moduleMocker   (apps/.../auth.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(User, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
