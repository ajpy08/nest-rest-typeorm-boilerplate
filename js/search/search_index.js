var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.7","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.497,1,2.023]],["body/controllers/AppController.html",[0,2.49,1,2.759,2,1.5,3,0.319,4,0.276,5,0.302,6,2.635,7,0.88,8,2.759,9,0.411,10,1.567,11,4.304,12,4.375,13,3.163,14,1.865,15,0.034,16,3.163,17,3.366,18,3.585,19,3.586,20,3.797,21,3.366,22,0.849,23,3.163,24,2.242,25,3.586,26,1.152,27,0.624,28,1.058,29,5.493,30,2.477,31,1.466,32,4.893,33,2.477,34,4.304,35,3.113,36,1.02,37,3.163,38,3.163,39,3.022,40,2.242,41,2.477,42,1.059,43,2.477,44,2.242,45,0.458,46,2.635,47,0.749,48,2.735,49,2.635,50,3.586,51,3.972,52,1.5,53,2.635,54,1.648,55,0.319,56,0.016,57,0.892,58,1.214,59,2.635,60,1.058,61,3.586,62,2.49,63,3.586,64,0.932,65,3.163,66,3.163,67,3.163,68,3.163,69,0.016,70,0.022,71,0.016]],["title/modules/AppModule.html",[36,0.748,72,1.816]],["body/modules/AppModule.html",[1,2.954,2,1.887,3,0.465,4,0.247,5,0.245,15,0.034,33,2.29,36,1.092,45,0.531,47,0.669,48,2.85,49,2.354,55,0.285,56,0.015,64,0.862,69,0.015,70,0.02,71,0.015,72,3.526,73,1.224,74,1.224,75,1.626,76,1.626,77,1.626,78,2.185,79,1.472,80,2.354,81,2.354,82,2.354,83,3.149,84,2.99,85,2.85,86,3.035,87,2.29,88,1.626,89,1.472,90,2.825,91,3.207,92,2.185,93,3.98,94,2.354,95,2.354,96,2.354,97,3.98,98,1.626,99,2.825,100,2.354,101,1.585,102,1.472,103,2.825,104,2.354,105,2.825,106,2.825,107,1.811,108,1.811,109,1.811,110,1.121,111,2.354,112,2.825,113,2.073,114,2.551,115,0.367,116,2.825,117,2.825,118,2.825,119,2.354,120,2.825,121,0.945,122,2.825,123,0.945,124,2.825,125,1.224,126,2.825,127,2.825,128,2.825,129,2.825,130,2.825,131,3.98,132,2.825,133,2.073,134,2.825,135,4.608,136,3.618,137,3.98,138,3.98,139,1.985,140,3.98,141,1.411,142,3.98,143,3.98,144,2.825,145,3.98,146,2.825,147,2.043,148,2.825,149,2.825,150,2.825,151,2.825,152,2.825,153,2.825,154,2.825,155,2.825,156,2.825,157,2.825,158,2.825,159,2.825]],["title/injectables/AppService.html",[48,1.644,160,1.056]],["body/injectables/AppService.html",[3,0.362,4,0.313,5,0.321,7,0.681,9,0.466,10,1.704,12,4.599,15,0.034,22,0.923,24,2.437,26,1.306,27,0.707,28,1.199,31,1.21,39,2.692,40,2.437,41,2.997,42,1.127,43,3.177,44,2.437,45,0.455,47,0.849,48,2.437,55,0.362,56,0.018,57,1.557,58,1.32,60,1.565,64,0.776,69,0.018,70,0.024,71,0.018,92,1.7,101,1.615,102,1.867,113,1.867,115,0.466,139,2.331,160,1.565,161,2.063,162,2.987,163,3.585,164,3.997,165,3.585,166,2.617,167,3.585,168,3.898,169,3.339,170,1.857,171,3.585,172,1.101,173,5.209,174,3.585,175,3.585]],["title/controllers/AuthController.html",[0,1.497,176,2.023]],["body/controllers/AuthController.html",[0,2.181,2,1.335,3,0.284,4,0.246,5,0.174,7,0.897,9,0.366,10,1.446,14,1.72,15,0.034,18,2.285,20,3.612,22,0.783,26,1.446,27,0.783,28,1.328,30,1.62,31,1.027,45,0.477,47,0.667,51,4.061,52,1.335,55,0.284,56,0.014,57,1.12,58,1.409,60,1.328,62,2.591,64,0.859,69,0.014,70,0.02,71,0.014,115,0.516,139,1.576,170,1.576,172,1.22,176,2.545,177,2.346,178,2.346,179,2.816,180,3.031,181,2.169,182,3.676,183,4.162,184,2.816,185,2.743,186,2.816,187,4.995,188,3.971,189,4.995,190,3.971,191,4.995,192,4.995,193,2.816,194,3.612,195,2.545,196,2.545,197,3.308,198,3.971,199,2.368,200,3.612,201,1.72,202,2.816,203,2.497,204,2.816,205,4.995,206,2.816,207,2.816,208,2.346,209,2.497,210,1.62,211,2.346,212,2.036,213,2.816,214,1.761,215,1.805,216,2.816,217,2.816,218,1.413,219,2.816,220,2.871,221,2.816,222,2.368,223,2.816,224,3.971,225,2.816,226,2.816,227,2.816]],["title/modules/AuthModule.html",[36,0.748,83,1.816]],["body/modules/AuthModule.html",[2,2.164,3,0.348,4,0.301,5,0.213,15,0.034,36,1.211,45,0.531,47,0.818,54,1.798,55,0.348,56,0.018,64,0.747,69,0.018,70,0.023,71,0.018,73,1.495,74,1.495,75,1.986,76,1.986,77,1.986,78,2.424,79,2.377,83,3.59,84,3.087,85,3.027,87,2.626,88,1.986,89,1.798,91,3.277,100,2.876,101,1.534,102,1.798,104,2.876,113,1.798,114,2.213,176,3.277,181,1.37,209,2.755,211,2.876,228,2.876,229,3.452,230,2.876,231,3.344,232,3.452,233,3.452,234,2.876,235,3.452,236,2.213,237,3.452,238,4.564,239,4.564,240,2.626,241,3.452,242,2.876,243,2.876,244,3.452,245,4.564,246,3.452,247,1.986]],["title/injectables/AuthService.html",[160,1.056,209,1.497]],["body/injectables/AuthService.html",[3,0.211,4,0.183,5,0.129,7,0.464,9,0.272,10,1.162,15,0.034,22,0.92,26,1.577,27,0.969,28,1.448,30,2.227,31,1.271,33,2.227,42,1.245,45,0.429,47,0.495,55,0.322,56,0.011,57,1.221,58,1.486,60,1.644,64,0.937,69,0.011,70,0.016,71,0.011,101,1.523,102,1.089,115,0.639,121,1.448,123,1.067,125,1.382,136,2.798,139,2.092,141,0.59,160,1.067,161,1.203,166,1.513,170,2.143,172,1.432,180,1.836,181,1.95,182,1.341,185,2.429,194,1.512,199,1.676,200,1.512,201,2.129,209,1.513,210,1.203,212,1.512,214,1.806,215,1.341,218,1.721,222,0.991,236,1.341,240,2.492,248,1.512,249,1.162,250,3.224,251,3.224,252,3.191,253,3.224,254,2.091,255,4.391,256,3.191,257,2.091,258,2.091,259,2.308,260,2.659,261,3.224,262,2.308,263,2.659,264,2.659,265,2.091,266,2.659,267,3.811,268,3.984,269,3.224,270,3.224,271,2.659,272,2.091,273,2.091,274,2.659,275,1.382,276,2.046,277,2.659,278,2.798,279,2.308,280,1.512,281,1.341,282,1.341,283,1.742,284,0.642,285,3.224,286,2.659,287,1.512,288,2.659,289,1.742,290,1.512,291,1.513,292,1.836,293,1.742,294,1.742,295,1.742,296,1.742,297,3.885,298,1.742,299,3.224,300,3.372,301,2.659,302,2.308,303,3.224,304,2.227,305,1.742,306,1.512,307,1.742,308,2.659,309,1.742,310,0.991,311,1.203,312,1.341,313,1.742]],["title/modules/ConfigModule.html",[36,0.748,84,1.644]],["body/modules/ConfigModule.html",[3,0.437,4,0.378,5,0.267,15,0.033,36,1.346,45,0.46,47,1.026,55,0.437,56,0.022,69,0.022,70,0.027,71,0.022,73,1.876,74,1.876,75,2.492,76,2.492,77,2.492,78,2.499,79,2.96,84,3.157,87,3.033,88,2.492,89,2.256,101,1.776,141,1.221,314,3.608,315,3.608,316,4.331,317,4.331,318,3.608,319,4.331,320,4.331]],["title/classes/ConfigService.html",[56,0.016,101,0.89]],["body/classes/ConfigService.html",[3,0.238,4,0.206,5,0.337,7,0.508,9,0.306,10,1.272,15,0.034,22,0.968,24,1.819,26,1.675,27,0.907,28,1.538,31,1.414,39,3.355,40,1.819,41,2.394,42,1.328,43,2.646,45,0.363,55,0.352,56,0.012,57,1.173,58,1.297,60,1.391,62,1.118,64,0.9,69,0.012,70,0.018,71,0.012,101,0.985,115,0.638,139,1.386,141,0.665,147,3.008,166,2.731,169,1.511,170,2.041,172,1.278,195,1.511,249,1.272,275,1.992,284,0.724,310,1.118,321,1.021,322,1.705,323,3.891,324,3.492,325,2.666,326,3.492,327,2.909,328,3.492,329,2.909,330,3.952,331,2.909,332,2.909,333,2.959,334,2.909,335,2.358,336,3.145,337,2.909,338,2.646,339,1.819,340,2.909,341,2.358,342,2.525,343,3.326,344,2.948,345,2.909,346,3.008,347,3.465,348,2.909,349,2.358,350,2.909,351,2.525,352,3.831,353,2.909,354,2.909,355,2.909,356,1.972,357,2.909,358,1.964,359,1.705,360,3.465,361,1.705,362,2.909,363,1.705,364,1.964,365,1.964,366,1.964,367,1.964,368,1.705,369,1.964,370,1.964,371,1.964,372,1.705,373,1.964,374,1.705,375,1.228,376,1.964,377,1.964,378,1.705,379,1.705,380,1.964,381,1.705,382,1.964,383,1.705,384,1.964,385,1.705,386,1.964,387,1.705,388,1.964,389,1.705,390,1.964,391,1.705,392,1.964,393,1.705,394,1.964,395,1.705,396,2.525,397,1.964,398,2.909,399,1.964,400,1.964,401,1.964,402,1.964,403,1.964]],["title/interfaces/EnvConfig.html",[284,0.97,323,2.023]],["body/interfaces/EnvConfig.html",[3,0.288,4,0.249,5,0.326,7,0.415,15,0.034,22,0.563,24,1.487,31,1.3,39,3.159,40,1.487,41,2.307,42,1.328,43,2.307,45,0.404,55,0.404,56,0.015,57,0.805,58,1.417,60,0.955,62,1.353,64,1.003,69,0.015,70,0.021,71,0.015,101,0.805,139,1.133,141,0.805,147,3.351,166,2.603,169,1.83,170,1.591,172,1.423,195,1.83,275,1.737,284,0.877,310,1.353,322,2.064,323,3.841,325,1.83,327,2.378,329,2.378,330,3.634,331,2.378,332,2.378,333,2.667,334,2.378,336,3.244,337,2.378,338,2.892,339,1.487,340,2.378,342,2.064,343,2.899,344,2.57,345,2.378,346,2.899,347,3.34,348,2.378,350,2.378,351,2.064,352,3.34,353,2.378,354,2.378,355,2.378,356,1.901,357,2.378,358,2.378,359,2.064,360,3.86,361,2.064,362,3.34,363,2.899,364,2.378,365,2.378,366,2.378,367,2.378,368,2.064,369,2.378,370,2.378,371,2.378,372,2.064,373,2.378,374,2.064,375,1.487,376,2.378,377,2.378,378,2.064,379,2.064,380,2.378,381,2.064,382,2.378,383,2.064,384,2.378,385,2.064,386,2.378,387,2.064,388,2.378,389,2.064,390,2.378,391,2.064,392,2.378,393,2.064,394,2.378,395,2.064,396,2.899,397,2.378,398,3.34,399,2.378,400,2.378,401,2.378,402,2.378,403,2.378,404,1.643,405,2.854,406,2.854]],["title/interfaces/IGenericMessageBody.html",[284,0.97,407,1.816]],["body/interfaces/IGenericMessageBody.html",[3,0.221,4,0.191,5,0.135,7,0.319,9,0.285,15,0.034,17,1.404,21,1.404,22,0.432,24,2.073,27,0.432,31,1.294,42,1.226,44,1.141,45,0.478,47,0.519,55,0.333,56,0.011,57,0.932,58,1.543,60,1.105,62,1.567,64,1.157,69,0.011,70,0.017,71,0.011,98,1.26,110,2.122,115,0.285,121,1.993,123,1.673,125,1.432,139,0.869,141,1.25,160,1.105,170,1.312,172,1.462,181,1.58,196,1.404,199,2.061,201,2.487,203,2.102,214,0.732,218,1.882,220,1.584,222,2.102,247,1.902,249,1.204,275,0.949,276,1.404,281,2.119,282,2.119,284,0.673,291,1.038,304,1.26,310,1.887,311,1.902,312,1.404,336,1.902,339,1.141,404,1.26,407,1.902,408,1.584,409,2.754,410,3.316,411,3.316,412,4.327,413,2.119,414,1.404,415,2.879,416,2.754,417,1.825,418,3.964,419,1.038,420,1.404,421,1.825,422,1.404,423,2.073,424,1.584,425,2.754,426,2.754,427,1.825,428,1.825,429,1.404,430,2.879,431,3.618,432,1.825,433,1.825,434,1.825,435,1.825,436,1.825,437,1.825,438,1.825,439,1.825,440,1.825,441,1.825,442,1.825,443,1.825,444,1.825,445,2.39,446,1.825,447,1.825,448,1.825,449,1.584,450,1.825,451,1.825,452,1.825,453,1.825,454,1.825,455,1.584,456,2.754,457,1.26,458,1.825,459,1.825,460,1.584,461,1.404,462,1.584,463,1.825,464,1.825,465,1.825,466,1.584,467,1.825,468,1.825,469,1.584,470,1.825,471,1.825,472,1.825,473,1.584,474,1.825,475,1.584,476,1.584,477,1.825,478,1.825,479,1.825,480,1.825,481,1.825,482,1.825,483,1.825,484,1.584,485,1.584,486,2.119,487,1.584,488,2.39,489,1.825,490,1.825,491,1.825]],["title/interfaces/ITokenReturnBody.html",[210,1.816,284,0.97]],["body/interfaces/ITokenReturnBody.html",[3,0.237,4,0.205,5,0.145,7,0.342,9,0.305,15,0.034,27,0.687,30,2.388,31,1.073,33,2.388,42,1.296,45,0.448,47,0.556,55,0.351,56,0.012,57,0.982,58,1.539,60,1.535,64,1.061,69,0.012,70,0.018,71,0.012,101,1.382,102,1.223,115,0.596,121,1.535,123,1.164,125,1.017,136,3,139,1.821,141,0.662,160,1.164,166,1.113,170,1.945,172,1.506,180,1.351,181,1.382,182,1.505,185,2.161,194,2.518,199,1.508,200,1.698,201,1.988,209,1.113,210,2.003,212,1.698,214,1.639,215,1.505,218,1.577,222,1.113,236,1.505,240,2.003,248,1.698,249,1.268,250,1.956,251,1.956,253,1.956,255,4.083,259,1.698,260,1.956,261,3.387,262,1.698,263,1.956,264,1.956,266,1.956,267,3.319,268,4.032,269,3.457,270,3.457,271,1.956,274,1.956,275,1.017,276,1.505,277,1.956,278,3,279,2.518,280,1.698,281,2.232,282,2.232,283,2.9,284,0.721,285,4.427,286,4.083,287,2.518,288,2.9,289,1.956,290,1.698,291,1.65,292,2.003,293,1.956,294,1.956,295,1.956,296,1.956,297,4.083,298,1.956,299,3.457,300,3.545,301,2.9,302,2.518,303,3.457,304,2.388,305,1.956,306,1.698,307,1.956,308,2.9,309,1.956,310,1.113,311,1.351,312,1.505,313,1.956,404,1.351]],["title/injectables/JwtStrategy.html",[160,1.056,231,1.816]],["body/injectables/JwtStrategy.html",[3,0.326,4,0.282,5,0.199,7,0.635,9,0.42,10,1.59,15,0.034,18,2.513,22,0.861,26,1.59,27,0.861,28,1.46,31,1.129,33,2.513,35,2.336,45,0.483,47,0.765,54,1.683,55,0.326,56,0.025,57,1.494,58,1.494,60,1.46,64,0.699,69,0.017,70,0.022,71,0.017,101,1.672,102,1.683,115,0.567,133,1.683,160,1.46,161,1.859,170,1.282,172,0.992,181,1.963,195,3.547,201,2.142,214,2.009,215,2.071,231,2.513,240,3.281,243,2.692,261,3.355,275,1.891,279,2.336,287,3.157,291,1.532,342,3.157,396,2.336,492,2.692,493,4.946,494,3.231,495,3.231,496,3.231,497,5.702,498,5.297,499,3.231,500,4.366,501,4.366,502,4.366,503,3.231,504,3.231,505,2.692,506,3.231,507,3.231,508,3.231,509,3.231,510,3.231,511,3.231,512,3.231,513,2.336,514,4.366,515,4.366,516,4.366,517,3.231]],["title/classes/LoginPayload.html",[56,0.016,185,1.644]],["body/classes/LoginPayload.html",[3,0.403,4,0.349,5,0.246,7,0.582,9,0.52,14,2.173,15,0.034,22,0.989,42,1.244,45,0.438,52,1.896,55,0.403,56,0.03,69,0.021,70,0.026,71,0.021,115,0.652,121,1.981,123,1.981,133,2.613,182,3.216,185,2.613,249,1.827,321,1.732,375,2.613,518,3.331,519,5.017,520,3.628,521,3.331,522,3.998,523,4.158,524,2.891,525,3.998,526,3.965,527,3.628,528,3.965,529,2.891,530,2.563,531,2.891]],["title/classes/PasswordTransformer.html",[56,0.016,532,2.023]],["body/classes/PasswordTransformer.html",[3,0.393,4,0.34,5,0.24,7,0.788,9,0.506,10,1.797,15,0.034,22,0.973,26,1.797,27,0.973,28,1.65,31,1.277,42,1.233,45,0.431,55,0.393,56,0.028,58,1.392,64,1.233,69,0.02,70,0.025,71,0.02,123,1.65,321,1.687,338,3.584,413,3.164,419,1.847,445,2.817,532,3.164,533,3.245,534,3.569,535,4.935,536,5.417,537,4.935,538,3.896,539,4.935,540,4.745,541,4.935,542,3.896,543,4.935,544,3.896]],["title/classes/PatchProfilePayload.html",[56,0.016,423,1.644]],["body/classes/PatchProfilePayload.html",[3,0.36,4,0.312,5,0.22,7,0.519,9,0.464,14,2.388,15,0.034,22,1.087,27,1.128,42,1.312,45,0.407,52,1.692,55,0.36,56,0.028,69,0.018,70,0.024,71,0.018,115,0.716,121,1.913,123,1.913,133,1.859,199,2.021,218,1.433,249,1.699,292,3.291,321,1.546,344,2.288,375,1.859,423,2.43,520,2.582,523,4.383,524,2.582,526,4.136,527,3.374,528,4.242,529,2.582,530,2.288,531,2.582,545,2.974,546,3.887,547,3.57,548,3.57,549,3.57,550,3.887,551,3.887,552,3.57,553,3.57,554,3.57,555,3.57,556,3.887,557,2.974]],["title/classes/Profile.html",[56,0.016,218,0.97]],["body/classes/Profile.html",[3,0.295,4,0.255,5,0.18,7,0.426,9,0.38,14,2.459,15,0.034,22,1.12,27,1.12,42,1.289,44,2.124,45,0.443,55,0.295,56,0.026,69,0.015,70,0.021,71,0.015,110,2.334,115,0.738,121,1.786,123,1.786,125,1.766,133,2.124,141,0.825,218,1.56,247,2.347,249,1.485,291,2.226,292,3.074,321,1.267,414,2.614,419,1.387,422,1.875,429,2.614,457,2.347,466,3.863,532,3.256,534,3.395,540,3.397,558,2.436,559,4.609,560,5.308,561,2.925,562,2.925,563,3.911,564,2.925,565,2.925,566,2.925,567,4.078,568,4.078,569,2.925,570,2.925,571,4.078,572,4.078,573,4.078,574,4.078,575,2.925,576,2.436,577,2.925,578,3.397,579,3.397,580,3.397,581,2.925,582,2.925,583,4.078,584,2.925,585,2.925,586,2.115,587,2.925,588,2.925,589,2.436,590,2.925]],["title/controllers/ProfileController.html",[0,1.497,591,2.023]],["body/controllers/ProfileController.html",[0,1.948,2,1.095,3,0.233,4,0.201,5,0.142,7,0.869,9,0.3,10,1.252,14,1.78,15,0.034,17,3.271,18,3.341,19,3.423,20,3.69,21,3.271,22,0.81,26,1.496,27,0.81,28,1.374,30,1.328,31,1.32,42,1.144,45,0.461,46,1.923,47,0.547,50,2.864,51,3.822,52,1.095,53,1.923,54,1.202,55,0.233,56,0.012,57,0.651,58,1.373,59,1.923,60,0.772,61,3.423,62,2.419,63,3.423,64,0.889,69,0.012,70,0.018,71,0.012,107,1.48,108,1.48,109,1.48,115,0.534,121,1.917,125,1.489,141,0.651,172,0.709,178,1.923,181,2.203,199,1.78,201,2.405,203,1.095,208,1.923,214,1.522,218,1.955,222,1.948,275,1.489,310,1.095,339,1.791,407,1.328,415,2.486,420,1.48,423,2.371,424,1.669,430,2.486,431,3.292,460,2.486,475,2.486,476,2.486,486,3.622,487,1.669,488,2.486,546,4.251,586,3.292,591,2.204,592,1.923,593,2.309,594,3.438,595,3.438,596,2.309,597,2.309,598,4.552,599,4.552,600,3.438,601,2.309,602,3.438,603,3.438,604,2.309,605,2.309,606,5.103,607,2.309,608,3.438,609,2.309,610,2.309,611,3.438,612,2.309,613,3.438,614,4.108,615,1.923,616,2.309,617,2.309,618,2.309,619,2.309,620,2.309,621,1.923,622,3.438,623,2.309,624,2.309,625,2.309,626,2.309,627,2.309]],["title/modules/ProfileModule.html",[36,0.748,85,1.644]],["body/modules/ProfileModule.html",[2,2.375,3,0.402,4,0.348,5,0.246,15,0.033,36,1.297,45,0.535,47,0.945,54,2.078,55,0.402,56,0.021,69,0.021,70,0.026,71,0.021,73,1.728,74,1.728,75,2.295,76,2.295,77,2.295,78,2.596,79,2.853,85,3.193,87,2.883,88,2.295,89,2.078,91,2.557,96,3.323,98,2.295,110,1.988,214,2.129,218,1.225,234,3.323,420,2.557,422,2.557,591,3.511,615,3.323,628,3.323,629,3.323,630,3.323,631,3.989,632,3.989,633,3.989]],["title/injectables/ProfileService.html",[160,1.056,214,1.056]],["body/injectables/ProfileService.html",[3,0.184,4,0.159,5,0.112,7,0.417,9,0.237,10,1.044,15,0.034,17,1.168,21,1.168,22,0.993,24,2.419,26,1.77,27,0.993,28,1.625,31,1.422,42,1.258,44,0.949,45,0.452,47,0.431,55,0.289,56,0.009,57,1.134,58,1.461,60,0.959,62,0.864,64,1.052,69,0.009,70,0.015,71,0.009,98,1.048,110,1.998,115,0.632,121,2.006,123,1.732,125,1.742,139,1.138,141,1.134,160,0.959,161,1.048,170,1.138,172,1.344,181,2.056,196,2.578,199,2.181,201,2.537,203,2.304,214,0.959,218,1.916,220,2.073,222,1.907,247,2.314,275,1.242,276,1.168,281,1.168,282,1.168,284,0.56,291,1.359,304,1.048,310,1.681,311,1.65,312,1.168,336,1.65,339,1.493,407,1.048,408,1.317,409,1.518,410,2.954,411,2.954,412,2.954,413,1.838,414,1.168,415,2.564,416,2.389,417,1.518,418,4.316,419,0.864,420,1.168,421,1.518,422,1.168,423,2.278,424,1.317,425,2.954,426,3.351,427,1.518,428,1.518,429,1.838,430,3.359,431,3.975,432,2.389,433,1.518,434,1.518,435,2.389,436,1.518,437,2.389,438,2.389,439,1.518,440,1.518,441,1.518,442,1.518,443,1.518,444,1.518,445,2.073,446,1.518,447,1.518,448,2.389,449,2.073,450,2.389,451,1.518,452,1.518,453,1.518,454,1.518,455,1.317,456,2.389,457,1.048,458,1.518,459,1.518,460,1.317,461,1.168,462,1.317,463,1.518,464,1.518,465,1.518,466,1.317,467,1.518,468,1.518,469,1.317,470,1.518,471,1.518,472,1.518,473,1.317,474,1.518,475,2.908,476,2.073,477,2.389,478,1.518,479,1.518,480,1.518,481,1.518,482,1.518,483,1.518,484,1.317,485,1.317,486,2.804,487,2.073,488,2.073,489,1.518,490,1.518,491,1.518,634,2.867,635,2.867,636,1.822,637,1.822,638,1.822,639,1.822,640,1.822,641,1.822,642,1.822,643,1.822]],["title/classes/RegisterPayload.html",[56,0.016,203,1.497]],["body/classes/RegisterPayload.html",[3,0.353,4,0.305,5,0.215,7,0.509,9,0.454,14,2.368,15,0.034,22,1.078,27,1.12,42,1.306,45,0.402,52,1.657,55,0.353,56,0.028,69,0.018,70,0.024,71,0.018,115,0.71,121,1.9,123,1.9,133,2.847,183,3.833,199,1.993,203,2.181,249,1.676,292,3.269,321,1.514,344,2.24,375,2.847,520,3.953,521,2.912,523,4.363,524,2.527,526,4.108,527,3.327,528,4.217,529,2.527,530,2.24,531,2.527,550,3.833,551,3.833,556,3.833,557,2.912,644,2.912,645,3.495,646,3.495,647,3.495,648,3.495,649,3.495,650,3.495]],["title/classes/Roles.html",[56,0.016,110,1.253]],["body/classes/Roles.html",[3,0.345,4,0.298,5,0.211,7,0.497,8,2.905,9,0.444,14,2.203,15,0.034,22,1.003,45,0.444,55,0.345,56,0.026,69,0.018,70,0.023,71,0.018,108,2.905,110,2.15,111,2.846,115,0.704,218,1.913,247,2.608,249,1.65,262,3.278,280,2.47,291,2.412,321,1.48,356,2.569,419,1.62,429,2.905,449,3.278,457,2.608,461,3.614,462,3.918,486,2.905,559,4.828,560,5.002,563,4.238,576,3.776,578,3.776,579,3.776,580,3.776,586,3.278,589,4.926,651,2.846,652,3.416,653,3.416,654,4.533,655,4.533,656,3.416,657,3.416,658,3.416,659,4.533,660,4.533,661,3.416,662,3.416,663,3.416,664,3.416]],["title/modules/WinstonModule.html",[36,0.748,86,1.816]],["body/modules/WinstonModule.html",[3,0.36,4,0.312,5,0.22,10,1.3,15,0.034,22,0.92,26,1.699,27,0.92,28,1.56,31,1.207,36,1.452,45,0.454,47,0.846,55,0.36,56,0.018,57,1.554,58,1.316,64,1.01,69,0.018,70,0.024,71,0.018,73,1.546,78,2.781,79,2.43,86,3.172,91,2.288,92,2.464,115,0.606,172,1.433,325,3.533,395,2.582,665,3.57,666,3.57,667,4.666,668,3.533,669,3.57,670,4.666,671,3.291,672,5.719,673,4.666,674,3.57,675,3.172,676,3.57,677,3.887,678,4.666,679,3.57,680,2.582,681,2.582,682,3.57,683,4.666,684,3.57,685,3.57,686,3.57]],["title/interfaces/WinstonModuleAsyncOptions.html",[284,0.97,675,1.816]],["body/interfaces/WinstonModuleAsyncOptions.html",[3,0.396,4,0.342,5,0.242,7,0.571,9,0.51,15,0.034,28,1.658,31,1.282,36,1.353,45,0.433,55,0.5,69,0.02,70,0.026,71,0.02,78,2.35,92,2.792,113,3.133,114,3.66,115,0.706,164,2.515,201,1.699,249,1.805,284,1.205,356,2.35,404,2.257,505,4.13,513,3.585,668,3.178,671,3.389,675,2.853,677,4.13,687,2.837,688,4.957,689,4.957,690,4.957,691,3.923,692,3.923,693,3.585,694,3.923]],["title/coverage.html",[695,3.108]],["body/coverage.html",[0,2.342,1,2.067,5,0.199,6,2.686,15,0.034,40,3.215,48,1.68,56,0.03,69,0.017,70,0.022,71,0.017,101,0.909,110,1.73,115,0.419,141,0.909,160,1.77,162,2.686,176,2.067,177,2.686,185,1.68,203,1.529,209,1.529,210,1.856,214,1.078,218,0.99,231,1.856,248,3.153,284,1.626,322,3.153,323,2.067,407,1.856,408,3.153,423,1.68,492,2.686,518,2.686,532,2.067,533,2.686,545,2.686,558,2.686,591,2.067,592,2.686,644,2.686,651,2.686,675,1.856,680,2.332,681,2.332,687,2.332,695,2.332,696,2.686,697,2.686,698,3.225,699,4.854,700,2.686,701,5.413,702,6.213,703,2.686,704,2.686,705,2.686,706,2.686,707,2.686,708,2.686,709,5.827,710,2.332,711,4.941,712,4.361,713,4.361,714,4.361,715,3.225,716,3.633,717,2.686,718,2.686,719,3.633,720,3.225,721,3.225]],["title/dependencies.html",[74,1.643,722,2.641]],["body/dependencies.html",[5,0.235,15,0.034,25,3.171,35,3.517,47,0.902,52,1.805,54,1.983,56,0.025,69,0.02,70,0.025,71,0.02,74,1.649,92,2.306,94,3.171,95,3.171,98,2.19,107,2.44,108,2.44,109,2.44,236,2.44,240,2.19,359,2.753,361,2.753,413,2.44,414,2.44,419,1.805,530,2.44,534,2.753,723,3.807,724,5.647,725,3.807,726,3.807,727,3.807,728,4.052,729,4.465,730,4.705,731,3.807,732,3.807,733,3.807,734,3.807,735,3.807,736,3.807,737,4.052,738,4.052,739,3.807,740,4.052,741,3.807,742,4.863,743,4.052,744,3.807,745,3.807,746,3.171,747,3.807,748,3.807,749,3.807,750,3.807,751,3.807,752,3.807,753,3.807,754,3.807,755,3.807,756,3.807,757,2.753,758,3.807,759,3.807,760,3.807,761,3.807]],["title/miscellaneous/enumerations.html",[762,1.376,763,3.161]],["body/miscellaneous/enumerations.html",[9,0.632,15,0.032,69,0.025,70,0.029,71,0.025,338,3.249,356,2.677,461,3.619,710,3.516,762,2.532,763,4.05,764,4.05,765,5.646]],["title/index.html",[9,0.343,766,2.641,767,2.641]],["body/index.html",[4,0.144,5,0.234,7,0.24,8,3.114,15,0.032,27,0.325,36,0.986,39,2.186,40,0.858,41,0.948,42,0.356,43,2.186,44,0.858,45,0.363,69,0.008,70,0.014,71,0.008,72,0.948,74,2.024,89,1.728,92,1.255,101,0.746,107,2.849,109,1.056,113,0.858,115,0.344,119,2.764,121,0.885,123,1.109,125,2.277,141,0.464,164,1.696,166,2.107,168,1.372,169,1.056,172,0.813,180,0.948,196,1.056,197,1.372,222,1.255,242,1.372,259,1.191,261,0.948,267,1.191,268,1.914,278,1.191,290,1.914,300,1.191,302,1.191,304,1.523,306,1.191,311,2.395,325,1.056,330,1.191,333,0.948,336,0.948,343,1.191,346,2.747,351,1.191,356,1.801,363,1.191,368,1.914,372,1.191,374,1.191,375,1.378,379,1.191,381,1.191,383,1.191,385,1.191,387,1.191,389,1.191,391,1.191,393,1.191,419,1.573,455,1.914,457,0.948,473,1.191,484,1.191,485,1.191,621,3.165,671,1.523,695,1.914,696,2.205,701,2.764,728,2.764,729,4.379,730,4.595,737,3.165,738,3.467,740,3.165,743,2.764,746,2.205,757,1.191,768,1.647,769,1.647,770,3.799,771,2.646,772,1.647,773,1.647,774,2.646,775,1.647,776,2.646,777,1.647,778,1.647,779,2.646,780,1.647,781,3.799,782,2.646,783,2.646,784,1.647,785,1.647,786,4.445,787,3.318,788,1.647,789,1.647,790,3.318,791,1.647,792,1.647,793,1.647,794,5.643,795,3.318,796,3.318,797,1.647,798,1.647,799,4.672,800,1.647,801,1.647,802,1.647,803,1.647,804,3.799,805,3.318,806,3.318,807,2.646,808,1.647,809,2.646,810,2.646,811,3.799,812,2.646,813,3.318,814,1.647,815,1.647,816,1.647,817,3.318,818,2.646,819,1.647,820,1.647,821,3.318,822,1.647,823,2.646,824,2.646,825,1.647,826,1.647,827,1.647,828,1.647,829,2.646,830,1.647,831,1.647,832,2.646,833,1.647,834,1.647,835,3.318,836,1.647,837,1.647,838,4.162,839,2.646,840,1.647,841,1.647,842,1.647,843,2.646,844,5.144,845,3.799,846,1.647,847,3.318,848,4.858,849,1.647,850,2.646,851,2.646,852,1.647,853,1.647,854,1.647,855,1.647,856,1.647,857,1.647,858,2.646,859,1.647,860,3.318,861,1.647,862,1.647,863,1.647,864,1.647,865,1.647,866,2.646,867,3.318,868,1.647,869,3.703,870,2.646,871,1.647,872,1.647,873,1.647,874,1.647,875,1.647,876,2.646,877,1.647,878,1.647,879,1.647,880,1.647,881,1.647,882,1.647,883,1.647,884,2.764,885,1.647,886,1.647,887,1.647,888,1.647,889,1.647,890,1.647,891,1.647,892,1.647,893,1.647,894,2.646,895,1.647,896,1.647,897,2.646,898,1.372,899,1.647,900,1.647,901,1.647,902,1.647,903,1.647,904,2.205,905,1.647,906,1.647,907,1.647,908,2.646,909,1.647,910,2.646,911,1.647,912,1.647,913,1.647,914,2.646,915,1.647,916,1.647,917,1.647,918,1.647,919,2.646,920,2.646,921,2.646,922,1.647,923,2.646,924,1.647,925,1.647,926,1.647,927,2.646,928,1.647,929,2.646,930,1.647,931,1.647,932,2.646,933,1.647,934,1.647,935,2.646,936,1.647,937,2.646,938,1.647,939,1.647,940,1.647,941,2.646,942,1.647,943,1.647,944,1.647,945,1.647,946,1.647,947,3.165,948,1.647,949,1.647,950,1.647,951,1.647,952,1.647,953,1.647,954,1.647,955,1.647,956,1.647,957,2.646,958,2.646,959,2.646,960,1.647,961,1.647,962,1.647,963,1.647,964,2.646,965,1.647,966,1.647,967,1.647,968,1.647,969,1.647,970,1.647,971,1.647,972,1.647,973,1.647,974,1.647,975,1.647,976,2.646,977,3.799,978,3.318,979,3.799,980,2.646,981,2.646,982,1.647,983,1.647,984,1.647,985,3.318,986,1.647,987,1.647,988,3.318,989,1.647,990,1.647,991,1.647,992,1.647,993,1.647,994,1.647,995,1.647,996,1.647,997,1.647,998,1.647,999,1.647,1000,1.647,1001,2.764,1002,2.205,1003,1.647,1004,1.647,1005,1.647,1006,1.647,1007,1.647,1008,1.647,1009,1.647,1010,1.647,1011,1.647,1012,1.647,1013,1.647,1014,1.647,1015,1.647,1016,1.647,1017,1.647,1018,1.647,1019,1.647,1020,1.647,1021,1.647,1022,2.646,1023,2.646,1024,1.647,1025,1.647,1026,1.647,1027,1.647,1028,1.647,1029,1.647,1030,1.647,1031,1.647,1032,1.647,1033,1.647,1034,1.647]],["title/modules.html",[73,1.862]],["body/modules.html",[15,0.029,69,0.024,70,0.029,71,0.024,72,2.718,73,2.046,83,2.718,84,2.46,85,2.46,86,2.718,947,5.07,1035,6.086,1036,6.086,1037,6.205,1038,4.724,1039,4.724]],["title/overview.html",[1040,3.581]],["body/overview.html",[2,1.838,15,0.033,36,0.918,48,2.816,69,0.02,70,0.025,71,0.02,72,3.65,73,1.68,74,1.68,75,2.231,76,2.231,77,2.231,78,1.838,79,2.02,80,3.23,81,3.23,82,3.23,83,3.631,84,3.057,85,3.173,86,3.111,87,2.832,88,2.231,89,2.02,101,1.604,161,2.231,209,2.563,214,2.037,228,3.23,230,3.23,231,3.111,314,3.23,315,3.23,321,1.68,404,2.231,628,3.23,629,3.23,630,3.23,1040,3.23,1041,3.877,1042,3.877,1043,4.921,1044,3.877]],["title/miscellaneous/typealiases.html",[762,1.376,1045,3.794]],["body/miscellaneous/typealiases.html",[9,0.639,15,0.029,69,0.025,70,0.029,71,0.025,115,0.639,164,3.153,668,3.644,671,2.831,687,3.557,693,3.557,762,2.562,1046,4.919,1047,4.919]],["title/miscellaneous/variables.html",[333,2.183,762,1.376]],["body/miscellaneous/variables.html",[7,0.613,8,1.964,9,0.398,15,0.034,18,1.763,27,0.604,36,0.726,42,1.268,57,1.188,64,0.912,69,0.016,70,0.022,71,0.016,92,2.457,110,1.91,113,2.194,114,3.085,115,0.789,141,0.864,166,1.453,180,1.763,181,1.216,261,1.763,318,4.009,333,1.763,338,3.523,339,1.596,356,2.923,378,2.216,469,2.216,513,2.216,668,2.7,671,1.763,675,1.763,680,3.046,681,3.046,693,2.216,697,2.553,699,2.553,700,3.509,703,4.009,704,3.509,705,3.509,706,3.509,707,3.509,708,3.509,710,2.216,716,2.553,717,4.317,718,4.317,719,2.553,757,2.216,762,1.596,764,2.553,869,2.553,884,3.509,898,2.553,904,2.553,1001,2.553,1002,4.79,1048,4.212,1049,5.749,1050,4.212,1051,5.432,1052,3.064,1053,3.064,1054,4.212,1055,4.212,1056,4.212,1057,3.064,1058,3.064,1059,3.064,1060,3.064,1061,3.064,1062,3.064,1063,3.064,1064,3.064,1065,3.064,1066,3.064,1067,3.064,1068,3.064]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["0.1.13",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["0.10.1",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["0.2.19",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["1.0",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":823,"title":{},"body":{"index.html":{}}}],["100",{"_index":701,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["14d",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["16.1.7",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["2.17.1",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["201",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":890,"title":{},"body":{"index.html":{}}}],["255",{"_index":568,"title":{},"body":{"classes/Profile.html":{}}}],["3",{"_index":1042,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["3.21.1",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["4",{"_index":1043,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":891,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["401",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":474,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["5",{"_index":1041,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["6.8.2",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["7",{"_index":1044,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["8080",{"_index":999,"title":{},"body":{"index.html":{}}}],["9000",{"_index":852,"title":{},"body":{"index.html":{}}}],["__dirname",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction",{"_index":1013,"title":{},"body":{"index.html":{}}}],["access",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"classes/Roles.html":{},"dependencies.html":{}}}],["accesscontrolmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["account",{"_index":452,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["acguard",{"_index":613,"title":{},"body":{"controllers/ProfileController.html":{}}}],["acguard)@useroles({resource",{"_index":597,"title":{},"body":{"controllers/ProfileController.html":{}}}],["action",{"_index":598,"title":{},"body":{"controllers/ProfileController.html":{}}}],["acts",{"_index":1012,"title":{},"body":{"index.html":{}}}],["actual",{"_index":906,"title":{},"body":{"index.html":{}}}],["address",{"_index":901,"title":{},"body":{"index.html":{}}}],["admin",{"_index":765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["against",{"_index":368,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["aliases",{"_index":1046,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":388,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["alphanumeric",{"_index":887,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1027,"title":{},"body":{"index.html":{}}}],["angular",{"_index":779,"title":{},"body":{"index.html":{}}}],["another",{"_index":456,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["any'})@apiresponse({status",{"_index":600,"title":{},"body":{"controllers/ProfileController.html":{}}}],["anything",{"_index":969,"title":{},"body":{"index.html":{}}}],["api",{"_index":1002,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api/auth",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/docs",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/profile",{"_index":593,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["apimodelproperty",{"_index":526,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apimodelproperty()@isemail()@isnotempty",{"_index":547,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty()@isnotempty()@minlength(8",{"_index":553,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty()@matches(/^[a",{"_index":549,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty({required",{"_index":520,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apiresponse",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apis",{"_index":1006,"title":{},"body":{"index.html":{}}}],["apiusetags",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apiusetags('authentication",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags('profile",{"_index":616,"title":{},"body":{"controllers/ProfileController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/Roles.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["app.register(fastifyratelimiter",{"_index":934,"title":{},"body":{"index.html":{}}}],["app.register(headers",{"_index":933,"title":{},"body":{"index.html":{}}}],["app.roles",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"classes/Roles.html":{}}}],["app.service",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.use",{"_index":940,"title":{},"body":{"index.html":{}}}],["app.use(headers",{"_index":939,"title":{},"body":{"index.html":{}}}],["app/roles.entity",{"_index":422,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["app_env",{"_index":372,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["app_url",{"_index":169,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["applications",{"_index":776,"title":{},"body":{"index.html":{}}}],["applied",{"_index":355,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["appmodule",{"_index":72,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["approles",{"_index":461,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"miscellaneous/enumerations.html":{}}}],["approles.admin",{"_index":662,"title":{},"body":{"classes/Roles.html":{}}}],["appservice",{"_index":48,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appurl",{"_index":173,"title":{},"body":{"injectables/AppService.html":{}}}],["args",{"_index":694,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["array",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":337,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["async",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":677,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["auth.controller",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/payload/register.payload",{"_index":421,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["authcontroller",{"_index":176,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["authenticating",{"_index":894,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["authmodule",{"_index":83,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1034,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice",{"_index":209,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1039,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":466,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["await",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["backend",{"_index":785,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1028,"title":{},"body":{"index.html":{}}}],["bad",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":415,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["base",{"_index":880,"title":{},"body":{"index.html":{}}}],["based",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Roles.html":{}}}],["bearer",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["before",{"_index":573,"title":{},"body":{"classes/Profile.html":{}}}],["being",{"_index":952,"title":{},"body":{"index.html":{}}}],["below",{"_index":817,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":913,"title":{},"body":{"index.html":{}}}],["between",{"_index":920,"title":{},"body":{"index.html":{}}}],["beware",{"_index":659,"title":{},"body":{"classes/Roles.html":{}}}],["bloated",{"_index":950,"title":{},"body":{"index.html":{}}}],["body",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{}}}],["boilerplate",{"_index":781,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":347,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["bootstrap",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["both",{"_index":811,"title":{},"body":{"index.html":{}}}],["box",{"_index":790,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1037,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1035,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":771,"title":{},"body":{"index.html":{}}}],["bypass",{"_index":827,"title":{},"body":{"index.html":{}}}],["callback",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cascade",{"_index":655,"title":{},"body":{"classes/Roles.html":{}}}],["change",{"_index":919,"title":{},"body":{"index.html":{}}}],["changed",{"_index":915,"title":{},"body":{"index.html":{}}}],["check",{"_index":397,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["checks",{"_index":342,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["choice",{"_index":809,"title":{},"body":{"index.html":{}}}],["choose",{"_index":455,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["choosing",{"_index":910,"title":{},"body":{"index.html":{}}}],["class",{"_index":56,"title":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":321,"title":{},"body":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":314,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":315,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":628,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":629,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":630,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["code",{"_index":923,"title":{},"body":{"index.html":{}}}],["column",{"_index":560,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["column({name",{"_index":566,"title":{},"body":{"classes/Profile.html":{}}}],["column({type",{"_index":657,"title":{},"body":{"classes/Roles.html":{}}}],["column({unique",{"_index":581,"title":{},"body":{"classes/Profile.html":{}}}],["comes",{"_index":786,"title":{},"body":{"index.html":{}}}],["command",{"_index":838,"title":{},"body":{"index.html":{}}}],["completed",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["completed'})@apiresponse({status",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["compose",{"_index":810,"title":{},"body":{"index.html":{}}}],["config",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["config.service",{"_index":317,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":84,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":101,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["configservice('.env",{"_index":320,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('db_database",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('webtoken_secret_key",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.isenv('dev",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.validateinput(config",{"_index":366,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["configuration",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":1020,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":855,"title":{},"body":{"index.html":{}}}],["connection",{"_index":893,"title":{},"body":{"index.html":{}}}],["connections",{"_index":905,"title":{},"body":{"index.html":{}}}],["console",{"_index":932,"title":{},"body":{"index.html":{}}}],["const",{"_index":172,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"index.html":{}}}],["constructor",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["constructor(config",{"_index":163,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(configservice",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(filepath",{"_index":327,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["constructor(jwtservice",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["constructor(profilerepository",{"_index":636,"title":{},"body":{"injectables/ProfileService.html":{}}}],["contain",{"_index":331,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["container",{"_index":863,"title":{},"body":{"index.html":{}}}],["control",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{},"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["controller('api/auth",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('api/profile",{"_index":617,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["corresponding",{"_index":970,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":695,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":836,"title":{},"body":{"index.html":{}}}],["create",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["create(payload",{"_index":450,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["created",{"_index":449,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["createlogger(loggeropts",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('profiles",{"_index":440,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["creates",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["createtoken",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["createtoken(undefined",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["createwinstonasyncproviders",{"_index":680,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonasyncproviders(options",{"_index":685,"title":{},"body":{"modules/WinstonModule.html":{}}}],["createwinstonproviders",{"_index":681,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonproviders(options",{"_index":684,"title":{},"body":{"modules/WinstonModule.html":{}}}],["crud",{"_index":410,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["crypto",{"_index":413,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["crypto.createhmac('sha256",{"_index":445,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{}}}],["current",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currently",{"_index":454,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":473,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["daily",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":431,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["database",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["databases",{"_index":1015,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":393,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_host",{"_index":389,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_password",{"_index":387,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_port",{"_index":391,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_type",{"_index":383,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_username",{"_index":385,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["dd",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["declaring",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}}}],["dedicated",{"_index":1008,"title":{},"body":{"index.html":{}}}],["default",{"_index":356,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultmeta",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{}}}],["delete",{"_index":486,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["delete(':username",{"_index":625,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username')@useguards(undefined",{"_index":596,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":487,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["deleted",{"_index":488,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["deleted.affected",{"_index":490,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["demand",{"_index":990,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":74,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploying",{"_index":858,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":832,"title":{},"body":{"index.html":{}}}],["describe",{"_index":1004,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":807,"title":{},"body":{"index.html":{}}}],["detached",{"_index":864,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":926,"title":{},"body":{"index.html":{}}}],["details",{"_index":1018,"title":{},"body":{"index.html":{}}}],["determines",{"_index":877,"title":{},"body":{"index.html":{}}}],["dev",{"_index":879,"title":{},"body":{"index.html":{}}}],["development",{"_index":850,"title":{},"body":{"index.html":{}}}],["different",{"_index":903,"title":{},"body":{"index.html":{}}}],["directory",{"_index":861,"title":{},"body":{"index.html":{}}}],["docker",{"_index":794,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":870,"title":{},"body":{"index.html":{}}}],["docs",{"_index":988,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":696,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":854,"title":{},"body":{"index.html":{}}}],["done",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dotenv",{"_index":359,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["download",{"_index":843,"title":{},"body":{"index.html":{}}}],["dto",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["dynamicmodule",{"_index":672,"title":{},"body":{"modules/WinstonModule.html":{}}}],["e2e",{"_index":980,"title":{},"body":{"index.html":{}}}],["each",{"_index":942,"title":{},"body":{"index.html":{}}}],["edit",{"_index":475,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["edit(payload",{"_index":477,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["efficient",{"_index":772,"title":{},"body":{"index.html":{}}}],["email",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["employs",{"_index":571,"title":{},"body":{"classes/Profile.html":{}}}],["empty",{"_index":896,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":885,"title":{},"body":{"index.html":{}}}],["end",{"_index":996,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":898,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ensures",{"_index":350,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["entities",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":559,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["entity{.ts,.js",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":462,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["enumerations",{"_index":763,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":346,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["env.example",{"_index":837,"title":{},"body":{"index.html":{}}}],["envconfig",{"_index":323,"title":{"interfaces/EnvConfig.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["environment",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["envvarsschema",{"_index":369,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envvarsschema.validate",{"_index":399,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error(`config",{"_index":400,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error.message",{"_index":401,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["especially",{"_index":951,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":583,"title":{},"body":{"classes/Profile.html":{}}}],["exec",{"_index":978,"title":{},"body":{"index.html":{}}}],["execute",{"_index":859,"title":{},"body":{"index.html":{}}}],["executing",{"_index":829,"title":{},"body":{"index.html":{}}}],["exist",{"_index":484,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["existing",{"_index":840,"title":{},"body":{"index.html":{}}}],["exists",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["exp",{"_index":515,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expire",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["expires",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expiresin",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiresprettyprint",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["export",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["exports",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"overview.html":{}}}],["exposed",{"_index":851,"title":{},"body":{"index.html":{}}}],["express",{"_index":729,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extends",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["extractjwt",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":509,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factory",{"_index":690,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["false",{"_index":511,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fastify",{"_index":730,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastifyadapter",{"_index":927,"title":{},"body":{"index.html":{}}}],["fastifyratelimiter",{"_index":930,"title":{},"body":{"index.html":{}}}],["features",{"_index":789,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":606,"title":{},"body":{"controllers/ProfileController.html":{}}}],["fetches",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["field",{"_index":523,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["fields",{"_index":448,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["filepath",{"_index":329,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["files",{"_index":997,"title":{},"body":{"index.html":{}}}],["folder",{"_index":994,"title":{},"body":{"index.html":{}}}],["follow",{"_index":814,"title":{},"body":{"index.html":{}}}],["following",{"_index":860,"title":{},"body":{"index.html":{}}}],["format",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["formats",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["forroot",{"_index":666,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forroot(options",{"_index":667,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync",{"_index":673,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync(options",{"_index":674,"title":{},"body":{"modules/WinstonModule.html":{}}}],["found",{"_index":621,"title":{},"body":{"controllers/ProfileController.html":{},"index.html":{}}}],["framework",{"_index":770,"title":{},"body":{"index.html":{}}}],["free",{"_index":819,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":537,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":995,"title":{},"body":{"index.html":{}}}],["fs",{"_index":362,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["function",{"_index":689,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["further",{"_index":1017,"title":{},"body":{"index.html":{}}}],["generate",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["generated",{"_index":989,"title":{},"body":{"index.html":{}}}],["get(':username",{"_index":618,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get(':username')@useguards(undefined)@apiresponse({status",{"_index":605,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('request/user",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["get('request/user')@useguards(undefined)@apiresponse({status",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@useguards(undefined)@apiresponse({status",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["get(id",{"_index":432,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["get(key",{"_index":334,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["getbyusername",{"_index":634,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusername(username",{"_index":435,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getbyusernameandpass",{"_index":635,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass(username",{"_index":438,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getone",{"_index":447,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getprofile",{"_index":594,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(@param('username",{"_index":619,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(username",{"_index":604,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getrequestuser",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getrequestuser(@req",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["getrequestuser(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":766,"title":{"index.html":{}},"body":{}}],["github",{"_index":986,"title":{},"body":{"index.html":{}}}],["given",{"_index":339,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":678,"title":{},"body":{"modules/WinstonModule.html":{}}}],["grabs",{"_index":539,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["graph",{"_index":1038,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":414,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["grow",{"_index":1024,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":361,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["hash",{"_index":540,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{}}}],["hashed",{"_index":437,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["header",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":929,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":777,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":740,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":1032,"title":{},"body":{"index.html":{}}}],["host",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":998,"title":{},"body":{"index.html":{}}}],["hour",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["hours",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["hrf",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["http",{"_index":469,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:3306",{"_index":873,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":872,"title":{},"body":{"index.html":{}}}],["http://localhost:9000",{"_index":871,"title":{},"body":{"index.html":{}}}],["https",{"_index":378,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["iat",{"_index":514,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["identifier",{"_index":697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["igenericmessagebody",{"_index":407,"title":{"interfaces/IGenericMessageBody.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":510,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":535,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["imports",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}}}],["including",{"_index":354,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":405,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["indicating",{"_index":888,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["inject",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inject('winston",{"_index":171,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":160,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["injectables",{"_index":161,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"overview.html":{}}}],["injected",{"_index":332,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["injecting",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectrepository",{"_index":417,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(profile",{"_index":427,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(roles",{"_index":428,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["inspired",{"_index":778,"title":{},"body":{"index.html":{}}}],["instead",{"_index":916,"title":{},"body":{"index.html":{}}}],["interface",{"_index":284,"title":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":404,"title":{},"body":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["ip",{"_index":943,"title":{},"body":{"index.html":{}}}],["iprofile",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["isalphanumeric",{"_index":527,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isemail",{"_index":556,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isenv",{"_index":324,"title":{},"body":{"classes/ConfigService.html":{}}}],["isenv(env",{"_index":340,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["isnotempty",{"_index":528,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["it's",{"_index":889,"title":{},"body":{"index.html":{}}}],["itokenreturnbody",{"_index":210,"title":{"interfaces/ITokenReturnBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["javascript",{"_index":353,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi",{"_index":360,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default('8889",{"_index":392,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(1800",{"_index":382,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.object",{"_index":371,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.objectschema",{"_index":370,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('localhost",{"_index":390,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('mariadb",{"_index":384,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('nest",{"_index":394,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('root",{"_index":386,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().required",{"_index":380,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().uri",{"_index":376,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["join",{"_index":1030,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":508,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["jwtstrategy",{"_index":231,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":458,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["keepconnectionalive",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":336,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":480,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["layer",{"_index":1014,"title":{},"body":{"index.html":{}}}],["leave",{"_index":949,"title":{},"body":{"index.html":{}}}],["left",{"_index":895,"title":{},"body":{"index.html":{}}}],["legend",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["length",{"_index":567,"title":{},"body":{"classes/Profile.html":{}}}],["level",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":972,"title":{},"body":{"index.html":{}}}],["license",{"_index":1033,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1023,"title":{},"body":{"index.html":{}}}],["limit",{"_index":738,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["lines",{"_index":922,"title":{},"body":{"index.html":{}}}],["loads",{"_index":862,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":805,"title":{},"body":{"index.html":{}}}],["locally",{"_index":797,"title":{},"body":{"index.html":{}}}],["location",{"_index":1010,"title":{},"body":{"index.html":{}}}],["logger",{"_index":164,"title":{},"body":{"injectables/AppService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loggeroptions",{"_index":693,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loggeropts",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":787,"title":{},"body":{"index.html":{}}}],["login",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{}}}],["login(@body",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["login/register",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["loginpayload",{"_index":185,"title":{"classes/LoginPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"coverage.html":{}}}],["logs",{"_index":168,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["logs/application",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["mac",{"_index":820,"title":{},"body":{"index.html":{}}}],["made",{"_index":782,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":924,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":881,"title":{},"body":{"index.html":{}}}],["make",{"_index":795,"title":{},"body":{"index.html":{}}}],["making",{"_index":459,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["manual",{"_index":833,"title":{},"body":{"index.html":{}}}],["many",{"_index":579,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["manytoone",{"_index":661,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(type",{"_index":663,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(undefined",{"_index":653,"title":{},"body":{"classes/Roles.html":{}}}],["mapping",{"_index":363,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["mariadb",{"_index":812,"title":{},"body":{"index.html":{}}}],["matches",{"_index":344,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matches(/^[a",{"_index":557,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matching",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor((ntime",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["math.floor(ntime",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["max",{"_index":935,"title":{},"body":{"index.html":{}}}],["maxfiles",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":412,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["metadata",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["method",{"_index":513,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["minlength",{"_index":529,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["minlength(8",{"_index":531,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["mins",{"_index":892,"title":{},"body":{"index.html":{}}}],["minute",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["minutes",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["miscellaneous",{"_index":762,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1022,"title":{},"body":{"index.html":{}}}],["mm",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":865,"title":{},"body":{"index.html":{}}}],["models",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["module",{"_index":36,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modulemetadata",{"_index":691,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["modules",{"_index":73,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":967,"title":{},"body":{"index.html":{}}}],["more",{"_index":1031,"title":{},"body":{"index.html":{}}}],["moving",{"_index":948,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":968,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":476,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["mysql",{"_index":746,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["mysql/mariadb",{"_index":964,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":974,"title":{},"body":{"index.html":{}}}],["needed",{"_index":351,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["nest",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{},"index.html":{}}}],["nestfactory.create",{"_index":931,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":938,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":928,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":692,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["nestjs/core",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":728,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/swagger",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["new",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nginx",{"_index":813,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":769,"title":{},"body":{"index.html":{}}}],["non",{"_index":793,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":416,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["note",{"_index":818,"title":{},"body":{"index.html":{}}}],["npm",{"_index":844,"title":{},"body":{"index.html":{}}}],["ntime",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["number",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["number(time",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["object",{"_index":330,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["object.keys(payload).foreach(key",{"_index":479,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["occurs",{"_index":956,"title":{},"body":{"index.html":{}}}],["offers",{"_index":911,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":654,"title":{},"body":{"classes/Roles.html":{}}}],["one",{"_index":457,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"index.html":{}}}],["ones",{"_index":925,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":584,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(type",{"_index":588,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(undefined",{"_index":575,"title":{},"body":{"classes/Profile.html":{}}}],["open",{"_index":1001,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["operating",{"_index":808,"title":{},"body":{"index.html":{}}}],["operation",{"_index":411,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["operations",{"_index":908,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["options",{"_index":671,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.imports",{"_index":686,"title":{},"body":{"modules/WinstonModule.html":{}}}],["options.inject",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.usefactory",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":816,"title":{},"body":{"index.html":{}}}],["over",{"_index":914,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1040,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":722,"title":{"dependencies.html":{}},"body":{}}],["package.jsoncomes",{"_index":946,"title":{},"body":{"index.html":{}}}],["pages",{"_index":987,"title":{},"body":{"index.html":{}}}],["panel",{"_index":802,"title":{},"body":{"index.html":{}}}],["param",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["param('username",{"_index":626,"title":{},"body":{"controllers/ProfileController.html":{}}}],["parameter",{"_index":345,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["parse",{"_index":358,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parse(fs.readfilesync(filepath",{"_index":364,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["partial",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["particular",{"_index":460,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["passport",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{}}}],["passportmodule.register",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":506,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["password).digest('hex",{"_index":446,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["password.transformer",{"_index":585,"title":{},"body":{"classes/Profile.html":{}}}],["passwords",{"_index":572,"title":{},"body":{"classes/Profile.html":{}}}],["passwordtransformer",{"_index":532,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["patch",{"_index":546,"title":{},"body":{"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{}}}],["patch()@useguards(undefined)@useroles({resource",{"_index":610,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile",{"_index":595,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(@body",{"_index":623,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(payload",{"_index":609,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofilepayload",{"_index":423,"title":{"classes/PatchProfilePayload.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["paylaod",{"_index":519,"title":{},"body":{"classes/LoginPayload.html":{}}}],["payload",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{}}}],["payload/login.payload",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["payload/patch.profile.payload",{"_index":424,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["payload/register.payload",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["payload[key",{"_index":482,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["per",{"_index":945,"title":{},"body":{"index.html":{}}}],["perform",{"_index":907,"title":{},"body":{"index.html":{}}}],["performance",{"_index":912,"title":{},"body":{"index.html":{}}}],["permit",{"_index":660,"title":{},"body":{"classes/Roles.html":{}}}],["personal",{"_index":841,"title":{},"body":{"index.html":{}}}],["pg",{"_index":472,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["pick",{"_index":688,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["please",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["populated",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["port",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["ports",{"_index":902,"title":{},"body":{"index.html":{}}}],["possession",{"_index":599,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":966,"title":{},"body":{"index.html":{}}}],["pre",{"_index":846,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["prerequisite",{"_index":828,"title":{},"body":{"index.html":{}}}],["prerequisites",{"_index":792,"title":{},"body":{"index.html":{}}}],["prettyprintseconds",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["prettyprintseconds(time",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["primarygeneratedcolumn",{"_index":563,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["private",{"_index":170,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["pro",{"_index":824,"title":{},"body":{"index.html":{}}}],["procedure",{"_index":815,"title":{},"body":{"index.html":{}}}],["proceed",{"_index":917,"title":{},"body":{"index.html":{}}}],["prod",{"_index":374,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["produce",{"_index":993,"title":{},"body":{"index.html":{}}}],["production",{"_index":847,"title":{},"body":{"index.html":{}}}],["profile",{"_index":218,"title":{"classes/Profile.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{}}}],["profile.controller",{"_index":632,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.entity",{"_index":420,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["profile.roles",{"_index":664,"title":{},"body":{"classes/Roles.html":{}}}],["profile.service",{"_index":615,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.entity",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Roles.html":{}}}],["profile/profile.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["profile/profile.service",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["profile[key",{"_index":481,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profilecontroller",{"_index":591,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":85,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":425,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profiles",{"_index":586,"title":{},"body":{"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/Roles.html":{}}}],["profiles.password",{"_index":442,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profileservice",{"_index":214,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":768,"title":{},"body":{"index.html":{}}}],["project",{"_index":867,"title":{},"body":{"index.html":{}}}],["promise",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["properties",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["protocol",{"_index":468,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["prototype",{"_index":784,"title":{},"body":{"index.html":{}}}],["provide",{"_index":318,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":453,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["provider",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["provides",{"_index":1007,"title":{},"body":{"index.html":{}}}],["public",{"_index":683,"title":{},"body":{"modules/WinstonModule.html":{}}}],["purge",{"_index":957,"title":{},"body":{"index.html":{}}}],["purger",{"_index":954,"title":{},"body":{"index.html":{}}}],["queried",{"_index":430,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["quick",{"_index":868,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":783,"title":{},"body":{"index.html":{}}}],["r",{"_index":471,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["random",{"_index":886,"title":{},"body":{"index.html":{}}}],["rate",{"_index":737,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ratelimiter",{"_index":937,"title":{},"body":{"index.html":{}}}],["react",{"_index":856,"title":{},"body":{"index.html":{}}}],["read",{"_index":876,"title":{},"body":{"index.html":{}}}],["readable",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["readonly",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["received",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["received'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["recommended",{"_index":897,"title":{},"body":{"index.html":{}}}],["records",{"_index":491,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["reflect",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterPayload.html":{}}}],["register(@body",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["registerpayload",{"_index":203,"title":{"classes/RegisterPayload.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"coverage.html":{}}}],["registration",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":1011,"title":{},"body":{"index.html":{}}}],["relations",{"_index":434,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["relationship",{"_index":580,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["remove",{"_index":603,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removed",{"_index":883,"title":{},"body":{"index.html":{}}}],["removes",{"_index":602,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removing",{"_index":958,"title":{},"body":{"index.html":{}}}],["replace",{"_index":839,"title":{},"body":{"index.html":{}}}],["repository",{"_index":418,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["represent",{"_index":578,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["represents",{"_index":395,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{}}}],["req",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":944,"title":{},"body":{"index.html":{}}}],["required",{"_index":375,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["reset",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["resolve",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["resource",{"_index":622,"title":{},"body":{"controllers/ProfileController.html":{}}}],["respectively",{"_index":874,"title":{},"body":{"index.html":{}}}],["response",{"_index":409,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["restful",{"_index":1005,"title":{},"body":{"index.html":{}}}],["result",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":608,"title":{},"body":{"controllers/ProfileController.html":{}}}],["return",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["rimraf",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":959,"title":{},"body":{"index.html":{}}}],["role",{"_index":589,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["role.profile",{"_index":590,"title":{},"body":{"classes/Profile.html":{}}}],["role.role",{"_index":517,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["roles",{"_index":110,"title":{"classes/Roles.html":{}},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesbuilder",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":426,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["root",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["rotate",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["rotatefile",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["run",{"_index":848,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":470,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["safe",{"_index":853,"title":{},"body":{"index.html":{}}}],["save",{"_index":962,"title":{},"body":{"index.html":{}}}],["saveif",{"_index":961,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":773,"title":{},"body":{"index.html":{}}}],["schema",{"_index":367,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["scheme",{"_index":377,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["schemes",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["second",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["seconds",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["secret",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["secretorkey",{"_index":512,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":788,"title":{},"body":{"index.html":{}}}],["server",{"_index":774,"title":{},"body":{"index.html":{}}}],["service",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["set",{"_index":343,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["setparameter",{"_index":444,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["setparameter('username",{"_index":443,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["settings",{"_index":842,"title":{},"body":{"index.html":{}}}],["short",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":882,"title":{},"body":{"index.html":{}}}],["side",{"_index":775,"title":{},"body":{"index.html":{}}}],["signed",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["signoptions",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":991,"title":{},"body":{"index.html":{}}}],["sits",{"_index":899,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["specification",{"_index":1003,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":1026,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":965,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":973,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":764,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.constants.ts",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.interfaces.ts",{"_index":1047,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../winston.providers.ts",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/modules/app/app.controller.ts:26",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:39",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.module.ts",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/app/app.roles.ts",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.service.ts",{"_index":162,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/modules/app/app.service.ts:24",{"_index":167,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/app.service.ts:9",{"_index":165,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/roles.entity.ts",{"_index":651,"title":{},"body":{"classes/Roles.html":{},"coverage.html":{}}}],["src/modules/app/roles.entity.ts:14",{"_index":652,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:25",{"_index":658,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:31",{"_index":656,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:56",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:79",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:95",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:12",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:35",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/payload/login.payload.ts",{"_index":518,"title":{},"body":{"classes/LoginPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/login.payload.ts:16",{"_index":525,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/login.payload.ts:26",{"_index":522,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts",{"_index":644,"title":{},"body":{"classes/RegisterPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/register.payload.ts:22",{"_index":646,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:32",{"_index":650,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:42",{"_index":648,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:52",{"_index":649,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/config/config.module.ts",{"_index":316,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/modules/config/config.service.ts",{"_index":322,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/modules/config/config.service.ts:19",{"_index":328,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:36",{"_index":349,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:78",{"_index":335,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:8",{"_index":406,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/modules/config/config.service.ts:87",{"_index":341,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/profile/password.transformer.ts",{"_index":533,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["src/modules/profile/password.transformer.ts:12",{"_index":542,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/password.transformer.ts:20",{"_index":538,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts",{"_index":545,"title":{},"body":{"classes/PatchProfilePayload.html":{},"coverage.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:20",{"_index":548,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:30",{"_index":555,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:38",{"_index":552,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:46",{"_index":554,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/profile.controller.ts",{"_index":592,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/modules/profile/profile.controller.ts:40",{"_index":607,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:64",{"_index":612,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:82",{"_index":601,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.entity.ts",{"_index":558,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/modules/profile/profile.entity.ts:17",{"_index":564,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:23",{"_index":582,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:29",{"_index":565,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:35",{"_index":562,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:41",{"_index":561,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:47",{"_index":577,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:58",{"_index":570,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":631,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":408,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:115",{"_index":640,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:138",{"_index":639,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:30",{"_index":637,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:48",{"_index":641,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:57",{"_index":642,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:67",{"_index":643,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:84",{"_index":638,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/winston/winston.constants.ts",{"_index":716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/winston/winston.interfaces.ts",{"_index":687,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/winston/winston.module.ts",{"_index":665,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:21",{"_index":669,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:35",{"_index":676,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.providers.ts",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":800,"title":{},"body":{"index.html":{}}}],["start",{"_index":804,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":849,"title":{},"body":{"index.html":{}}}],["started",{"_index":767,"title":{"index.html":{}},"body":{}}],["statements",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":325,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"index.html":{}}}],["status",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["steps",{"_index":918,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":507,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":947,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":796,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1036,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":743,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swagger_api_auth_location",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_auth_name",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_current_version",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_description",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_name",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_root",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_schemes",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":485,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["table",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":979,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":983,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":982,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":981,"title":{},"body":{"index.html":{}}}],["testing",{"_index":975,"title":{},"body":{"index.html":{}}}],["tests",{"_index":977,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1025,"title":{},"body":{"index.html":{}}}],["this.appservice.root",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(profile",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('app_url",{"_index":174,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.envconfig",{"_index":365,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig.app_env",{"_index":403,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig[key",{"_index":402,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.expiration",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.getbyusername(payload.username",{"_index":451,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.getbyusername(username",{"_index":478,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.jwtservice.sign",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.logger.info('logging",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["this.prettyprintseconds(this.expiration",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.profilerepository",{"_index":439,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.create",{"_index":465,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.delete",{"_index":489,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.findone",{"_index":436,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.findone(id",{"_index":433,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save",{"_index":464,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save(profile",{"_index":483,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profileservice.create(payload",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.profileservice.delete(username",{"_index":627,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.edit(payload",{"_index":624,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusername(username",{"_index":620,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusernameandpass",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.rolesrepository.save(roles",{"_index":463,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["throw",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["thus",{"_index":953,"title":{},"body":{"index.html":{}}}],["time",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["timediff",{"_index":516,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timewindow",{"_index":936,"title":{},"body":{"index.html":{}}}],["to(value",{"_index":541,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["toolbox",{"_index":826,"title":{},"body":{"index.html":{}}}],["transform",{"_index":543,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":534,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"dependencies.html":{}}}],["transports",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":803,"title":{},"body":{"index.html":{}}}],["true",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":524,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@isemail()@isnotempty",{"_index":645,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":521,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@matches(/^[a",{"_index":647,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["try",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["two",{"_index":921,"title":{},"body":{"index.html":{}}}],["type",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1045,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":985,"title":{},"body":{"index.html":{}}}],["typeorm",{"_index":419,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":633,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forrootasync",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":904,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["types/express",{"_index":960,"title":{},"body":{"index.html":{}}}],["typical",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["typing",{"_index":992,"title":{},"body":{"index.html":{}}}],["ui",{"_index":757,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":576,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["undefined})@exclude",{"_index":569,"title":{},"body":{"classes/Profile.html":{}}}],["unique",{"_index":587,"title":{},"body":{"classes/Profile.html":{}}}],["unit",{"_index":976,"title":{},"body":{"index.html":{}}}],["unused",{"_index":955,"title":{},"body":{"index.html":{}}}],["up",{"_index":866,"title":{},"body":{"index.html":{}}}],["update",{"_index":611,"title":{},"body":{"controllers/ProfileController.html":{}}}],["url",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["url(payload.email",{"_index":467,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["use",{"_index":869,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":884,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["useguards(authguard('jwt",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["user",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["useroles",{"_index":614,"title":{},"body":{"controllers/ProfileController.html":{}}}],["users",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["usevalue",{"_index":319,"title":{},"body":{"modules/ConfigModule.html":{}}}],["using",{"_index":835,"title":{},"body":{"index.html":{}}}],["usually",{"_index":900,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":878,"title":{},"body":{"index.html":{}}}],["utilizing",{"_index":798,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":429,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["valid",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid('dev",{"_index":373,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validate",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":352,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validatedenvconfig",{"_index":398,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateinput",{"_index":326,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":348,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validates",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validateuser",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validateuser(undefined",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":396,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":530,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["value",{"_index":338,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PasswordTransformer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":544,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["values",{"_index":357,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["valuetransformer",{"_index":536,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{},"index.html":{}}}],["variables",{"_index":333,"title":{"miscellaneous/variables.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":1016,"title":{},"body":{"index.html":{}}}],["vm",{"_index":830,"title":{},"body":{"index.html":{}}}],["vue",{"_index":857,"title":{},"body":{"index.html":{}}}],["web",{"_index":799,"title":{},"body":{"index.html":{}}}],["webtoken_expiration_time",{"_index":381,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["webtoken_secret_key",{"_index":379,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["where('profiles.username",{"_index":441,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["whether",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["windowms",{"_index":941,"title":{},"body":{"index.html":{}}}],["windows",{"_index":821,"title":{},"body":{"index.html":{}}}],["winson",{"_index":670,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.interfaces",{"_index":679,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.providers",{"_index":682,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.transports.console",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["winston/winston.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_options",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winston_module_provider",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule",{"_index":86,"title":{"modules/WinstonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["winstonmodule.forrootasync",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleasyncoptions",{"_index":675,"title":{"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmoduleoptions",{"_index":668,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":834,"title":{},"body":{"index.html":{}}}],["work",{"_index":1009,"title":{},"body":{"index.html":{}}}],["workaround",{"_index":825,"title":{},"body":{"index.html":{}}}],["works",{"_index":822,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":971,"title":{},"body":{"index.html":{}}}],["writing",{"_index":574,"title":{},"body":{"classes/Profile.html":{}}}],["x1f3d7",{"_index":909,"title":{},"body":{"index.html":{}}}],["x1f433",{"_index":806,"title":{},"body":{"index.html":{}}}],["x1f465",{"_index":1021,"title":{},"body":{"index.html":{}}}],["x1f4a1",{"_index":984,"title":{},"body":{"index.html":{}}}],["x1f4be",{"_index":963,"title":{},"body":{"index.html":{}}}],["x1f4da",{"_index":780,"title":{},"body":{"index.html":{}}}],["x1f4dd",{"_index":1000,"title":{},"body":{"index.html":{}}}],["x1f50a",{"_index":1019,"title":{},"body":{"index.html":{}}}],["x1f512",{"_index":875,"title":{},"body":{"index.html":{}}}],["x1f680",{"_index":831,"title":{},"body":{"index.html":{}}}],["x1f6e0",{"_index":791,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":801,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":845,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1029,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":551,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["za",{"_index":550,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["zippedarchive",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequestUser\n                            \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequestUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequestUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/user')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:39\n                \n            \n\n\n            \n                \n                    Fetches request metadata\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        the request user populated from the passport module\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:26\n                \n            \n\n\n            \n                \n                    Returns the an environment variable from config file\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application environment url\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param appService\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns the an environment variable from config file\n   * @returns {string} the application environment url\n   */\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  root(): string {\n    return this.appService.root();\n  }\n\n  /**\n   * Fetches request metadata\n   * @param {Req} req the request body\n   * @returns {Partial} the request user populated from the passport module\n   */\n  @Get('request/user')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  getRequestUser(@Req() req): Partial {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            WinstonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as winston from 'winston';\nimport * as rotateFile from 'winston-daily-rotate-file';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '../config/config.module';\nimport { ConfigService } from '../config/config.service';\nimport { AuthModule } from '../auth/auth.module';\nimport { ProfileModule } from '../profile/profile.module';\nimport { WinstonModule } from '../winston/winston.module';\nimport { AccessControlModule } from 'nest-access-control';\nimport { roles } from './app.roles';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + './../**/**.entity{.ts,.js}'],\n          synchronize: configService.isEnv('dev'),\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.isEnv('dev')\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new rotateFile({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AccessControlModule.forRoles(roles),\n    ConfigModule,\n    AuthModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.service.ts\n        \n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/app/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logger service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/app/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetches and logs the APP_URL environment variable from the configuration file.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application url\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '../config/config.service';\nimport { Logger } from 'winston';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {ConfigService} config configuration service\n   * @param {Logger} logger logger service\n   */\n  constructor(\n    private readonly config: ConfigService,\n    @Inject('winston') private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Fetches and logs the APP_URL environment variable from the configuration file.\n   * @returns {string} the application url\n   */\n  root(): string {\n    const appURL = this.config.get('APP_URL');\n    this.logger.info('Logging the APP_URL -> ' + appURL);\n    return appURL;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { AuthService, ITokenReturnBody } from './auth.service';\nimport { LoginPayload } from './payload/login.payload';\nimport { RegisterPayload } from './payload/register.payload';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Authentication Controller\n */\n@ApiUseTags('authentication')\n@Controller('api/auth')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginPayload} payload the login dto\n   */\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginPayload): Promise {\n    const profile = await this.authService.validateUser(payload);\n    return await this.authService.createToken(profile);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterPayload} payload the registration dto\n   */\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterPayload) {\n    const profile = await this.profileService.create(payload);\n    return await this.authService.createToken(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { ProfileModule } from '../profile/profile.module';\nimport { ConfigModule } from '../config/config.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '../config/config.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_SECRET_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n    ConfigModule,\n    ProfileModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [PassportModule.register({ defaultStrategy: 'jwt' })],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Private\n                                prettyPrintSeconds\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                profile service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on IProfile payload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            prettyPrintSeconds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prettyPrintSeconds(time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n                    Formats the time in seconds into human-readable format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        hrf time\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:95\n                \n            \n\n\n            \n                \n                    Validates whether or not the profile exists in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered profile\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                        Time in seconds when the token is to expire\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    email,\n  }: Profile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser({ username, password }: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService('.env'),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Config Service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                isEnv\n                            \n                            \n                                    Private\n                                    Static\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                        Object that will contain the injected environment variables\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:78\n                \n            \n\n\n            \n                \n                    Fetches the key from the configuration file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the associated value for a given key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEnv\n                        \n                        \n                    \n                \n            \n            \n                \nisEnv(env: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:87\n                \n            \n\n\n            \n                \n                    Checks whether the application environment set in the configuration file matches the environment parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not the environment variable matches the application environment\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:36\n                \n            \n\n\n            \n                \n                    Ensures all needed variables are set, and returns the validated JavaScript object\nincluding the applied default values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the configuration object with variables from the configuration file\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        a validated environment configuration object\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Key-value mapping\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGenericMessageBody.html":{"url":"interfaces/IGenericMessageBody.html","title":"interface - IGenericMessageBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGenericMessageBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Models a typical response for a crud operation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status message to return\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   * @returns {Promise} queried profile data\n   */\n  get(id: number): Promise {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   * @returns {Promise} queried profile data\n   */\n  getByUsername(username: string): Promise {\n    return this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} queried profile data\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} created profile data\n   */\n  async create(payload: RegisterPayload): Promise {\n    const profile = await this.getByUsername(payload.username);\n\n    if (profile) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making roles for a particular profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return this.profileRepository.save(\n      this.profileRepository.create({\n        ...payload,\n        roles,\n        avatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const profile = await this.getByUsername(username);\n    if (profile) {\n      Object.keys(payload).forEach(key => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        profile[key] = payload[key];\n      });\n      return this.profileRepository.save(profile);\n    } else {\n      throw new BadRequestException(\n        'The profile with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the crud operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenReturnBody.html":{"url":"interfaces/ITokenReturnBody.html","title":"interface - ITokenReturnBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITokenReturnBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Models a typical Login/Register route return body\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expires\n                                \n                                \n                                        expiresPrettyPrint\n                                \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                    \n                                \n                                \n                                    \n                                        expires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When the token is to expire in seconds\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresPrettyPrint\n                                    \n                                \n                                \n                                    \n                                        expiresPrettyPrint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A human-readable format of expires\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Bearer token\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    email,\n  }: Profile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser({ username, password }: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtPayload, done)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                            JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    done\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to resolve the request user with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not to validate the jwt token\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy, JwtPayload } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ConfigService } from '../config/config.service';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService\n   */\n  constructor(\n    readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_SECRET_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {JwtPayload} jwtPayload validation method for jwt token\n   * @param {any} done callback to resolve the request user with\n   * @returns {Promise} whether or not to validate the jwt token\n   */\n  async validate({ iat, exp, id }: JwtPayload, done): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff  role.role) });\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginPayload.html":{"url":"classes/LoginPayload.html","title":"class - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/login.payload.ts\n        \n\n            \n                Description\n            \n            \n                Login Paylaod Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:26\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:16\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Paylaod Class\n */\nexport class LoginPayload {\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/password.transformer.ts\n        \n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            from\n                        \n                        \n                    \n                \n            \n            \n                \nfrom(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        value to return\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            to\n                        \n                        \n                    \n                \n            \n            \n                \nto(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param value string to hash\n   */\n  to(value) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash\n   * @param value value to return\n   */\n  from(value) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchProfilePayload.html":{"url":"classes/PatchProfilePayload.html","title":"class - PatchProfilePayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchProfilePayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/payload/patch.profile.payload.ts\n        \n\n            \n                Description\n            \n            \n                Patch Profile Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:20\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:38\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:46\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:30\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Patch Profile Payload Class\n */\nexport class PatchProfilePayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.entity.ts\n        \n\n            \n                Description\n            \n            \n                Profile Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Avatar column (gravatar url)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:35\n                            \n                        \n\n                \n                    \n                        Email column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:17\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Name column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'password', length: 255, transformer: undefined})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:58\n                            \n                        \n\n                \n                    \n                        Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Roles[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Column to represent a one to many relationship with the roles entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Username column\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { PasswordTransformer } from './password.transformer';\nimport { Roles } from '../app/roles.entity';\n\n/**\n * Profile Entity Class\n */\n@Entity({\n  name: 'profiles',\n})\nexport class Profile {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Avatar column (gravatar url)\n   */\n  @Column()\n  avatar: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(type => Roles, role => role.profile)\n  roles: Roles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/profile\n            \n\n            \n                Description\n            \n            \n                Profile Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                patchProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(undefined, ACGuard)@UseRoles({resource: 'profiles', action: 'delete', possession: 'any'})@ApiResponse({status: 200, description: 'Delete Profile Request Received'})@ApiResponse({status: 400, description: 'Delete Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:82\n                \n            \n\n\n            \n                \n                    Removes a profile from the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the profile has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Fetch Profile Request Received'})@ApiResponse({status: 400, description: 'Fetch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:40\n                \n            \n\n\n            \n                \n                    Retrieves a particular profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the profile given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patchProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patchProfile(payload: PatchProfilePayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@UseGuards(undefined)@UseRoles({resource: 'profiles', action: 'update', possession: 'any'})@ApiResponse({status: 200, description: 'Patch Profile Request Received'})@ApiResponse({status: 400, description: 'Patch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:64\n                \n            \n\n\n            \n                \n                    Edit a profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ACGuard, UseRoles } from 'nest-access-control';\nimport { ApiBearerAuth, ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { ProfileService, IGenericMessageBody } from './profile.service';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\nimport { Profile } from './profile.entity';\n\n/**\n * Profile Controller\n */\n@ApiBearerAuth()\n@ApiUseTags('profile')\n@Controller('api/profile')\nexport class ProfileController {\n  /**\n   * Constructor\n   * @param profileService\n   */\n  constructor(private readonly profileService: ProfileService) {}\n\n  /**\n   * Retrieves a particular profile\n   * @param username the profile given username to fetch\n   * @returns {Promise} queried profile data\n   */\n  @Get(':username')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Fetch Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Profile Request Failed' })\n  async getProfile(@Param('username') username: string): Promise {\n    const profile = await this.profileService.getByUsername(username);\n    if (!profile) {\n      throw new BadRequestException(\n        'The profile with that username could not be found.',\n      );\n    }\n    return profile;\n  }\n\n  /**\n   * Edit a profile\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  @Patch()\n  @UseGuards(AuthGuard('jwt'))\n  @UseRoles({\n    resource: 'profiles',\n    action: 'update',\n    possession: 'any',\n  })\n  @ApiResponse({ status: 200, description: 'Patch Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Patch Profile Request Failed' })\n  async patchProfile(@Body() payload: PatchProfilePayload): Promise {\n    return await this.profileService.edit(payload);\n  }\n\n  /**\n   * Removes a profile from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the profile has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(AuthGuard('jwt'), ACGuard)\n  @UseRoles({\n    resource: 'profiles',\n    action: 'delete',\n    possession: 'any',\n  })\n  @ApiResponse({ status: 200, description: 'Delete Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete Profile Request Failed' })\n  async delete(\n    @Param('username') username: string,\n  ): Promise {\n    return await this.profileService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { Profile } from './profile.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Roles } from '../app/roles.entity';\nimport { ProfileController } from './profile.controller';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile, Roles])],\n  providers: [ProfileService],\n  exports: [ProfileService],\n  controllers: [ProfileController],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Profile Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:84\n                \n            \n\n\n            \n                \n                    Create a profile with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        profile payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        created profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:138\n                \n            \n\n\n            \n                \n                    Delete profile given a username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the crud operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            edit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchProfilePayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:115\n                \n            \n\n\n            \n                \n                    Edit profile data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:48\n                \n            \n\n\n            \n                \n                    Fetches profile from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUsername\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:57\n                \n            \n\n\n            \n                \n                    Fetches profile from database by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUsernameAndPass\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:67\n                \n            \n\n\n            \n                \n                    Fetches profile by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   * @returns {Promise} queried profile data\n   */\n  get(id: number): Promise {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   * @returns {Promise} queried profile data\n   */\n  getByUsername(username: string): Promise {\n    return this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} queried profile data\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} created profile data\n   */\n  async create(payload: RegisterPayload): Promise {\n    const profile = await this.getByUsername(payload.username);\n\n    if (profile) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making roles for a particular profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return this.profileRepository.save(\n      this.profileRepository.create({\n        ...payload,\n        roles,\n        avatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const profile = await this.getByUsername(username);\n    if (profile) {\n      Object.keys(payload).forEach(key => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        profile[key] = payload[key];\n      });\n      return this.profileRepository.save(profile);\n    } else {\n      throw new BadRequestException(\n        'The profile with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the crud operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterPayload.html":{"url":"classes/RegisterPayload.html","title":"class - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/register.payload.ts\n        \n\n            \n                Description\n            \n            \n                Register Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:22\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:42\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:52\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:32\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Register Payload Class\n */\nexport class RegisterPayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Roles.html":{"url":"classes/Roles.html","title":"class - Roles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/roles.entity.ts\n        \n\n            \n                Description\n            \n            \n                Roles Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                profile\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:14\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Profile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Column to represent a many to one relationship with the profile entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AppRoles\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AppRoles, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { AppRoles } from './app.roles';\nimport { Profile } from '../profile/profile.entity';\n\n/**\n * Roles Entity Class\n */\n@Entity()\nexport class Roles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: AppRoles,\n    default: AppRoles.ADMIN,\n  })\n  role: AppRoles;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(type => Profile, profile => profile.roles, { onDelete: 'CASCADE' })\n  profile: Profile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WinstonModule.html":{"url":"modules/WinstonModule.html","title":"module - WinstonModule","body":"\n                   \n\n\n\n\n    Modules\n    WinstonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/winston/winston.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: WinstonModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:21\n                \n            \n\n\n            \n                \n                    Constructor for winson module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: WinstonModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:35\n                \n            \n\n\n            \n                \n                    Asynchronous constructor for winston module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport {\n  WinstonModuleAsyncOptions,\n  WinstonModuleOptions,\n} from './winston.interfaces';\nimport {\n  createWinstonAsyncProviders,\n  createWinstonProviders,\n} from './winston.providers';\n\n@Global()\n@Module({})\n/**\n * Represents a Winston Module\n */\nexport class WinstonModule {\n  /**\n   * Constructor for winson module\n   * @param options\n   */\n  public static forRoot(options: WinstonModuleOptions): DynamicModule {\n    const providers = createWinstonProviders(options);\n\n    return {\n      module: WinstonModule,\n      providers,\n      exports: providers,\n    };\n  }\n\n  /**\n   * Asynchronous constructor for winston module\n   * @param options\n   */\n  public static forRootAsync(\n    options: WinstonModuleAsyncOptions,\n  ): DynamicModule {\n    const providers = createWinstonAsyncProviders(options);\n\n    return {\n      module: WinstonModule,\n      imports: options.imports,\n      providers,\n      exports: providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WinstonModuleAsyncOptions.html":{"url":"interfaces/WinstonModuleAsyncOptions.html","title":"interface - WinstonModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WinstonModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/winston/winston.interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Asynchronous winston module options\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Providers to inject\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default factory method that returns winston module options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { LoggerOptions } from 'winston';\n\n/**\n * Logger options\n */\nexport type WinstonModuleOptions = LoggerOptions;\n\n/**\n * Asynchronous winston module options\n */\nexport interface WinstonModuleAsyncOptions\n  extends Pick {\n  /**\n   * Default factory method that returns winston module options\n   */\n  useFactory: (\n    ...args: any[]\n  ) => Promise | WinstonModuleOptions;\n\n  /**\n   * Providers to inject\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_AUTH_LOCATION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_AUTH_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_SCHEMES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/app.roles.ts\n            \n            variable\n            roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/roles.entity.ts\n            \n            class\n            Roles\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            interface\n            ITokenReturnBody\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/login.payload.ts\n            \n            class\n            LoginPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/register.payload.ts\n            \n            class\n            RegisterPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            interface\n            EnvConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/profile/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/profile/payload/patch.profile.payload.ts\n            \n            class\n            PatchProfilePayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.entity.ts\n            \n            class\n            Profile\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            interface\n            IGenericMessageBody\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_PROVIDER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.interfaces.ts\n            \n            interface\n            WinstonModuleAsyncOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonAsyncProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonProviders\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : 16.1.7\n        \n            @nestjs/common : 6.8.2\n        \n            @nestjs/core : 6.8.2\n        \n            @nestjs/jwt : 6.1.1\n        \n            @nestjs/passport : 6.1.0\n        \n            @nestjs/platform-express : 6.8.2\n        \n            @nestjs/platform-fastify : 6.8.2\n        \n            @nestjs/swagger : 3.1.0\n        \n            @nestjs/typeorm : 6.2.0\n        \n            class-transformer : 0.2.3\n        \n            class-validator : 0.10.1\n        \n            crypto : 1.0.1\n        \n            dotenv : 8.1.0\n        \n            express-rate-limit : 5.0.0\n        \n            fastify-helmet : 3.0.1\n        \n            fastify-rate-limit : 2.4.0\n        \n            fastify-swagger : 2.4.0\n        \n            gravatar : 1.8.0\n        \n            helmet : 3.21.1\n        \n            mysql : 2.17.1\n        \n            nest-access-control : 2.0.1\n        \n            passport : 0.4.0\n        \n            passport-jwt : 4.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rimraf : 3.0.0\n        \n            rxjs : 6.5.3\n        \n            swagger-ui-express : 4.1.2\n        \n            typeorm : 0.2.19\n        \n            winston : 3.2.1\n        \n            winston-daily-rotate-file : 4.2.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/app/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                        \n                            \n                                 DEFAULT\n                            \n                        \n                        \n                            \n                                Value : DEFAULT\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n&#x1F4DA; Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication, logging, security, and database features out of the box.\n\n&#x1F6E0;️ Prerequisites\nNon Docker\n\nPlease make sure to have MYSQL locally by utilizing a web server stack XAMPP. The control panel can then trigger MYSQL to start on localhost.\n\nDocker &#x1F433;\n\nPlease make sure to have docker desktop on the operating system of choice to quickly compose both MariaDB and Nginx. Then follow the docker procedure outlined below.\n\nNote: Docker Desktop comes free on both Mac and Windows, but it only works with Windows 10 Pro. A workaround is to get Docker Toolbox which will bypass the Windows 10 Pro prerequisite by executing in a VM.\n\n&#x1F680; Deployment\nManual Deployment without Docker\n\nCreate a .env file using the cp .env.example .env command and replace the existing environment variables with personal configuration settings (username and password database).\n\nDownload dependencies using npm i or yarn\n\nStart the app for pre-production using npm run start or npm run start:dev for development (the app will be exposed on the port 9000; safe port that doesn't conflict with React, Angular, or Vue)\n\n\nDeploying with Docker &#x1F433;\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will set up and run the docker project for quick use (building both Dockerfile and Dockerfile-Nginx). Then the web application, Nginx, and MariaDB will be exposed to http://localhost:9000, http://localhost:80, and http://localhost:3306 respectively.\n\n&#x1F512; Environment Configuration\nBy default, the application comes with a config module that will inject the ConfigService to read every environment variable from the .env file.\nAPP_ENV - the application environment it will be executing as, either in development or production. Determines the type of logging options to utilize. Options: dev or prod. \nAPP_URL - the base URL for the application. Made mainly to showcase the ConfigService and can be removed if not used.\nWEBTOKEN_SECRET_KEY - the secret key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this. Not \nWEBTOKEN_EXPIRATION_TIME - the time in seconds indicating when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not recommended).\nDB_HOST - the endpoint where this database sits (usually localhost but can be a static address).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n&#x1F3D7; Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But this can be changed to use Express framework instead of Fastify. Please proceed with the steps below to change between the two.\n\nReplace the following lines of code in the main.ts file with the ones detailed below.\n\n// from (fastify):\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport * as headers from 'fastify-helmet';\nimport * as fastifyRateLimiter from 'fastify-rate-limit';\nconst app = await NestFactory.create(\n  AppModule,\n  new FastifyAdapter({ logger: console }),\n);\napp.register(headers);\napp.register(fastifyRateLimiter, {\n  max: 100,\n  timeWindow: '1 minute',\n});\n\n// to (express):\nimport * as headers from 'helmet';\nimport * as rateLimiter from 'express-rate-limit';\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\napp.use(headers());\napp.use(\n  rateLimiter({\n    windowMs: 60, // 1 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }),\n);Note: The package.jsoncomes with dependencies for both Express and Fastify to support moving between two. But this can leave the project bloated especially when only one web framework is being used. Thus it is recommended that when deploying to production, a purger of unused dependencies occurs. \nIf you choose to use Fastify, this command will purge all of the Express dependencies:\n# removing Express dependencies\n$ npm rm @nestjs/platform-express express-rate-limit helmet swagger-ui-express @types/express --saveIf you choose to use Express, this command will purge all of the Fastify dependencies:\n# removing Fastify dependencies\n$ npm rm @nestjs/platform-fastify fastify-helmet fastify-rate-limit fastify-swagger --save\n&#x1F4BE; Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but support for other database types like SQLite, Postgres, MongoDB, and MSSQL exist. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like sqlite3 if necessary.\n\n\n\n✅ Testing\nDocker &#x1F433;\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n&#x1F4A1; TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, simply, by typing npm run typedocs. This will produce a docs folder with the required front-end files and start hosting on localhost port 8080.\n# generate docs for code\n$ npm run typedocs\n&#x1F4DD; Open API\nOut of the box, the web app comes with an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n&#x1F50A; Logs\nThis boilerplate comes with a Winston module for logging, the configurations for Winston can be found in the app module.\n\n&#x1F465; Support\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\n\nLicense\nNest is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WinstonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            WinstonModuleOptions   (src/.../winston.interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    WinstonModuleOptions\n                \n            \n            \n                \n                    Logger options\n\n                \n            \n            \n                \n                        LoggerOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createWinstonAsyncProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            createWinstonProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_LOCATION   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_NAME   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_CURRENT_VERSION   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_DESCRIPTION   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_NAME   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_ROOT   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_SCHEMES   (src/.../main.ts)\n                        \n                        \n                            WINSTON_MODULE_OPTIONS   (src/.../winston.constants.ts)\n                        \n                        \n                            WINSTON_MODULE_PROVIDER   (src/.../winston.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonAsyncProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  options: WinstonModuleAsyncOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_OPTIONS,\n      useFactory: options.useFactory,\n      inject: options.inject || [],\n    },\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: (loggerOpts: LoggerOptions) => createLogger(loggerOpts),\n      inject: [WINSTON_MODULE_OPTIONS],\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Async constructor for a winston provider\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  loggerOpts: WinstonModuleOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: () => createLogger(loggerOpts),\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Constructor a winston provider\n\n                    \n                \n\n            \n        \n\n    src/modules/app/app.roles.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolesBuilder\n\n                        \n                    \n                    \n                        \n                            Default value : new RolesBuilder()\n                        \n                    \n\n                \n                    \n                        Roles Builder\n\n                    \n                \n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_LOCATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'header'\n                        \n                    \n\n                \n                    \n                        Where the SWAGGER_API_AUTH_NAME will be used in the request\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Authorization'\n                        \n                    \n\n                \n                    \n                        The default authentication method\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_CURRENT_VERSION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n\n                \n                    \n                        Current version of the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_DESCRIPTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API Description'\n                        \n                    \n\n                \n                    \n                        A short description for api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API'\n                        \n                    \n\n                \n                    \n                        The name given to the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_ROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'api/docs'\n                        \n                    \n\n                \n                    \n                        The endpoint for open api ui\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_SCHEMES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Default value : ['http', 'https']\n                        \n                    \n\n                \n                    \n                        Types of api schemes\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'WinstonModuleOptions'\n                        \n                    \n\n                \n                    \n                        Token for the type of configuration to be used when declaring in the app module\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_PROVIDER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'winston'\n                        \n                    \n\n                \n                    \n                        An identifier to use for injecting the winston provider\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
