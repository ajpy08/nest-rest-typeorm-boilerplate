var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.686,1,1.894]],["body/controllers/AppController.html",[0,2.57,1,2.251,2,1.391,3,0.309,4,0.267,5,0.187,6,2.065,7,1.018,8,2.886,9,0.402,10,1.331,11,1.901,12,3.735,13,3.604,14,3.815,15,2.065,16,1.449,17,2.108,18,0.039,19,2.502,20,2.502,21,3.283,22,3.604,23,3.604,24,2.502,25,4.621,26,3.475,27,3.604,28,3.815,29,3.815,30,0.95,31,2.502,32,4.211,33,4.621,34,1.331,35,0.898,36,0.354,37,1.208,38,1.995,39,1.405,40,2.502,41,2.502,42,2.502,43,3.604,44,4.621,45,2.975,46,2.502,47,2.502,48,2.975,49,1.798,50,2.251,51,2.56,52,0.543,53,1.549,54,2.502,55,0.689,56,2.306,57,2.065,58,3.604,59,4.043,60,1.391,61,2.502,62,1.563,63,1.707,64,1.563,65,3.604,66,3.604,67,1.563,68,1.563,69,1.563,70,0.309,71,0.047,72,1.208,73,1.468,74,1.468,75,4.224,76,1.053,77,2.502,78,2.502,79,2.502,80,0.924,81,0.452,82,2.502,83,2.502,84,2.886,85,3.604,86,2.502,87,2.502,88,2.502,89,2.502,90,2.502,91,1.391,92,2.502,93,0.015,94,0.022,95,0.015]],["title/modules/AppModule.html",[81,0.548,96,1.686]],["body/modules/AppModule.html",[1,2.665,2,2.03,3,0.527,4,0.271,5,0.273,18,0.039,36,0.361,38,1.038,52,0.614,55,0.702,56,2.561,57,2.103,67,1.591,68,1.591,69,1.591,70,0.315,71,0.048,76,0.91,81,0.771,93,0.016,94,0.022,95,0.016,96,3.228,97,1.038,98,1.038,99,1.417,100,1.417,101,1.417,102,1.92,103,1.271,104,2.103,105,2.103,106,2.103,107,2.854,108,2.698,109,2.561,110,2.743,111,2.03,112,1.417,113,1.271,114,2.547,115,2.91,116,1.92,117,3.651,118,2.103,119,2.103,120,2.103,121,3.651,122,1.591,123,2.547,124,2.103,125,1.456,126,1.417,127,2.547,128,2.103,129,2.547,130,2.547,131,1.038,132,2.103,133,2.547,134,1.822,135,2.28,136,2.547,137,2.547,138,2.547,139,2.103,140,2.547,141,2.547,142,1.038,143,2.547,144,1.417,145,2.547,146,2.547,147,2.547,148,2.547,149,2.547,150,3.651,151,2.547,152,2.03,153,2.547,154,4.266,155,3.846,156,3.651,157,3.651,158,2.097,159,2.28,160,3.651,161,1.561,162,3.651,163,3.651,164,2.547,165,3.651,166,2.547,167,1.81,168,2.547,169,2.547,170,2.547,171,2.547,172,2.547,173,2.547,174,2.547,175,2.547,176,2.547,177,2.547,178,2.547,179,2.547]],["title/injectables/AppService.html",[56,1.513,180,1.12]],["body/injectables/AppService.html",[3,0.416,4,0.358,5,0.251,7,0.799,9,0.54,10,1.632,14,4.327,16,1.36,18,0.039,30,0.994,34,1.243,35,0.839,36,0.476,37,1.128,39,1.344,48,3.648,49,2.788,51,3.14,52,0.526,53,1.481,55,0.927,56,2.205,70,0.416,71,0.063,72,1.757,73,1.8,74,1.37,76,0.839,93,0.021,94,0.027,95,0.021,116,1.514,125,1.5,126,1.871,134,1.679,158,2.515,180,1.632,181,1.871,182,2.777,183,3.364,184,3.713,185,3.364,186,2.744,187,2.205,188,3.364,189,2.761,190,3.364,191,1.128,192,4.935,193,3.364,194,3.364,195,2.102]],["title/controllers/AuthController.html",[0,1.686,196,1.894]],["body/controllers/AuthController.html",[0,2.387,2,1.432,3,0.318,4,0.274,5,0.192,7,1.058,9,0.414,10,1.359,11,2.318,17,1.836,18,0.039,26,2.298,28,3.865,30,0.827,32,3.865,34,1.359,35,0.917,36,0.521,37,1.233,39,1.119,45,2.126,52,0.549,53,1.569,55,0.71,59,4.377,60,1.432,63,1.829,64,1.609,70,0.318,71,0.048,72,1.233,73,1.499,74,1.499,76,0.917,80,1.585,84,3.217,91,2.604,93,0.016,94,0.023,95,0.016,158,1.656,191,1.233,196,2.298,197,2.126,198,2.575,199,2.575,200,3.312,201,3.852,202,3.865,203,2.575,204,2.754,205,2.575,206,4.683,207,3.679,208,4.683,209,3.679,210,4.683,211,4.683,212,2.575,213,3.217,214,3.865,215,2.575,216,2.754,217,2.575,218,4.683,219,2.575,220,2.575,221,2.575,222,2.471,223,2.126,224,2.126,225,2.575,226,2.575,227,2.575,228,2.575,229,3.679,230,2.575,231,2.575,232,3.679,233,2.575,234,2.575,235,2.575]],["title/modules/AuthModule.html",[81,0.548,107,1.686]],["body/modules/AuthModule.html",[2,2.357,3,0.391,4,0.337,5,0.236,11,1.422,18,0.039,52,0.615,55,0.871,62,1.974,70,0.391,71,0.059,76,0.788,81,0.864,93,0.019,94,0.026,95,0.019,97,1.287,98,1.287,99,1.757,100,1.757,101,1.757,102,2.153,103,2.115,107,3.295,108,2.798,109,2.739,111,2.357,112,1.757,113,1.577,115,2.988,124,2.609,125,1.409,126,1.757,128,2.609,134,1.577,135,1.974,196,2.988,222,2.739,223,2.609,236,2.609,237,3.16,238,2.609,239,3.053,240,3.16,241,3.16,242,3.16,243,3.16,244,2.245,245,3.16,246,4.24,247,4.24,248,2.648,249,3.16,250,2.609,251,2.609,252,3.16,253,4.24,254,3.16,255,1.974]],["title/injectables/AuthService.html",[180,1.12,222,1.513]],["body/injectables/AuthService.html",[3,0.251,4,0.216,5,0.152,7,0.558,9,0.326,10,1.14,11,2.127,16,1.395,18,0.039,30,1.009,34,1.541,35,1.178,36,0.669,37,1.398,38,1.699,39,1.135,52,0.504,53,1.697,55,0.559,63,1.915,64,1.267,70,0.251,71,0.038,72,1.398,73,2.113,74,1.925,76,0.931,80,1.915,91,1.128,93,0.012,94,0.019,95,0.012,125,1.395,126,1.128,142,1.257,144,1.716,155,2.547,158,2.211,159,2.332,161,0.68,180,1.14,181,1.128,186,1.128,187,1.012,191,1.504,200,1.927,201,1.442,204,2.496,213,2.332,214,1.675,222,1.54,224,1.675,244,1.442,248,2.606,256,1.675,257,1.389,258,3.734,259,3.734,260,3.086,261,3.734,262,2.029,263,5.063,264,3.086,265,2.029,266,2.029,267,2.192,268,3.086,269,2.952,270,2.547,271,3.086,272,2.029,273,3.086,274,3.902,275,4.281,276,3.086,277,3.086,278,2.029,279,2.029,280,3.086,281,2.192,282,2.547,283,2.547,284,2.547,285,1.675,286,3.086,287,2.029,288,1.675,289,1.716,290,2.192,291,2.029,292,2.029,293,2.029,294,2.029,295,2.029,296,2.029,297,4.488,298,2.029,299,3.734,300,3.705,301,3.086,302,2.547,303,3.734,304,2.653,305,2.029,306,1.675,307,2.029,308,3.086,309,2.029,310,1.267,311,1.442,312,2.029,313,2.029]],["title/modules/ConfigModule.html",[81,0.548,108,1.513]],["body/modules/ConfigModule.html",[3,0.501,4,0.432,5,0.303,18,0.038,52,0.53,55,1.117,70,0.501,71,0.076,81,0.973,93,0.025,94,0.031,95,0.025,97,1.651,98,1.651,99,2.254,100,2.254,101,2.254,102,2.239,103,2.686,108,2.875,111,2.766,112,2.254,113,2.022,125,1.653,161,1.358,314,3.346,315,3.346,316,4.053,317,4.053,318,3.346,319,4.053,320,4.053]],["title/classes/ConfigService.html",[71,0.057,125,0.835]],["body/classes/ConfigService.html",[3,0.269,4,0.232,5,0.363,7,0.393,9,0.349,10,1.2,16,1.608,18,0.039,30,1.04,34,1.595,35,1.077,36,0.655,37,1.448,39,1.529,49,2.155,50,3.362,52,0.415,53,1.448,70,0.402,71,0.041,72,1.304,73,1.976,74,1.585,76,0.97,84,1.357,93,0.013,94,0.02,95,0.013,125,0.895,158,1.463,161,0.728,167,2.765,186,2.164,187,2.307,191,1.304,195,1.357,257,1.463,281,3.069,310,1.357,321,0.978,322,1.544,323,3.582,324,3.25,325,2.431,326,3.25,327,2.682,328,3.25,329,2.682,330,3.069,331,2.682,332,2.682,333,2.402,334,2.682,335,2.173,336,2.309,337,3.674,338,2.682,339,2.402,340,2.309,341,2.682,342,2.173,343,2.309,344,3.069,345,3.069,346,2.682,347,2.765,348,3.213,349,2.03,350,2.682,351,2.173,352,2.682,353,2.309,354,2.682,355,2.682,356,2.682,357,2.682,358,1.942,359,2.682,360,1.794,361,1.544,362,3.213,363,1.544,364,2.682,365,1.544,366,1.084,367,1.794,368,1.794,369,1.794,370,1.794,371,1.544,372,1.544,373,1.794,374,1.794,375,1.794,376,1.544,377,1.794,378,1.544,379,1.208,380,1.794,381,1.794,382,1.544,383,1.544,384,1.794,385,1.544,386,1.794,387,1.544,388,1.794,389,1.544,390,1.794,391,1.544,392,1.794,393,1.544,394,1.794,395,1.544,396,1.794,397,1.544,398,1.794,399,1.357,400,2.309,401,1.794,402,2.682,403,1.794,404,1.794,405,1.794,406,1.794,407,1.794]],["title/interfaces/EnvConfig.html",[323,1.894,366,1.513]],["body/interfaces/EnvConfig.html",[3,0.326,4,0.281,5,0.353,7,0.476,16,1.608,18,0.039,30,0.592,39,1.321,49,1.865,50,3.12,52,0.463,53,1.585,70,0.462,71,0.05,72,0.882,73,1.523,74,1.073,76,1.083,84,1.645,93,0.016,94,0.023,95,0.016,125,0.726,158,1.185,161,0.882,167,3.087,186,2.079,187,2.168,191,1.456,195,1.645,281,2.656,310,1.645,322,1.871,323,3.514,325,1.645,327,2.174,329,2.174,330,2.656,331,2.174,332,2.174,333,2.079,334,2.174,336,1.871,337,3.792,338,2.174,339,2.63,340,1.871,341,2.174,343,1.871,344,2.656,345,2.656,346,2.174,347,2.656,348,3.086,349,1.645,350,2.174,352,2.174,353,1.871,354,2.174,355,2.174,356,2.174,357,2.174,358,1.865,359,2.174,360,2.174,361,1.871,362,3.587,363,1.871,364,3.086,365,2.656,366,1.314,367,2.174,368,2.174,369,2.174,370,2.174,371,1.871,372,1.871,373,2.174,374,2.174,375,2.174,376,1.871,377,2.174,378,1.871,379,1.464,380,2.174,381,2.174,382,1.871,383,1.871,384,2.174,385,1.871,386,2.174,387,1.871,388,2.174,389,1.871,390,2.174,391,1.871,392,2.174,393,1.871,394,2.174,395,1.871,396,2.174,397,1.871,398,2.174,399,1.645,400,2.656,401,2.174,402,3.086,403,2.174,404,2.174,405,2.174,406,2.174,407,2.174,408,1.871,409,2.633,410,2.633]],["title/injectables/JwtStrategy.html",[180,1.12,239,1.686]],["body/injectables/JwtStrategy.html",[3,0.375,4,0.323,5,0.226,7,0.745,9,0.487,10,1.522,11,2.108,18,0.039,26,2.574,30,0.927,34,1.522,35,1.027,36,0.584,37,1.381,39,0.921,52,0.56,53,1.684,55,0.835,62,1.893,63,2.114,64,1.893,70,0.375,71,0.088,72,1.684,73,1.235,74,1.679,76,0.755,93,0.019,94,0.025,95,0.019,125,1.556,126,1.685,152,1.685,159,2.574,180,1.522,181,1.685,189,1.893,191,1.016,239,2.292,248,3.139,251,2.502,269,3.283,284,2.502,289,1.685,343,2.928,371,3.328,400,2.153,411,2.502,412,4.683,413,3.031,414,3.031,415,3.031,416,5.423,417,5.026,418,3.031,419,4.122,420,4.122,421,4.122,422,4.122,423,3.031,424,2.502,425,3.031,426,2.502,427,3.031,428,3.031,429,3.031,430,3.031,431,3.031,432,4.122,433,4.122,434,4.122,435,3.031]],["title/classes/LoginPayload.html",[71,0.057,204,1.686]],["body/classes/LoginPayload.html",[3,0.459,4,0.395,5,0.277,7,0.671,9,0.596,16,1.499,17,2.349,18,0.038,30,1.059,36,0.667,38,2.287,52,0.502,60,2.063,70,0.459,71,0.102,93,0.023,94,0.029,95,0.023,142,2.287,152,2.618,201,3.345,204,2.618,257,2.119,321,1.67,379,2.618,436,3.063,437,4.708,438,3.886,439,3.063,440,3.711,441,4.49,442,3.063,443,3.711,444,4.269,445,3.886,446,4.269,447,3.063,448,2.637,449,3.063]],["title/classes/PasswordTransformer.html",[71,0.057,450,1.894]],["body/classes/PasswordTransformer.html",[3,0.446,4,0.384,5,0.269,7,0.922,9,0.579,10,1.707,16,1.483,18,0.038,30,1.039,34,1.707,35,1.152,37,1.549,39,1.406,52,0.492,53,1.549,70,0.446,71,0.096,76,1.341,93,0.022,94,0.028,95,0.022,142,1.883,321,1.623,339,3.293,450,2.888,451,2.977,452,3.285,453,4.623,454,5.103,455,4.623,456,3.606,457,4.623,458,4.443,459,4.623,460,3.606,461,4.623,462,3.285,463,1.799,464,2.977,465,3.606]],["title/classes/Profile.html",[71,0.057,80,1.12]],["body/classes/Profile.html",[3,0.342,4,0.295,5,0.207,7,0.5,9,0.445,16,1.522,17,2.631,18,0.039,21,1.967,30,1.186,35,1.349,36,0.747,38,2.073,52,0.515,70,0.342,71,0.091,80,1.786,93,0.017,94,0.024,95,0.017,131,2.286,142,2.073,144,2.153,152,2.153,161,0.928,255,2.418,257,1.743,289,2.483,290,3.616,321,1.246,450,3.021,452,3.172,458,3.196,463,1.381,466,2.285,467,4.353,468,4.968,469,2.768,470,3.686,471,2.768,472,2.751,473,2.768,474,2.768,475,3.872,476,3.872,477,2.768,478,2.768,479,3.872,480,3.872,481,3.872,482,3.872,483,2.768,484,2.285,485,2.768,486,3.196,487,2.418,488,3.196,489,3.196,490,2.768,491,2.768,492,3.872,493,2.768,494,2.768,495,1.967,496,2.768,497,2.768,498,2.285,499,2.768]],["title/modules/ProfileModule.html",[81,0.548,109,1.513]],["body/modules/ProfileModule.html",[3,0.475,4,0.409,5,0.287,18,0.038,52,0.604,55,1.059,63,2.251,70,0.475,71,0.072,80,1.419,81,0.95,93,0.024,94,0.03,95,0.024,97,1.565,98,1.565,99,2.137,100,2.137,101,2.137,102,2.365,103,2.622,109,2.93,111,2.676,112,2.137,113,1.917,115,2.4,120,3.172,122,2.4,131,1.96,495,2.73,500,3.172,501,3.172,502,3.172,503,3.843,504,3.843,505,3.172,506,3.843]],["title/injectables/ProfileService.html",[63,1.12,180,1.12]],["body/injectables/ProfileService.html",[3,0.249,4,0.215,5,0.151,7,0.555,9,0.323,10,1.133,11,2.528,12,2.641,15,2.533,16,1.56,18,0.039,29,1.663,30,1.102,34,1.741,35,1.222,36,0.667,37,1.58,38,2.351,39,1.36,52,0.522,53,1.693,55,0.555,63,1.133,70,0.249,71,0.038,72,1.393,73,1.25,74,1.25,76,1.115,80,2.106,91,2.621,93,0.012,94,0.019,95,0.012,122,1.258,131,2.058,142,2.058,144,2.311,158,1.381,159,1.917,161,1.246,180,1.133,181,1.12,191,1.246,213,2.794,216,2.488,255,2.596,267,2.18,282,1.663,289,1.706,304,1.431,310,1.917,311,1.431,336,3.349,462,2.18,463,1.005,464,1.663,472,2.18,487,1.258,495,1.431,505,1.663,507,1.663,508,2.533,509,3.069,510,3.069,511,2.014,512,5.176,513,4.157,514,2.014,515,3.717,516,3.069,517,2.014,518,2.014,519,3.069,520,3.717,521,3.069,522,2.014,523,3.069,524,2.014,525,3.069,526,2.014,527,3.069,528,3.069,529,3.069,530,2.014,531,2.014,532,2.014,533,2.014,534,2.014,535,2.014,536,2.014,537,2.014,538,2.014,539,2.014,540,2.014,541,2.014,542,2.014,543,2.014,544,2.014,545,2.014,546,2.014,547,2.014,548,1.663,549,1.663,550,2.014,551,2.014,552,2.014,553,1.431,554,1.663,555,2.014,556,2.014,557,2.014,558,3.069,559,2.014,560,2.014,561,2.014,562,2.014]],["title/classes/RegisterPayload.html",[71,0.057,216,1.686]],["body/classes/RegisterPayload.html",[3,0.395,4,0.34,5,0.239,7,0.578,9,0.513,16,1.575,17,2.563,18,0.039,30,1.155,35,1.334,36,0.727,38,2.18,52,0.455,60,1.777,70,0.395,71,0.097,93,0.02,94,0.026,95,0.02,142,2.18,152,2.856,202,3.526,213,2.668,216,2.375,257,1.923,290,3.803,321,1.439,345,2.271,379,2.856,438,4.24,439,2.638,441,4.717,442,2.638,444,4.418,445,3.526,446,4.546,447,2.638,448,2.271,449,2.638,563,2.638,564,3.196,565,3.196,566,3.196,567,4.272,568,4.272,569,3.196,570,3.196,571,3.196,572,3.196,573,4.272,574,3.196]],["title/classes/Roles.html",[71,0.057,131,1.235]],["body/classes/Roles.html",[3,0.386,4,0.333,5,0.234,7,0.565,8,2.628,9,0.502,12,2.99,17,2.374,18,0.038,21,2.99,30,1.07,36,0.721,52,0.507,68,2.628,70,0.386,71,0.089,80,2.185,93,0.019,94,0.026,95,0.019,131,2.073,132,2.58,255,2.628,257,1.894,270,3.473,285,2.58,289,2.645,321,1.407,358,2.54,463,1.559,467,4.517,468,4.693,470,3.927,472,2.99,484,3.473,486,3.473,487,2.628,488,3.473,489,3.473,498,4.616,553,3.774,554,4.201,575,2.58,576,3.125,577,3.125,578,4.208,579,4.208,580,3.125,581,3.125,582,3.125,583,4.208,584,4.208,585,3.473,586,3.125,587,3.125,588,3.125,589,3.125]],["title/modules/WinstonModule.html",[81,0.548,110,1.686]],["body/modules/WinstonModule.html",[3,0.405,4,0.349,5,0.245,10,1.211,18,0.039,30,0.977,34,1.604,35,1.083,36,0.615,37,1.456,39,1.321,52,0.519,53,1.456,55,0.903,70,0.405,71,0.062,72,1.739,76,1.083,81,1.051,93,0.02,94,0.027,95,0.02,97,1.335,102,2.497,103,2.168,110,2.885,115,2.048,116,2.193,191,1.456,325,3.241,399,2.048,590,3.278,591,3.278,592,4.344,593,3.241,594,3.278,595,4.344,596,3.002,597,5.398,598,4.344,599,3.278,600,2.885,601,3.278,602,3.586,603,4.344,604,3.278,605,2.329,606,2.329,607,3.278,608,4.344,609,3.278,610,3.278,611,3.278]],["title/interfaces/WinstonModuleAsyncOptions.html",[366,1.513,600,1.686]],["body/interfaces/WinstonModuleAsyncOptions.html",[3,0.449,4,0.387,5,0.272,7,0.657,9,0.584,18,0.039,36,0.725,37,1.557,39,1.413,52,0.495,70,0.574,81,0.975,93,0.022,94,0.029,95,0.022,102,2.091,116,2.511,134,2.847,135,3.371,184,2.27,189,2.902,257,2.091,358,2.318,366,1.813,408,2.582,426,3.835,593,2.902,596,3.102,600,2.583,602,3.835,612,2.582,613,4.646,614,4.646,615,4.646,616,3.634,617,3.634,618,3.301,619,3.634,620,3.634]],["title/coverage.html",[621,2.929]],["body/coverage.html",[0,2.282,1,1.881,5,0.225,6,2.486,18,0.038,36,0.426,56,1.503,63,1.112,71,0.102,80,1.112,81,0.544,93,0.019,94,0.025,95,0.019,125,0.83,131,1.671,161,1.009,180,1.851,182,2.486,196,1.881,197,2.486,204,1.674,216,1.674,222,1.503,239,1.674,256,2.486,322,2.915,323,1.881,349,3.719,366,2.048,411,2.486,436,2.486,450,1.881,451,2.486,466,2.486,507,2.486,563,2.486,575,2.486,600,1.674,605,2.139,606,2.139,612,2.139,621,2.139,622,2.486,623,2.486,624,3.011,625,2.486,626,5.107,627,5.985,628,4.103,629,2.139,630,5.412,631,4.103,632,3.011,633,4.103,634,3.387,635,2.486,636,2.486,637,3.387,638,4.572,639,2.486,640,2.486,641,2.486,642,2.486,643,2.486,644,2.486,645,2.486,646,2.486,647,2.486,648,3.011,649,3.011]],["title/dependencies.html",[98,1.484,650,2.539]],["body/dependencies.html",[5,0.265,18,0.039,55,0.976,60,1.97,62,2.213,67,2.213,68,2.213,69,2.213,71,0.086,93,0.022,94,0.028,95,0.022,98,1.443,116,2.057,118,2.924,119,2.924,122,2.213,244,2.517,248,2.213,361,2.517,363,2.517,424,3.773,448,2.517,452,2.517,462,2.517,463,1.768,651,3.542,652,5.346,653,3.542,654,3.542,655,3.542,656,3.773,657,4.177,658,4.413,659,3.542,660,3.542,661,3.542,662,3.542,663,3.542,664,3.542,665,3.773,666,3.773,667,3.542,668,3.773,669,3.542,670,3.542,671,3.773,672,3.542,673,3.542,674,2.924,675,3.542,676,3.542,677,3.542,678,3.542,679,3.542,680,3.542,681,3.542,682,3.542,683,3.542,684,3.542,685,3.542,686,2.517,687,3.542,688,3.542,689,3.542,690,3.542]],["title/miscellaneous/enumerations.html",[691,1.267,692,3.007]],["body/miscellaneous/enumerations.html",[9,0.741,18,0.036,93,0.028,94,0.033,95,0.028,339,2.988,553,3.818,629,3.277,691,2.301,692,3.807,693,3.807,694,5.374,695,5.374]],["title/index.html",[9,0.408,696,2.539,697,2.539]],["body/index.html",[4,0.152,5,0.256,7,0.258,8,2.794,16,0.393,18,0.037,35,0.355,36,0.331,38,0.951,49,1.71,50,2.141,51,1.013,52,0.403,67,2.677,69,0.891,81,0.683,91,1.298,93,0.009,94,0.014,95,0.009,96,0.793,98,1.746,113,1.479,116,1.051,125,0.643,134,0.712,139,2.447,142,1.208,144,2.713,161,0.478,184,1.458,186,0.793,187,2.026,191,0.782,195,0.891,200,0.891,250,1.177,267,1.013,269,0.891,274,1.177,275,1.927,283,1.177,288,1.927,300,1.177,302,1.177,304,1.659,306,1.177,311,2.686,325,0.891,330,1.013,333,0.793,337,1.013,344,1.013,347,2.435,349,0.891,353,1.013,358,1.71,365,1.013,372,1.659,376,1.013,378,1.013,379,1.298,383,1.013,385,1.013,387,1.013,389,1.013,391,1.013,393,1.013,395,1.013,397,1.013,463,1.71,487,0.891,508,1.177,548,1.927,549,1.177,585,1.177,596,1.298,621,1.659,622,1.927,626,2.447,656,2.447,657,4.028,658,4.248,665,2.829,666,3.121,668,2.829,671,2.447,674,1.927,686,1.013,698,1.426,699,1.426,700,3.427,701,2.335,702,1.426,703,1.426,704,2.335,705,1.426,706,2.335,707,1.426,708,1.426,709,2.335,710,1.426,711,3.781,712,2.335,713,2.335,714,1.426,715,1.426,716,4.06,717,2.965,718,1.426,719,1.426,720,2.965,721,1.426,722,1.426,723,1.426,724,5.279,725,2.965,726,2.965,727,1.426,728,1.426,729,3.538,730,1.426,731,1.426,732,1.426,733,1.426,734,3.427,735,2.965,736,2.965,737,2.335,738,1.426,739,1.426,740,2.335,741,2.335,742,3.427,743,2.335,744,2.965,745,1.426,746,1.426,747,1.426,748,2.965,749,2.965,750,1.426,751,1.426,752,2.965,753,1.426,754,2.335,755,2.335,756,1.426,757,1.426,758,1.426,759,1.426,760,2.335,761,1.426,762,1.426,763,1.426,764,1.426,765,1.426,766,1.426,767,2.965,768,1.426,769,1.426,770,3.781,771,2.335,772,1.426,773,1.426,774,1.426,775,2.335,776,4.764,777,3.427,778,1.426,779,2.965,780,4.473,781,1.426,782,2.335,783,2.335,784,1.426,785,1.426,786,1.426,787,1.426,788,1.426,789,1.426,790,2.335,791,1.426,792,2.965,793,1.426,794,1.426,795,1.426,796,1.426,797,1.426,798,2.335,799,1.426,800,2.965,801,1.426,802,3.351,803,2.335,804,1.426,805,1.426,806,1.426,807,1.426,808,1.426,809,2.335,810,1.426,811,1.426,812,1.426,813,1.426,814,1.426,815,1.426,816,1.426,817,2.447,818,1.426,819,1.426,820,1.426,821,1.426,822,1.426,823,1.426,824,1.426,825,1.426,826,1.426,827,1.426,828,2.335,829,1.426,830,1.426,831,2.335,832,1.177,833,1.426,834,1.426,835,1.426,836,1.426,837,1.426,838,1.927,839,1.426,840,1.426,841,1.426,842,2.335,843,1.426,844,2.335,845,1.426,846,1.426,847,1.426,848,2.335,849,1.426,850,1.426,851,1.426,852,1.426,853,2.335,854,2.335,855,2.335,856,1.426,857,2.335,858,1.426,859,1.426,860,1.426,861,2.335,862,1.426,863,2.335,864,1.426,865,1.426,866,2.335,867,1.426,868,1.426,869,2.335,870,1.426,871,2.335,872,1.426,873,1.426,874,1.426,875,2.335,876,1.426,877,1.426,878,1.426,879,1.426,880,1.426,881,2.829,882,1.426,883,1.426,884,1.426,885,1.426,886,1.426,887,1.426,888,1.426,889,1.426,890,1.426,891,2.335,892,2.335,893,2.335,894,1.426,895,1.426,896,1.426,897,1.426,898,2.335,899,1.426,900,1.426,901,2.335,902,1.426,903,1.426,904,1.426,905,1.426,906,1.426,907,1.426,908,1.426,909,1.426,910,1.426,911,1.426,912,2.335,913,1.426,914,1.426,915,2.335,916,3.427,917,2.965,918,3.427,919,2.335,920,2.335,921,1.426,922,1.426,923,1.426,924,2.965,925,3.427,926,1.426,927,1.426,928,2.965,929,1.426,930,1.426,931,1.426,932,1.426,933,1.426,934,1.426,935,1.426,936,1.426,937,1.426,938,1.426,939,1.426,940,1.426,941,2.447,942,1.927,943,1.426,944,1.426,945,1.426,946,1.426,947,1.426,948,1.426,949,1.426,950,1.426,951,1.426,952,1.426,953,1.426,954,1.426,955,1.426,956,1.426,957,1.426,958,1.426,959,1.426,960,1.426,961,1.426,962,1.426,963,2.335,964,2.335,965,1.426,966,1.426,967,1.426,968,1.426,969,1.426,970,1.426,971,1.426,972,1.426,973,1.426,974,1.426,975,1.426]],["title/modules.html",[97,1.679]],["body/modules.html",[18,0.032,93,0.027,94,0.032,95,0.027,96,2.483,97,1.819,107,2.483,108,2.228,109,2.228,110,2.483,881,4.786,976,5.798,977,5.798,978,5.916,979,4.465,980,4.465]],["title/overview.html",[981,3.403]],["body/overview.html",[2,1.995,18,0.038,56,2.54,63,2.136,81,0.648,93,0.022,94,0.028,95,0.022,96,3.358,97,1.461,98,1.461,99,1.995,100,1.995,101,1.995,102,1.615,103,1.79,104,2.961,105,2.961,106,2.961,107,3.339,108,2.772,109,2.885,110,2.831,111,2.562,112,1.995,113,1.79,125,1.48,181,1.995,222,2.54,236,2.961,238,2.961,239,2.831,314,2.961,315,2.961,321,1.615,408,2.549,500,2.961,501,2.961,502,2.961,981,2.961,982,3.588,983,4.608,984,3.588,985,3.588]],["title/miscellaneous/typealiases.html",[691,1.267,986,3.642]],["body/miscellaneous/typealiases.html",[9,0.75,18,0.033,36,0.662,93,0.029,94,0.033,95,0.029,184,2.919,593,3.383,596,2.599,612,3.32,618,3.32,691,2.332,987,4.673,988,4.673]],["title/miscellaneous/variables.html",[333,2.025,691,1.267]],["body/miscellaneous/variables.html",[7,0.657,8,2.657,9,0.407,11,1.14,16,1.488,18,0.039,26,1.583,35,0.632,36,0.808,49,1.264,72,1.219,76,0.906,81,0.769,93,0.016,94,0.022,95,0.016,116,2.092,131,1.733,134,1.815,135,2.657,161,1.219,187,1.815,189,1.583,191,1.219,200,1.583,269,1.583,318,3.511,333,1.409,339,3.201,340,1.8,358,2.894,382,1.8,399,1.583,593,2.271,596,2.365,600,1.409,605,2.584,606,2.584,618,1.8,623,2.091,625,2.091,629,1.8,634,2.091,635,3.837,636,3.837,637,2.091,638,2.091,639,3.511,640,3.511,641,3.002,642,3.002,643,3.002,644,3.002,645,3.002,646,2.091,647,3.002,686,1.8,691,1.264,693,2.091,729,2.091,802,2.091,817,3.511,832,2.091,838,2.091,941,3.002,942,4.456,989,2.534,990,3.636,991,2.534,992,5.277,993,3.636,994,2.534,995,2.534,996,2.534,997,2.534,998,2.534,999,2.534,1000,2.534,1001,2.534,1002,3.636,1003,2.534,1004,2.534,1005,2.534,1006,4.922,1007,2.534,1008,2.534,1009,3.636,1010,3.636,1011,2.534,1012,2.534,1013,2.534,1014,3.636,1015,2.534,1016,2.534,1017,2.534,1018,2.534,1019,2.534,1020,2.534,1021,2.534,1022,2.534,1023,2.534,1024,2.534,1025,2.534,1026,2.534,1027,2.534]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["0.1.13",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["0.2.19",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["1.0",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":754,"title":{},"body":{"index.html":{}}}],["100",{"_index":626,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["14d",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["16.1.4",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":983,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["2.17.1",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["201",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":824,"title":{},"body":{"index.html":{}}}],["255",{"_index":476,"title":{},"body":{"classes/Profile.html":{}}}],["3.0.0",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["3.21.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["4",{"_index":984,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":825,"title":{},"body":{"index.html":{}}}],["400",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["401",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["5",{"_index":982,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":985,"title":{},"body":{"overview.html":{}}}],["6.1.0",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["7/7",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["8.1.0",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["8080",{"_index":939,"title":{},"body":{"index.html":{}}}],["9000",{"_index":784,"title":{},"body":{"index.html":{}}}],["__dirname",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction",{"_index":953,"title":{},"body":{"index.html":{}}}],["access",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Roles.html":{},"dependencies.html":{}}}],["accesscontrolmodule",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["account",{"_index":546,"title":{},"body":{"injectables/ProfileService.html":{}}}],["acguard",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["acguard)@useroles({resource",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["action",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["acts",{"_index":952,"title":{},"body":{"index.html":{}}}],["actual",{"_index":840,"title":{},"body":{"index.html":{}}}],["addbearerauth(swagger_api_auth_name",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":835,"title":{},"body":{"index.html":{}}}],["admin_delete_profiles",{"_index":695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["against",{"_index":372,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["aliases",{"_index":987,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":392,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["alphanumeric",{"_index":821,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":968,"title":{},"body":{"index.html":{}}}],["angular",{"_index":709,"title":{},"body":{"index.html":{}}}],["another",{"_index":549,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["any'})@delete('/api/profile/:username')@apiresponse({status",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["anything",{"_index":904,"title":{},"body":{"index.html":{}}}],["api",{"_index":942,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api/auth",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/docs",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["apimodelproperty",{"_index":444,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["apimodelproperty({required",{"_index":438,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["apiresponse",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["apis",{"_index":946,"title":{},"body":{"index.html":{}}}],["apiusetags",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags('authentication",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/Roles.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app.register(fastifyratelimiter",{"_index":868,"title":{},"body":{"index.html":{}}}],["app.register(headers",{"_index":867,"title":{},"body":{"index.html":{}}}],["app.roles",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"classes/Roles.html":{}}}],["app.service",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.use",{"_index":874,"title":{},"body":{"index.html":{}}}],["app.use(headers",{"_index":873,"title":{},"body":{"index.html":{}}}],["app/roles.entity",{"_index":495,"title":{},"body":{"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["app_env",{"_index":376,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["app_url",{"_index":195,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":706,"title":{},"body":{"index.html":{}}}],["applied",{"_index":357,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["approles",{"_index":553,"title":{},"body":{"injectables/ProfileService.html":{},"classes/Roles.html":{},"miscellaneous/enumerations.html":{}}}],["approles.admin_delete_profiles",{"_index":587,"title":{},"body":{"classes/Roles.html":{}}}],["appservice",{"_index":56,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appurl",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["args",{"_index":619,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["array",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":338,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":602,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["auth.controller",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/payload/register.payload",{"_index":531,"title":{},"body":{"injectables/ProfileService.html":{}}}],["authcontroller",{"_index":196,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticating",{"_index":828,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["authmodule",{"_index":107,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":975,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice",{"_index":222,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":980,"title":{},"body":{"modules.html":{}}}],["await",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["backend",{"_index":715,"title":{},"body":{"index.html":{}}}],["backers",{"_index":969,"title":{},"body":{"index.html":{}}}],["bad",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":528,"title":{},"body":{"injectables/ProfileService.html":{}}}],["base",{"_index":813,"title":{},"body":{"index.html":{}}}],["based",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"classes/Roles.html":{}}}],["basis",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":481,"title":{},"body":{"classes/Profile.html":{}}}],["being",{"_index":886,"title":{},"body":{"index.html":{}}}],["below",{"_index":748,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":847,"title":{},"body":{"index.html":{}}}],["between",{"_index":854,"title":{},"body":{"index.html":{}}}],["beware",{"_index":583,"title":{},"body":{"classes/Roles.html":{}}}],["bloated",{"_index":884,"title":{},"body":{"index.html":{}}}],["body",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["boilerplate",{"_index":711,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":348,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["bootstrap",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["both",{"_index":742,"title":{},"body":{"index.html":{}}}],["box",{"_index":720,"title":{},"body":{"index.html":{}}}],["browse",{"_index":978,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":976,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":701,"title":{},"body":{"index.html":{}}}],["bypass",{"_index":758,"title":{},"body":{"index.html":{}}}],["callback",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cascade",{"_index":579,"title":{},"body":{"classes/Roles.html":{}}}],["change",{"_index":853,"title":{},"body":{"index.html":{}}}],["changed",{"_index":849,"title":{},"body":{"index.html":{}}}],["check",{"_index":401,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["checks",{"_index":343,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["choice",{"_index":740,"title":{},"body":{"index.html":{}}}],["choose",{"_index":548,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["choosing",{"_index":844,"title":{},"body":{"index.html":{}}}],["class",{"_index":71,"title":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":321,"title":{},"body":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":314,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":315,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":500,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":501,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":502,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["code",{"_index":857,"title":{},"body":{"index.html":{}}}],["column",{"_index":468,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["column({name",{"_index":474,"title":{},"body":{"classes/Profile.html":{}}}],["column({type",{"_index":581,"title":{},"body":{"classes/Roles.html":{}}}],["column({unique",{"_index":490,"title":{},"body":{"classes/Profile.html":{}}}],["comes",{"_index":716,"title":{},"body":{"index.html":{}}}],["command",{"_index":770,"title":{},"body":{"index.html":{}}}],["completed",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["completed'})@apiresponse({status",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["compose",{"_index":741,"title":{},"body":{"index.html":{}}}],["config",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["config.service",{"_index":317,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":108,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":125,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["configservice('.env",{"_index":320,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('db_database",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('webtoken_secret_key",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.isenv('dev",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.validateinput(config",{"_index":369,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["configuration",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":961,"title":{},"body":{"index.html":{}}}],["configureopenapi",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conflict",{"_index":787,"title":{},"body":{"index.html":{}}}],["connection",{"_index":827,"title":{},"body":{"index.html":{}}}],["connections",{"_index":839,"title":{},"body":{"index.html":{}}}],["console",{"_index":866,"title":{},"body":{"index.html":{}}}],["const",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["constructor(config",{"_index":183,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(configservice",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(filepath",{"_index":327,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["constructor(jwtservice",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(profilerepository",{"_index":511,"title":{},"body":{"injectables/ProfileService.html":{}}}],["contain",{"_index":331,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["container",{"_index":795,"title":{},"body":{"index.html":{}}}],["control",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('api/auth",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["corresponding",{"_index":905,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":621,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":768,"title":{},"body":{"index.html":{}}}],["create",{"_index":508,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["create(payload",{"_index":516,"title":{},"body":{"injectables/ProfileService.html":{}}}],["created",{"_index":585,"title":{},"body":{"classes/Roles.html":{},"index.html":{}}}],["createlogger(loggeropts",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('profiles",{"_index":538,"title":{},"body":{"injectables/ProfileService.html":{}}}],["creates",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["createtoken",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["createwinstonasyncproviders",{"_index":605,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonasyncproviders(options",{"_index":610,"title":{},"body":{"modules/WinstonModule.html":{}}}],["createwinstonproviders",{"_index":606,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonproviders(options",{"_index":609,"title":{},"body":{"modules/WinstonModule.html":{}}}],["crypto",{"_index":462,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["crypto.createhmac('sha256",{"_index":464,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{}}}],["current",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currently",{"_index":547,"title":{},"body":{"injectables/ProfileService.html":{}}}],["d",{"_index":799,"title":{},"body":{"index.html":{}}}],["daily",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["databases",{"_index":955,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":397,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_host",{"_index":393,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_password",{"_index":391,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_port",{"_index":395,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_type",{"_index":387,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_username",{"_index":389,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["dd",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["declarations",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["declaring",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}}}],["dedicated",{"_index":948,"title":{},"body":{"index.html":{}}}],["default",{"_index":358,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_read",{"_index":694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["defaultmeta",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{}}}],["delete",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["delete('/api/profile/:username",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["delete(@param('username",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["delete(username",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/ProfileService.html":{}}}],["deleted",{"_index":558,"title":{},"body":{"injectables/ProfileService.html":{}}}],["deleted.affected",{"_index":560,"title":{},"body":{"injectables/ProfileService.html":{}}}],["deletes",{"_index":519,"title":{},"body":{"injectables/ProfileService.html":{}}}],["demand",{"_index":930,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploying",{"_index":790,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":765,"title":{},"body":{"index.html":{}}}],["describe",{"_index":944,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":737,"title":{},"body":{"index.html":{}}}],["detached",{"_index":796,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":860,"title":{},"body":{"index.html":{}}}],["details",{"_index":958,"title":{},"body":{"index.html":{}}}],["determines",{"_index":810,"title":{},"body":{"index.html":{}}}],["dev",{"_index":812,"title":{},"body":{"index.html":{}}}],["development",{"_index":782,"title":{},"body":{"index.html":{}}}],["different",{"_index":837,"title":{},"body":{"index.html":{}}}],["directory",{"_index":793,"title":{},"body":{"index.html":{}}}],["docker",{"_index":724,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":803,"title":{},"body":{"index.html":{}}}],["docs",{"_index":928,"title":{},"body":{"index.html":{}}}],["document",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":622,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentbuilder",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doesn't",{"_index":786,"title":{},"body":{"index.html":{}}}],["done",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dotenv",{"_index":361,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["download",{"_index":775,"title":{},"body":{"index.html":{}}}],["dto",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dynamicmodule",{"_index":597,"title":{},"body":{"modules/WinstonModule.html":{}}}],["e2e",{"_index":919,"title":{},"body":{"index.html":{}}}],["each",{"_index":876,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":702,"title":{},"body":{"index.html":{}}}],["email",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["employs",{"_index":479,"title":{},"body":{"classes/Profile.html":{}}}],["empty",{"_index":830,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":818,"title":{},"body":{"index.html":{}}}],["end",{"_index":936,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":832,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ensures",{"_index":352,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["entities",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":467,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["entity{.ts,.js",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":554,"title":{},"body":{"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["enumerations",{"_index":692,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":347,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["env.example",{"_index":769,"title":{},"body":{"index.html":{}}}],["envconfig",{"_index":323,"title":{"interfaces/EnvConfig.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["environment",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["envvarsschema",{"_index":373,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envvarsschema.validate",{"_index":403,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error(`config",{"_index":404,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error.message",{"_index":405,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["especially",{"_index":885,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":492,"title":{},"body":{"classes/Profile.html":{}}}],["exec",{"_index":917,"title":{},"body":{"index.html":{}}}],["execute",{"_index":791,"title":{},"body":{"index.html":{}}}],["executing",{"_index":760,"title":{},"body":{"index.html":{}}}],["exist",{"_index":903,"title":{},"body":{"index.html":{}}}],["existing",{"_index":772,"title":{},"body":{"index.html":{}}}],["exists",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{}}}],["exp",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expires",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiresprettyprint",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["exports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"overview.html":{}}}],["exposed",{"_index":783,"title":{},"body":{"index.html":{}}}],["express",{"_index":657,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extends",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["extractjwt",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factory",{"_index":615,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["failed",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/ProfileService.html":{}}}],["fastify",{"_index":658,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastifyadapter",{"_index":861,"title":{},"body":{"index.html":{}}}],["fastifyratelimiter",{"_index":864,"title":{},"body":{"index.html":{}}}],["feature",{"_index":910,"title":{},"body":{"index.html":{}}}],["features",{"_index":719,"title":{},"body":{"index.html":{}}}],["fetches",{"_index":336,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ProfileService.html":{}}}],["field",{"_index":441,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["filepath",{"_index":329,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["files",{"_index":937,"title":{},"body":{"index.html":{}}}],["folder",{"_index":934,"title":{},"body":{"index.html":{}}}],["follow",{"_index":745,"title":{},"body":{"index.html":{}}}],["following",{"_index":792,"title":{},"body":{"index.html":{}}}],["format",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["formats",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["forroot",{"_index":591,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forroot(options",{"_index":592,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync",{"_index":598,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync(options",{"_index":599,"title":{},"body":{"modules/WinstonModule.html":{}}}],["found",{"_index":925,"title":{},"body":{"index.html":{}}}],["framework",{"_index":700,"title":{},"body":{"index.html":{}}}],["free",{"_index":750,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":455,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":935,"title":{},"body":{"index.html":{}}}],["fs",{"_index":364,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["function",{"_index":614,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["further",{"_index":957,"title":{},"body":{"index.html":{}}}],["generate",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":929,"title":{},"body":{"index.html":{}}}],["get('/api/profile",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/api/profile')@useguards(undefined)@apiresponse({status",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@useguards(undefined",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["get(id",{"_index":521,"title":{},"body":{"injectables/ProfileService.html":{}}}],["get(key",{"_index":334,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["getbyusername",{"_index":509,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusername(username",{"_index":523,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass",{"_index":510,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass(username",{"_index":525,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getone",{"_index":544,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getprofile",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@req",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":696,"title":{"index.html":{}},"body":{}}],["github",{"_index":926,"title":{},"body":{"index.html":{}}}],["given",{"_index":340,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":603,"title":{},"body":{"modules/WinstonModule.html":{}}}],["grabs",{"_index":457,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["graph",{"_index":979,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":965,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":363,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["hash",{"_index":458,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{}}}],["hashed",{"_index":527,"title":{},"body":{"injectables/ProfileService.html":{}}}],["header",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":863,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":707,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":668,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":973,"title":{},"body":{"index.html":{}}}],["host",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":938,"title":{},"body":{"index.html":{}}}],["hour",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["hours",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["http",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:3306",{"_index":806,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":805,"title":{},"body":{"index.html":{}}}],["http://localhost:9000",{"_index":804,"title":{},"body":{"index.html":{}}}],["https",{"_index":382,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["iat",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["identifier",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":453,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["import",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["imports",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}}}],["including",{"_index":356,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":409,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["indicating",{"_index":822,"title":{},"body":{"index.html":{}}}],["inestapplication",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["inject",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inject('winston",{"_index":190,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":180,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["injectables",{"_index":181,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"overview.html":{}}}],["injected",{"_index":332,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["injecting",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectrepository",{"_index":530,"title":{},"body":{"injectables/ProfileService.html":{}}}],["injectrepository(profile",{"_index":532,"title":{},"body":{"injectables/ProfileService.html":{}}}],["injectrepository(roles",{"_index":533,"title":{},"body":{"injectables/ProfileService.html":{}}}],["inspired",{"_index":708,"title":{},"body":{"index.html":{}}}],["instead",{"_index":850,"title":{},"body":{"index.html":{}}}],["interface",{"_index":366,"title":{"interfaces/EnvConfig.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":408,"title":{},"body":{"interfaces/EnvConfig.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["ip",{"_index":877,"title":{},"body":{"index.html":{}}}],["isalpha",{"_index":572,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["isalphanumeric",{"_index":445,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["isemail",{"_index":573,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["isenv",{"_index":324,"title":{},"body":{"classes/ConfigService.html":{}}}],["isenv(env",{"_index":341,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["isnotempty",{"_index":446,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["it's",{"_index":823,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":355,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi",{"_index":362,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default('8889",{"_index":396,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(1800",{"_index":386,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.object",{"_index":375,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.objectschema",{"_index":374,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('localhost",{"_index":394,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('mariadb",{"_index":388,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('nest",{"_index":398,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('root",{"_index":390,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().required",{"_index":384,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().uri",{"_index":380,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["join",{"_index":971,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":239,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":550,"title":{},"body":{"injectables/ProfileService.html":{}}}],["keepconnectionalive",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":337,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["layer",{"_index":954,"title":{},"body":{"index.html":{}}}],["leave",{"_index":883,"title":{},"body":{"index.html":{}}}],["left",{"_index":829,"title":{},"body":{"index.html":{}}}],["legend",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["length",{"_index":475,"title":{},"body":{"classes/Profile.html":{}}}],["level",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":907,"title":{},"body":{"index.html":{}}}],["license",{"_index":974,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":964,"title":{},"body":{"index.html":{}}}],["limit",{"_index":666,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["lines",{"_index":856,"title":{},"body":{"index.html":{}}}],["loads",{"_index":794,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":735,"title":{},"body":{"index.html":{}}}],["locally",{"_index":727,"title":{},"body":{"index.html":{}}}],["location",{"_index":950,"title":{},"body":{"index.html":{}}}],["logger",{"_index":184,"title":{},"body":{"injectables/AppService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loggeroptions",{"_index":618,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loggeropts",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":717,"title":{},"body":{"index.html":{}}}],["login",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{}}}],["login(@body",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginpayload",{"_index":204,"title":{"classes/LoginPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{},"coverage.html":{}}}],["logs",{"_index":960,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["mac",{"_index":751,"title":{},"body":{"index.html":{}}}],["made",{"_index":712,"title":{},"body":{"index.html":{}}}],["main",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["main.ts",{"_index":858,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":814,"title":{},"body":{"index.html":{}}}],["make",{"_index":725,"title":{},"body":{"index.html":{}}}],["making",{"_index":551,"title":{},"body":{"injectables/ProfileService.html":{}}}],["manual",{"_index":764,"title":{},"body":{"index.html":{}}}],["many",{"_index":488,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["manytoone",{"_index":586,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(type",{"_index":588,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(undefined",{"_index":577,"title":{},"body":{"classes/Roles.html":{}}}],["mapping",{"_index":365,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["mariadb",{"_index":743,"title":{},"body":{"index.html":{}}}],["matches",{"_index":345,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/RegisterPayload.html":{}}}],["matches(/^[a",{"_index":574,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["matching",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor((ntime",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["math.floor(ntime",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["max",{"_index":869,"title":{},"body":{"index.html":{}}}],["maxfiles",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":561,"title":{},"body":{"injectables/ProfileService.html":{}}}],["meta",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["minlength",{"_index":447,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["minlength(8",{"_index":449,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["mins",{"_index":826,"title":{},"body":{"index.html":{}}}],["minute",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["minutes",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["miscellaneous",{"_index":691,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":963,"title":{},"body":{"index.html":{}}}],["mm",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":797,"title":{},"body":{"index.html":{}}}],["module",{"_index":81,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modulemetadata",{"_index":616,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":901,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":912,"title":{},"body":{"index.html":{}}}],["more",{"_index":972,"title":{},"body":{"index.html":{}}}],["moved",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["moving",{"_index":882,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":902,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":674,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["mysql/mariadb",{"_index":898,"title":{},"body":{"index.html":{}}}],["name",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":909,"title":{},"body":{"index.html":{}}}],["needed",{"_index":353,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["nest",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestfactory.create",{"_index":865,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":872,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":862,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/JwtStrategy.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":617,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["nestjs/core",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":656,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/swagger",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["new",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nginx",{"_index":744,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":699,"title":{},"body":{"index.html":{}}}],["non",{"_index":723,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":529,"title":{},"body":{"injectables/ProfileService.html":{}}}],["note",{"_index":749,"title":{},"body":{"index.html":{}}}],["npm",{"_index":776,"title":{},"body":{"index.html":{}}}],["ntime",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["number(time",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["object",{"_index":330,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["occurs",{"_index":890,"title":{},"body":{"index.html":{}}}],["offers",{"_index":845,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":578,"title":{},"body":{"classes/Roles.html":{}}}],["one",{"_index":487,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"index.html":{}}}],["ones",{"_index":859,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":493,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(type",{"_index":497,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(undefined",{"_index":483,"title":{},"body":{"classes/Profile.html":{}}}],["open",{"_index":941,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["operating",{"_index":738,"title":{},"body":{"index.html":{}}}],["operations",{"_index":842,"title":{},"body":{"index.html":{}}}],["optional",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["options",{"_index":596,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.imports",{"_index":611,"title":{},"body":{"modules/WinstonModule.html":{}}}],["options.inject",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.usefactory",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":747,"title":{},"body":{"index.html":{}}}],["over",{"_index":848,"title":{},"body":{"index.html":{}}}],["overview",{"_index":981,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":650,"title":{"dependencies.html":{}},"body":{}}],["package.jsoncomes",{"_index":880,"title":{},"body":{"index.html":{}}}],["pages",{"_index":927,"title":{},"body":{"index.html":{}}}],["panel",{"_index":732,"title":{},"body":{"index.html":{}}}],["param",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["parameter",{"_index":346,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parameters",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["param{req",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["parse",{"_index":360,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parse(fs.readfilesync(filepath",{"_index":367,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["particular",{"_index":552,"title":{},"body":{"injectables/ProfileService.html":{}}}],["passport",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["password).digest('hex",{"_index":543,"title":{},"body":{"injectables/ProfileService.html":{}}}],["password.transformer",{"_index":494,"title":{},"body":{"classes/Profile.html":{}}}],["passwords",{"_index":480,"title":{},"body":{"classes/Profile.html":{}}}],["passwordtransformer",{"_index":450,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["paylaod",{"_index":437,"title":{},"body":{"classes/LoginPayload.html":{}}}],["payload",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{}}}],["payload/login.payload",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["payload/register.payload",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["per",{"_index":879,"title":{},"body":{"index.html":{}}}],["perform",{"_index":841,"title":{},"body":{"index.html":{}}}],["performance",{"_index":846,"title":{},"body":{"index.html":{}}}],["permit",{"_index":584,"title":{},"body":{"classes/Roles.html":{}}}],["personal",{"_index":773,"title":{},"body":{"index.html":{}}}],["pick",{"_index":613,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["please",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["port",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["ports",{"_index":836,"title":{},"body":{"index.html":{}}}],["possession",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["post",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":900,"title":{},"body":{"index.html":{}}}],["pre",{"_index":778,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["prerequisite",{"_index":759,"title":{},"body":{"index.html":{}}}],["prerequisites",{"_index":722,"title":{},"body":{"index.html":{}}}],["prettyprintseconds",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["prettyprintseconds(time",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["primarygeneratedcolumn",{"_index":470,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["private",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["pro",{"_index":755,"title":{},"body":{"index.html":{}}}],["procedure",{"_index":746,"title":{},"body":{"index.html":{}}}],["proceed",{"_index":851,"title":{},"body":{"index.html":{}}}],["prod",{"_index":378,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["produce",{"_index":933,"title":{},"body":{"index.html":{}}}],["production",{"_index":779,"title":{},"body":{"index.html":{}}}],["profile",{"_index":80,"title":{"classes/Profile.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{}}}],["profile.entity",{"_index":505,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["profile.roles",{"_index":589,"title":{},"body":{"classes/Roles.html":{}}}],["profile.service",{"_index":504,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile/profile.entity",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"classes/Roles.html":{}}}],["profile/profile.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["profile/profile.service",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["profilemodule",{"_index":109,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":515,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profiles",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"classes/Profile.html":{},"classes/Roles.html":{}}}],["profiles.password",{"_index":540,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profileservice",{"_index":63,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":698,"title":{},"body":{"index.html":{}}}],["project",{"_index":800,"title":{},"body":{"index.html":{}}}],["promise",{"_index":620,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["properties",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["prototype",{"_index":714,"title":{},"body":{"index.html":{}}}],["provide",{"_index":318,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":520,"title":{},"body":{"injectables/ProfileService.html":{}}}],["provider",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["provides",{"_index":947,"title":{},"body":{"index.html":{}}}],["public",{"_index":608,"title":{},"body":{"modules/WinstonModule.html":{}}}],["purge",{"_index":891,"title":{},"body":{"index.html":{}}}],["purger",{"_index":888,"title":{},"body":{"index.html":{}}}],["quick",{"_index":801,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":713,"title":{},"body":{"index.html":{}}}],["random",{"_index":820,"title":{},"body":{"index.html":{}}}],["rate",{"_index":665,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ratelimiter",{"_index":871,"title":{},"body":{"index.html":{}}}],["react",{"_index":788,"title":{},"body":{"index.html":{}}}],["read",{"_index":809,"title":{},"body":{"index.html":{}}}],["readable",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["received",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["received'})@apiresponse({status",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["recommended",{"_index":831,"title":{},"body":{"index.html":{}}}],["records",{"_index":562,"title":{},"body":{"injectables/ProfileService.html":{}}}],["reflect",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterPayload.html":{}}}],["register(@body",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerpayload",{"_index":216,"title":{"classes/RegisterPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"coverage.html":{}}}],["registration",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":951,"title":{},"body":{"index.html":{}}}],["relations",{"_index":535,"title":{},"body":{"injectables/ProfileService.html":{}}}],["relationship",{"_index":489,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["remove",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["removed",{"_index":816,"title":{},"body":{"index.html":{}}}],["removing",{"_index":892,"title":{},"body":{"index.html":{}}}],["replace",{"_index":771,"title":{},"body":{"index.html":{}}}],["repository",{"_index":512,"title":{},"body":{"injectables/ProfileService.html":{}}}],["represent",{"_index":486,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["represents",{"_index":399,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["req",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":878,"title":{},"body":{"index.html":{}}}],["required",{"_index":379,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["reset",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["resolve",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["resource",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["respectively",{"_index":807,"title":{},"body":{"index.html":{}}}],["restful",{"_index":945,"title":{},"body":{"index.html":{}}}],["result",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["rich",{"_index":911,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":893,"title":{},"body":{"index.html":{}}}],["role",{"_index":498,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["role.profile",{"_index":499,"title":{},"body":{"classes/Profile.html":{}}}],["role.role",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["roles",{"_index":131,"title":{"classes/Roles.html":{}},"body":{"modules/AppModule.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesbuilder",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":513,"title":{},"body":{"injectables/ProfileService.html":{}}}],["root",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["rotate",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["rotatefile",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["routes",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["run",{"_index":780,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["safe",{"_index":785,"title":{},"body":{"index.html":{}}}],["save",{"_index":896,"title":{},"body":{"index.html":{}}}],["saveif",{"_index":895,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":703,"title":{},"body":{"index.html":{}}}],["schema",{"_index":370,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["scheme",{"_index":381,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["schemes",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["second",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["seconds",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["secretorkey",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":718,"title":{},"body":{"index.html":{}}}],["server",{"_index":704,"title":{},"body":{"index.html":{}}}],["service",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ProfileService.html":{}}}],["set",{"_index":344,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["setdescription(swagger_api_description",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":542,"title":{},"body":{"injectables/ProfileService.html":{}}}],["setparameter('username",{"_index":541,"title":{},"body":{"injectables/ProfileService.html":{}}}],["setschemes(...swagger_api_schemes",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":774,"title":{},"body":{"index.html":{}}}],["settitle(swagger_api_name",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":763,"title":{},"body":{"index.html":{}}}],["setversion(swagger_api_current_version",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":815,"title":{},"body":{"index.html":{}}}],["side",{"_index":705,"title":{},"body":{"index.html":{}}}],["signed",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":931,"title":{},"body":{"index.html":{}}}],["sits",{"_index":833,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["specification",{"_index":943,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":967,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":899,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":908,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":693,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.hmr.ts",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.constants.ts",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.interfaces.ts",{"_index":988,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../winston.providers.ts",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.hmr.ts",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/modules/app/app.controller.ts:30",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:44",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:61",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.module.ts",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/app/app.roles.ts",{"_index":629,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.service.ts",{"_index":182,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/modules/app/app.service.ts:24",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/app.service.ts:9",{"_index":185,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/roles.entity.ts",{"_index":575,"title":{},"body":{"classes/Roles.html":{},"coverage.html":{}}}],["src/modules/app/roles.entity.ts:14",{"_index":576,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:25",{"_index":582,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:31",{"_index":580,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:17",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:37",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:54",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:69",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:12",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:33",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/payload/login.payload.ts",{"_index":436,"title":{},"body":{"classes/LoginPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/login.payload.ts:16",{"_index":443,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/login.payload.ts:26",{"_index":440,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts",{"_index":563,"title":{},"body":{"classes/RegisterPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/register.payload.ts:23",{"_index":565,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:33",{"_index":571,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:43",{"_index":569,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:53",{"_index":570,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/config/config.module.ts",{"_index":316,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/modules/config/config.service.ts",{"_index":322,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/modules/config/config.service.ts:19",{"_index":328,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:35",{"_index":351,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:77",{"_index":335,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:8",{"_index":410,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/modules/config/config.service.ts:86",{"_index":342,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/profile/password.transformer.ts",{"_index":451,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["src/modules/profile/password.transformer.ts:12",{"_index":460,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/password.transformer.ts:20",{"_index":456,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/profile.entity.ts",{"_index":466,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/modules/profile/profile.entity.ts:17",{"_index":471,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:23",{"_index":491,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:29",{"_index":473,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:35",{"_index":469,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:41",{"_index":485,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:52",{"_index":478,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":503,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":507,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:18",{"_index":514,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:35",{"_index":522,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:43",{"_index":524,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:52",{"_index":526,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:68",{"_index":517,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:89",{"_index":518,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/winston/winston.constants.ts",{"_index":634,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/winston/winston.interfaces.ts",{"_index":612,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/winston/winston.module.ts",{"_index":590,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:21",{"_index":594,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:35",{"_index":601,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.providers.ts",{"_index":637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/constants.ts",{"_index":638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/index.ts",{"_index":646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":730,"title":{},"body":{"index.html":{}}}],["start",{"_index":734,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":781,"title":{},"body":{"index.html":{}}}],["started",{"_index":697,"title":{"index.html":{}},"body":{}}],["statements",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":325,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"index.html":{}}}],["status",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["steps",{"_index":852,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":881,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":726,"title":{},"body":{"index.html":{}}}],["svg",{"_index":977,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":671,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swagger_api_auth_location",{"_index":639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_auth_name",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_current_version",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_description",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_name",{"_index":643,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_root",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_schemes",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup(swagger_api_root",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":739,"title":{},"body":{"index.html":{}}}],["table",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":918,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":922,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":921,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":920,"title":{},"body":{"index.html":{}}}],["testing",{"_index":914,"title":{},"body":{"index.html":{}}}],["tests",{"_index":916,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":966,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":913,"title":{},"body":{"index.html":{}}}],["this.appservice.root",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(profile",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('app_url",{"_index":193,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.envconfig",{"_index":368,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig.app_env",{"_index":407,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig[key",{"_index":406,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.expiration",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyusername(payload.username",{"_index":545,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.jwtservice.sign",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.info('logging",{"_index":194,"title":{},"body":{"injectables/AppService.html":{}}}],["this.prettyprintseconds(this.expiration",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.profilerepository",{"_index":537,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.create",{"_index":557,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.delete",{"_index":559,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.findone",{"_index":536,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.findone(id",{"_index":534,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.save",{"_index":556,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profileservice.create(payload",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.profileservice.delete(username",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["this.profileservice.getbyusernameandpass",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesrepository.save(roles",{"_index":555,"title":{},"body":{"injectables/ProfileService.html":{}}}],["throw",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ProfileService.html":{}}}],["thus",{"_index":887,"title":{},"body":{"index.html":{}}}],["time",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timewindow",{"_index":870,"title":{},"body":{"index.html":{}}}],["to(value",{"_index":459,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":819,"title":{},"body":{"index.html":{}}}],["toolbox",{"_index":757,"title":{},"body":{"index.html":{}}}],["transform",{"_index":461,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":452,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"dependencies.html":{}}}],["transports",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":733,"title":{},"body":{"index.html":{}}}],["true",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":442,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@isemail()@isnotempty",{"_index":564,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":439,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@matches(/^[a",{"_index":566,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["try",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["two",{"_index":855,"title":{},"body":{"index.html":{}}}],["type",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":986,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":924,"title":{},"body":{"index.html":{}}}],["typeorm",{"_index":463,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":506,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forrootasync",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":838,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["types/express",{"_index":894,"title":{},"body":{"index.html":{}}}],["typing",{"_index":932,"title":{},"body":{"index.html":{}}}],["ui",{"_index":686,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":484,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["undefined})@exclude",{"_index":477,"title":{},"body":{"classes/Profile.html":{}}}],["unique",{"_index":496,"title":{},"body":{"classes/Profile.html":{}}}],["unit",{"_index":915,"title":{},"body":{"index.html":{}}}],["unused",{"_index":889,"title":{},"body":{"index.html":{}}}],["up",{"_index":798,"title":{},"body":{"index.html":{}}}],["url",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["use",{"_index":802,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":817,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(authguard",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(undefined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["username",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginPayload.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["useroles",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["usevalue",{"_index":319,"title":{},"body":{"modules/ConfigModule.html":{}}}],["using",{"_index":767,"title":{},"body":{"index.html":{}}}],["usually",{"_index":834,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":811,"title":{},"body":{"index.html":{}}}],["utilizing",{"_index":728,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":472,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["valid",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid('dev",{"_index":377,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validate",{"_index":371,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":354,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validatedenvconfig",{"_index":402,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateinput",{"_index":326,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":350,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validates",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":400,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":448,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["value",{"_index":339,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PasswordTransformer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":465,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["values",{"_index":359,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["valuetransformer",{"_index":454,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":349,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{},"index.html":{}}}],["variables",{"_index":333,"title":{"miscellaneous/variables.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":956,"title":{},"body":{"index.html":{}}}],["vm",{"_index":761,"title":{},"body":{"index.html":{}}}],["vue",{"_index":789,"title":{},"body":{"index.html":{}}}],["web",{"_index":729,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webtoken_expiration_time",{"_index":385,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["webtoken_secret_key",{"_index":383,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["where('profiles.username",{"_index":539,"title":{},"body":{"injectables/ProfileService.html":{}}}],["whether",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["windowms",{"_index":875,"title":{},"body":{"index.html":{}}}],["windows",{"_index":752,"title":{},"body":{"index.html":{}}}],["winson",{"_index":595,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.interfaces",{"_index":604,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.providers",{"_index":607,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.transports.console",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["winston/winston.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_options",{"_index":635,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winston_module_provider",{"_index":636,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule",{"_index":110,"title":{"modules/WinstonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["winstonmodule.forrootasync",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleasyncoptions",{"_index":600,"title":{"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmoduleoptions",{"_index":593,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":766,"title":{},"body":{"index.html":{}}}],["work",{"_index":949,"title":{},"body":{"index.html":{}}}],["workaround",{"_index":756,"title":{},"body":{"index.html":{}}}],["works",{"_index":753,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":906,"title":{},"body":{"index.html":{}}}],["writing",{"_index":482,"title":{},"body":{"classes/Profile.html":{}}}],["x1f3d7",{"_index":843,"title":{},"body":{"index.html":{}}}],["x1f433",{"_index":736,"title":{},"body":{"index.html":{}}}],["x1f465",{"_index":962,"title":{},"body":{"index.html":{}}}],["x1f4a1",{"_index":923,"title":{},"body":{"index.html":{}}}],["x1f4da",{"_index":710,"title":{},"body":{"index.html":{}}}],["x1f4dd",{"_index":940,"title":{},"body":{"index.html":{}}}],["x1f50a",{"_index":959,"title":{},"body":{"index.html":{}}}],["x1f512",{"_index":808,"title":{},"body":{"index.html":{}}}],["x1f5b4",{"_index":897,"title":{},"body":{"index.html":{}}}],["x1f680",{"_index":762,"title":{},"body":{"index.html":{}}}],["x1f6e0",{"_index":721,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":731,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":777,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":970,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":568,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["za",{"_index":567,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["zippedarchive",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                getProfile\n                            \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined, ACGuard)@UseRoles({resource: 'profiles', action: 'delete', possession: 'any'})@Delete('/api/profile/:username')@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:61\n                \n            \n\n\n            \n                \n                    Delete route to remove profiles from app\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/api/profile')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:44\n                \n            \n\n\n            \n                \n                    Debug route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:30\n                \n            \n\n\n            \n                \n                    Main route\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application environment url\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Req, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProfileService } from '../profile/profile.service';\nimport { ACGuard, UseRoles } from 'nest-access-control';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param appService\n   * @param profileService\n   */\n  constructor(\n    private readonly appService: AppService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Main route\n   * @returns {string} the application environment url\n   */\n  @Get()\n  @UseGuards(AuthGuard())\n  root(): string {\n    return this.appService.root();\n  }\n\n  // These routes can be moved to the profile module.\n\n  /**\n   * Debug route\n   * @param{Req} req the request body\n   */\n  @Get('/api/profile')\n  @UseGuards(AuthGuard())\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  getProfile(@Req() req) {\n    return req.user;\n  }\n\n  /**\n   * Delete route to remove profiles from app\n   * @param {string} username the username to remove\n   */\n  @UseGuards(AuthGuard(), ACGuard)\n  @UseRoles({\n    resource: 'profiles',\n    action: 'delete',\n    possession: 'any',\n  })\n  @Delete('/api/profile/:username')\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  async delete(@Param('username') username: string) {\n    return await this.profileService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            WinstonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as winston from 'winston';\nimport * as rotateFile from 'winston-daily-rotate-file';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '../config/config.module';\nimport { ConfigService } from '../config/config.service';\nimport { AuthModule } from '../auth/auth.module';\nimport { ProfileModule } from '../profile/profile.module';\nimport { WinstonModule } from '../winston/winston.module';\nimport { AccessControlModule } from 'nest-access-control';\nimport { roles } from './app.roles';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + './../**/**.entity{.ts,.js}'],\n          synchronize: configService.isEnv('dev'),\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.isEnv('dev')\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new rotateFile({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AccessControlModule.forRoles(roles),\n    ConfigModule,\n    AuthModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.service.ts\n        \n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/app/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logger service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/app/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Main application method\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application url\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '../config/config.service';\nimport { Logger } from 'winston';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {ConfigService} config configuration service\n   * @param {Logger} logger logger service\n   */\n  constructor(\n    private config: ConfigService,\n    @Inject('winston') private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Main application method\n   * @returns {string} the application url\n   */\n  root(): string {\n    const appURL = this.config.get('APP_URL');\n    this.logger.info('Logging the APP_URL -> ' + appURL);\n    return appURL;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n                    Authentication route to login\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginPayload } from './payload/login.payload';\nimport { RegisterPayload } from './payload/register.payload';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Authentication Controller\n */\n@Controller('api/auth')\n@ApiUseTags('authentication')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Authentication route to login\n   * @param {LoginPayload} payload the login dto\n   */\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginPayload) {\n    const profile = await this.authService.validateUser(payload);\n    return await this.authService.createToken(profile);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterPayload} payload the registration dto\n   */\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterPayload) {\n    const profile = await this.profileService.create(payload);\n    return await this.authService.createToken(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { ProfileModule } from '../profile/profile.module';\nimport { ConfigModule } from '../config/config.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '../config/config.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_SECRET_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n    ConfigModule,\n    ProfileModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [PassportModule.register({ defaultStrategy: 'jwt' })],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Private\n                                prettyPrintSeconds\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                profile service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on payload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            prettyPrintSeconds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prettyPrintSeconds(time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n                    Formats the time in seconds into human-readable format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:69\n                \n            \n\n\n            \n                \n                    Validates whether or not the profile exists in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                        Time in seconds when the token is to expire\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} config configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on payload\n   * @param {Profile} param dto to generate token from\n   */\n  async createToken({ id, username, name, email }: Profile) {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   */\n  private prettyPrintSeconds(time: string) {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   */\n  async validateUser({ username, password }: LoginPayload) {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService('.env'),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Config Service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                isEnv\n                            \n                            \n                                    Private\n                                    Static\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                        Object that will contain the injected environment variables\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:77\n                \n            \n\n\n            \n                \n                    Fetches the key from the configuration file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the associated value for a given key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEnv\n                        \n                        \n                    \n                \n            \n            \n                \nisEnv(env: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:86\n                \n            \n\n\n            \n                \n                    Checks whether the application environment set in the configuration file matches the environment parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not the environment variable matches the application environment\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:35\n                \n            \n\n\n            \n                \n                    Ensures all needed variables are set, and returns the validated JavaScript object\nincluding the applied default values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Key-value mapping\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtPayload, done)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:33\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                            JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    done\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to resolve the request user with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy, JwtPayload } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ConfigService } from '../config/config.service';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService\n   */\n  constructor(\n    readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('WEBTOKEN_SECRET_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {JwtPayload} jwtpayload validation method for jwt token\n   * @param {any} done callback to resolve the request user with\n   */\n  async validate({ iat, exp, id }: JwtPayload, done) {\n    const timeDiff = exp - iat;\n    if (timeDiff  role.role) });\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginPayload.html":{"url":"classes/LoginPayload.html","title":"class - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/login.payload.ts\n        \n\n            \n                Description\n            \n            \n                Login Paylaod Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:26\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:16\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Paylaod Class\n */\nexport class LoginPayload {\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/password.transformer.ts\n        \n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            from\n                        \n                        \n                    \n                \n            \n            \n                \nfrom(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        value to return\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            to\n                        \n                        \n                    \n                \n            \n            \n                \nto(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param value string to hash\n   */\n  to(value) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash\n   * @param value value to return\n   */\n  from(value) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.entity.ts\n        \n\n            \n                Description\n            \n            \n                Profile Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:35\n                            \n                        \n\n                \n                    \n                        Email column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:17\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Name column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'password', length: 255, transformer: undefined})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:52\n                            \n                        \n\n                \n                    \n                        Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Roles[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Column to represent a one to many relationship with the roles entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Username column\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { PasswordTransformer } from './password.transformer';\nimport { Roles } from '../app/roles.entity';\n\n/**\n * Profile Entity Class\n */\n@Entity({\n  name: 'profiles',\n})\nexport class Profile {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(type => Roles, role => role.profile)\n  roles: Roles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { Profile } from './profile.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Roles } from '../app/roles.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile, Roles])],\n  providers: [ProfileService],\n  exports: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Profile Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getByUsername\n                            \n                            \n                                    Async\n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:68\n                \n            \n\n\n            \n                \n                    Creates a profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        profile payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:89\n                \n            \n\n\n            \n                \n                    Deletes profile from provided username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:35\n                \n            \n\n\n            \n                \n                    Fetches profile from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:43\n                \n            \n\n\n            \n                \n                    Fetches profile from database by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByUsernameAndPass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:52\n                \n            \n\n\n            \n                \n                    Fetches profile by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   */\n  async get(id: number) {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   */\n  async getByUsername(username: string) {\n    return await this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   */\n  async getByUsernameAndPass(username: string, password: string) {\n    return await this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Creates a profile\n   * @param {RegisterPayload} payload profile payload\n   */\n  async create(payload: RegisterPayload) {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making roles for a particular profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return await this.profileRepository.save(\n      this.profileRepository.create({ ...payload, roles }),\n    );\n  }\n\n  /**\n   * Deletes profile from provided username\n   * @param {string} username\n   */\n  async delete(username: string) {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterPayload.html":{"url":"classes/RegisterPayload.html","title":"class - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/register.payload.ts\n        \n\n            \n                Description\n            \n            \n                Register Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:23\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:43\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:53\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:33\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport {\n  IsAlpha,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Register Payload Class\n */\nexport class RegisterPayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Roles.html":{"url":"classes/Roles.html","title":"class - Roles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/roles.entity.ts\n        \n\n            \n                Description\n            \n            \n                Roles Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                profile\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:14\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Profile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Column to represent a many to one relationship with the profile entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AppRoles\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AppRoles, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { AppRoles } from './app.roles';\nimport { Profile } from '../profile/profile.entity';\n\n/**\n * Roles Entity Class\n */\n@Entity()\nexport class Roles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: AppRoles,\n    default: AppRoles.ADMIN_DELETE_PROFILES,\n  })\n  role: AppRoles;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(type => Profile, profile => profile.roles, { onDelete: 'CASCADE' })\n  profile: Profile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WinstonModule.html":{"url":"modules/WinstonModule.html","title":"module - WinstonModule","body":"\n                   \n\n\n\n\n    Modules\n    WinstonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/winston/winston.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: WinstonModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:21\n                \n            \n\n\n            \n                \n                    Constructor for winson module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: WinstonModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:35\n                \n            \n\n\n            \n                \n                    Asynchronous constructor for winston module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport {\n  WinstonModuleAsyncOptions,\n  WinstonModuleOptions,\n} from './winston.interfaces';\nimport {\n  createWinstonAsyncProviders,\n  createWinstonProviders,\n} from './winston.providers';\n\n@Global()\n@Module({})\n/**\n * Represents a Winston Module\n */\nexport class WinstonModule {\n  /**\n   * Constructor for winson module\n   * @param options\n   */\n  public static forRoot(options: WinstonModuleOptions): DynamicModule {\n    const providers = createWinstonProviders(options);\n\n    return {\n      module: WinstonModule,\n      providers,\n      exports: providers,\n    };\n  }\n\n  /**\n   * Asynchronous constructor for winston module\n   * @param options\n   */\n  public static forRootAsync(\n    options: WinstonModuleAsyncOptions,\n  ): DynamicModule {\n    const providers = createWinstonAsyncProviders(options);\n\n    return {\n      module: WinstonModule,\n      imports: options.imports,\n      providers,\n      exports: providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WinstonModuleAsyncOptions.html":{"url":"interfaces/WinstonModuleAsyncOptions.html","title":"interface - WinstonModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WinstonModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/winston/winston.interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Asynchronous winston module options\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Providers to inject\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default factory method that returns winston module options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { LoggerOptions } from 'winston';\n\n/**\n * Logger options\n */\nexport type WinstonModuleOptions = LoggerOptions;\n\n/**\n * Asynchronous winston module options\n */\nexport interface WinstonModuleAsyncOptions\n  extends Pick {\n  /**\n   * Default factory method that returns winston module options\n   */\n  useFactory: (\n    ...args: any[]\n  ) => Promise | WinstonModuleOptions;\n\n  /**\n   * Providers to inject\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.hmr.ts\n            \n            variable\n            module\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/app/app.roles.ts\n            \n            variable\n            roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/roles.entity.ts\n            \n            class\n            Roles\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/login.payload.ts\n            \n            class\n            LoginPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/register.payload.ts\n            \n            class\n            RegisterPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            interface\n            EnvConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/profile/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.entity.ts\n            \n            class\n            Profile\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_PROVIDER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.interfaces.ts\n            \n            interface\n            WinstonModuleAsyncOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonAsyncProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_LOCATION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_SCHEMES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/index.ts\n            \n            variable\n            configureOpenAPI\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : 16.1.4\n        \n            @nestjs/common : 6.7.2\n        \n            @nestjs/core : 6.7.2\n        \n            @nestjs/jwt : 6.1.1\n        \n            @nestjs/passport : 6.1.0\n        \n            @nestjs/platform-express : 6.7.2\n        \n            @nestjs/platform-fastify : 6.7.2\n        \n            @nestjs/swagger : 3.1.0\n        \n            @nestjs/typeorm : 6.1.3\n        \n            class-transformer : 0.2.3\n        \n            class-validator : 0.10.0\n        \n            crypto : 1.0.1\n        \n            dotenv : 8.1.0\n        \n            express-rate-limit : 5.0.0\n        \n            fastify-helmet : 3.0.1\n        \n            fastify-rate-limit : 2.3.0\n        \n            fastify-swagger : 2.4.0\n        \n            helmet : 3.21.1\n        \n            mysql : 2.17.1\n        \n            nest-access-control : 2.0.1\n        \n            passport : 0.4.0\n        \n            passport-jwt : 4.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rimraf : 3.0.0\n        \n            rxjs : 6.5.3\n        \n            swagger-ui-express : 4.1.1\n        \n            typeorm : 0.2.19\n        \n            winston : 3.2.1\n        \n            winston-daily-rotate-file : 4.1.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/app/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                        \n                            \n                                 DEFAULT_READ\n                            \n                        \n                        \n                            \n                                Value : DEFAULT_READ\n                            \n                        \n                        \n                            \n                                 ADMIN_DELETE_PROFILES\n                            \n                        \n                        \n                            \n                                Value : ADMIN_DELETE_PROFILES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n&#x1F4DA; Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication, logging, security, and database features out of the box.\n\n&#x1F6E0;️ Prerequisites\nNon Docker\n\nPlease make sure to have MYSQL locally by utilizing a web server stack XAMPP. The control panel can then trigger MYSQL to start on localhost.\n\nDocker &#x1F433;\n\nPlease make sure to have docker desktop on the operating system of choice to quickly compose both MariaDB and Nginx. Then follow the docker procedure outlined below.\n\nNote: Docker Desktop comes free on both Mac and Windows, but it only works with Windows 10 Pro. A workaround is to get Docker Toolbox which will bypass the Windows 10 Pro prerequisite by executing in a VM.\n\n&#x1F680; Setup\nManual Deployment without Docker\n\nCreate a .env file using the cp .env.example .env command and replace the existing environment variables with personal configuration settings (username and password database).\n\nDownload dependencies using npm i or yarn\n\nStart the app for pre-production using npm run start or npm run start:dev for development (the app will be exposed on the port 9000; safe port that doesn't conflict with React, Angular, or Vue)\n\n\nDeploying with Docker &#x1F433;\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will set up and run the docker project for quick use (building both Dockerfile and Dockerfile-Nginx). Then the web application, Nginx, and MariaDB will be exposed to http://localhost:9000, http://localhost:80, and http://localhost:3306 respectively.\n\n&#x1F512; Environment Configuration\nBy default, the application comes with a config module that will inject the ConfigService to read every environment variable from the .env file.\nAPP_ENV - the application environment it will be executing as, either in development or production. Determines the type of logging options to utilize. Options: dev or prod. \nAPP_URL - the base URL for the application. Made mainly to showcase the ConfigService and can be removed if not used.\nWEBTOKEN_SECRET_KEY - the secret key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this. Not \nWEBTOKEN_EXPIRATION_TIME - the time in seconds indicating when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not recommended).\nDB_HOST - the endpoint where this database sits (usually localhost but can be a static address).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n&#x1F3D7; Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But this can be changed to use Express framework instead of Fastify. Please proceed the steps below to change between the two.\n\nReplace the following lines of code in the main.ts file with the ones detailed below.\n\n// from (fastify):\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport * as headers from 'fastify-helmet';\nimport * as fastifyRateLimiter from 'fastify-rate-limit';\nconst app = await NestFactory.create(\n  AppModule,\n  new FastifyAdapter({ logger: console }),\n);\napp.register(headers);\napp.register(fastifyRateLimiter, {\n  max: 100,\n  timeWindow: '1 minute',\n});\n\n// to (express):\nimport * as headers from 'helmet';\nimport * as rateLimiter from 'express-rate-limit';\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\napp.use(headers());\napp.use(\n  rateLimiter({\n    windowMs: 60, // 1 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }),\n);Note: The package.jsoncomes with dependencies for both Express and Fastify to support moving between two. But this can leave the project bloated especially when only one web framework is being used. Thus it is recommended that when deploying to production, a purger of unused dependencies occurs. \nIf you choose to use Fastify, this command will purge all of the Express dependencies:\n# removing Express dependencies\n$ npm rm @nestjs/platform-express express-rate-limit helmet swagger-ui-express @types/express --saveIf you choose to use Express, this command will purge all of the Fastify dependencies:\n# removing Fastify dependencies\n$ npm rm @nestjs/platform-fastify fastify-helmet fastify-rate-limit fastify-swagger --save\n&#x1F5B4; Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but support for other database types like SQLite, Postgres, MongoDB, and MSSQL exist. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like sqlite3 if necessary.\nNote: For MongoDB, TypeORM is not a feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n✅ Testing\nDocker &#x1F433;\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n&#x1F4A1; TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, simply, by typing npm run typedocs. This will produce a docs folder with the required front-end files and start hosting on localhost port 8080.\n# generate docs for code\n$ npm run typedocs\n&#x1F4DD; Open API\nOut of the box, the web app comes with an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n&#x1F50A; Logs\nThis boilerplate comes with a Winston module for logging, the configurations for Winston can be found in the app module.\n\n&#x1F465; Support\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\n\nLicense\nNest is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WinstonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            WinstonModuleOptions   (src/.../winston.interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    WinstonModuleOptions\n                \n            \n            \n                \n                    Logger options\n\n                \n            \n            \n                \n                        LoggerOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configureOpenAPI   (src/.../index.ts)\n                        \n                        \n                            createWinstonAsyncProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            createWinstonProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            module   (src/.../main.hmr.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_LOCATION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_CURRENT_VERSION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_DESCRIPTION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_ROOT   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_SCHEMES   (src/.../constants.ts)\n                        \n                        \n                            WINSTON_MODULE_OPTIONS   (src/.../winston.constants.ts)\n                        \n                        \n                            WINSTON_MODULE_PROVIDER   (src/.../winston.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/swagger/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configureOpenAPI\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (app: INestApplication) => {\n  const options = new DocumentBuilder()\n    .setTitle(SWAGGER_API_NAME)\n    .setDescription(SWAGGER_API_DESCRIPTION)\n    .setVersion(SWAGGER_API_CURRENT_VERSION)\n    .setSchemes(...SWAGGER_API_SCHEMES)\n    .addBearerAuth(SWAGGER_API_AUTH_NAME, SWAGGER_API_AUTH_LOCATION)\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup(SWAGGER_API_ROOT, app, document);\n}\n                        \n                    \n\n                \n                    \n                        Open api configuration to be used as a basis for web application\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonAsyncProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  options: WinstonModuleAsyncOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_OPTIONS,\n      useFactory: options.useFactory,\n      inject: options.inject || [],\n    },\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: (loggerOpts: LoggerOptions) => createLogger(loggerOpts),\n      inject: [WINSTON_MODULE_OPTIONS],\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Async constructor for a winston provider\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  loggerOpts: WinstonModuleOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: () => createLogger(loggerOpts),\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Constructor a winston provider\n\n                    \n                \n\n            \n        \n\n    src/main.hmr.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Represents the webpack meta data\n\n                    \n                \n\n            \n        \n\n    src/modules/app/app.roles.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolesBuilder\n\n                        \n                    \n                    \n                        \n                            Default value : new RolesBuilder()\n                        \n                    \n\n                \n                    \n                        Roles Builder\n\n                    \n                \n\n            \n        \n\n    src/swagger/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_LOCATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'header'\n                        \n                    \n\n                \n                    \n                        Where the SWAGGER_API_AUTH_NAME will be used in the request\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Authorization'\n                        \n                    \n\n                \n                    \n                        The default authentication method\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_CURRENT_VERSION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n\n                \n                    \n                        Current version of the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_DESCRIPTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API Description'\n                        \n                    \n\n                \n                    \n                        A short description for api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API'\n                        \n                    \n\n                \n                    \n                        The name given to the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_ROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'api/docs'\n                        \n                    \n\n                \n                    \n                        The endpoint for open api ui\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_SCHEMES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Default value : ['http', 'https']\n                        \n                    \n\n                \n                    \n                        Types of api schemes\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'WinstonModuleOptions'\n                        \n                    \n\n                \n                    \n                        Token for the type of configuration to be used when declaring in the app module\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_PROVIDER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'winston'\n                        \n                    \n\n                \n                    \n                        An identifier to use for injecting the winston provider\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
