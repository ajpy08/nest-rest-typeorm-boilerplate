var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.505,1,2.035]],["body/controllers/AppController.html",[0,2.575,1,2.917,2,1.63,3,0.396,4,0.396,5,0.255,6,2.864,7,1.223,8,3.689,9,0.396,10,1.283,11,5.431,12,1.489,13,0.034,14,3.437,15,3.291,16,5.431,17,3.927,18,2.864,19,3.291,20,3.291,21,0.615,22,3.437,23,1.532,24,4.524,25,3.927,26,4.25,27,0.65,28,0.814,29,3.791,30,3.689,31,1.63,32,1.252,33,1.149,34,2.942,35,2.864,36,2.917,37,3.437,38,0.396,39,0.091,40,1.364,41,1.489,42,1.79,43,2.203,44,1.63,45,1.056,46,2.917,47,2.486,48,0.889,49,3.437,50,0.023,51,0.023]],["title/modules/AppModule.html",[52,1.26,53,2.035]],["body/modules/AppModule.html",[1,2.647,2,1.64,3,0.475,4,0.268,5,0.257,13,0.034,27,0.683,28,0.551,34,2.666,35,1.94,38,0.268,39,0.062,42,2.381,45,0.715,48,0.895,50,0.018,51,0.018,52,1.373,53,3.728,54,1.104,55,1.499,56,1.94,57,1.94,58,1.94,59,2.945,60,2.945,61,2.945,62,1.991,63,1.34,64,1.213,65,2.328,66,2.218,67,3.532,68,3.808,69,3.566,70,1.34,71,2.328,72,1.94,73,1.94,74,1.684,75,3.46,76,1.34,77,3.44,78,2.328,79,1.492,80,2.93,81,2.328,82,2.328,83,3.46,84,1.94,85,1.94,86,2.328,87,2.328,88,2.328,89,2.328,90,2.328,91,2.328,92,2.328,93,1.94,94,2.328,95,2.502,96,2.328,97,1.94,98,2.328,99,1.94,100,2.328,101,1.94,102,2.328,103,1.94,104,2.328,105,1.94,106,2.328,107,1.94,108,2.328,109,1.94,110,2.328,111,1.94,112,2.328,113,2.328,114,2.986,115,3.44,116,1.94,117,2.328,118,2.328,119,2.328,120,1.684,121,2.328,122,0.268,123,2.328,124,2.328,125,2.328,126,2.328,127,2.328,128,0.848,129,2.328,130,0.924,131,2.328,132,1.213,133,2.328,134,1.492,135,2.328,136,2.328,137,2.328,138,3.46,139,2.882,140,2.328,141,2.167,142,1.684,143,2.328,144,2.328,145,4.129,146,4.571,147,3.46,148,3.46,149,0.62,150,3.46,151,1.814,152,3.46,153,3.46,154,2.328,155,3.46,156,2.328,157,2.328,158,2.328,159,2.328,160,2.328,161,2.328,162,2.328,163,2.328,164,2.328,165,2.328,166,2.328,167,2.328,168,2.328]],["title/injectables/AppService.html",[34,1.654,169,0.821]],["body/injectables/AppService.html",[3,0.4,4,0.4,5,0.258,7,0.992,9,0.4,10,1.292,13,0.034,21,0.82,23,1.538,24,4.722,25,4.099,26,4.272,27,0.628,28,0.823,32,1.265,33,1.161,34,2.387,38,0.4,39,0.092,40,2.164,41,1.504,42,2.84,44,1.646,45,1.067,48,0.898,50,0.024,51,0.024,79,2.226,80,2.937,114,2.511,122,0.4,142,3.313,169,1.185,170,1.646,171,2.893,172,3.817,173,5.453,174,3.473,175,6.026,176,3.473,177,1.067,178,0.685,179,0.979,180,3.473,181,3.473,182,3.473,183,1.809,184,3.473,185,3.473,186,3.473,187,2.511,188,3.473,189,2.893,190,2.511]],["title/controllers/AuthController.html",[0,1.505,191,2.035]],["body/controllers/AuthController.html",[0,2.034,2,1.179,3,0.286,4,0.286,5,0.185,7,1.308,9,0.286,10,1.024,12,1.573,13,0.034,17,2.627,18,3.026,19,3.412,21,0.65,23,1.024,27,0.639,28,0.589,30,3.914,31,1.179,32,0.906,33,0.832,36,2.75,38,0.286,39,0.066,40,1.441,41,2.044,42,1.892,44,1.722,46,3.36,47,2.627,48,0.94,50,0.019,51,0.019,122,0.418,149,0.65,177,1.116,178,0.716,179,1.024,183,1.892,191,2.328,192,2.072,193,2.072,194,2.487,195,3.629,196,2.485,197,4.012,198,3.931,199,2.487,200,2.888,201,2.487,202,4.719,203,4.719,204,3.632,205,4.719,206,4.719,207,2.487,208,4.719,209,3.026,210,2.627,211,3.026,212,2.09,213,3.016,214,3.025,215,1.892,216,2.487,217,2.888,218,2.487,219,4.719,220,2.487,221,2.487,222,1.798,223,2.487,224,2.072,225,2.072,226,1.718,227,1.594,228,2.614,229,2.072,230,2.072,231,2.487,232,2.072,233,2.487,234,2.487,235,2.072,236,2.072,237,2.487,238,2.487,239,1.573,240,3.025,241,2.487,242,3.632,243,2.487,244,2.487,245,2.487]],["title/modules/AuthModule.html",[52,1.26,59,1.827]],["body/modules/AuthModule.html",[2,2.012,3,0.357,4,0.357,5,0.23,13,0.034,27,0.7,28,0.734,38,0.357,39,0.082,48,0.801,50,0.022,51,0.022,52,1.684,54,1.469,55,1.838,59,3.529,62,2.442,63,1.783,64,1.614,66,2.72,67,3.068,68,4.032,69,3.337,70,1.783,74,2.24,76,1.783,114,2.24,115,2.581,149,0.555,191,3.102,196,1.469,226,2.051,227,1.986,228,3.194,229,2.581,246,2.581,247,2.581,248,2.581,249,3.529,250,3.098,251,3.535,252,3.098,253,2.24,254,3.098,255,1.986,256,1.838,257,3.098,258,1.986,259,1.614,260,3.098,261,3.098,262,2.581,263,3.098,264,3.098,265,1.783,266,3.098,267,3.098,268,2.581,269,3.098,270,4.243,271,3.098,272,1.783]],["title/injectables/AuthService.html",[169,0.821,228,1.654]],["body/injectables/AuthService.html",[3,0.27,4,0.27,5,0.174,7,0.754,9,0.27,10,0.982,13,0.034,21,0.822,23,1.295,27,0.628,28,0.556,32,0.855,33,0.785,38,0.27,39,0.062,40,1.822,41,2.224,42,2.674,44,2.434,48,0.901,50,0.018,51,0.018,69,3.407,70,1.351,122,0.564,128,1.671,130,1.382,132,1.814,149,1.064,151,0.932,169,0.901,170,1.113,177,1.275,178,0.967,179,1.17,183,2.674,195,2.518,196,2.434,197,1.698,200,2.821,212,2.004,213,2.388,214,1.505,215,2.674,222,2.518,225,1.956,226,2.03,227,1.505,228,1.814,230,1.956,239,1.017,240,1.505,253,1.698,259,1.223,265,2.641,272,2.388,273,1.956,274,1.508,275,4.59,276,4.15,277,4.15,278,2.348,279,5.459,280,3.482,281,2.348,282,2.348,283,2.901,284,2.901,285,3.947,286,2.901,287,2.348,288,2.348,289,3.482,290,2.518,291,2.901,292,3.482,293,2.901,294,3.457,295,2.901,296,2.901,297,3.457,298,3.482,299,2.348,300,1.956,301,1.814,302,2.004,303,2.004,304,2.348,305,2.348,306,2.348,307,2.348,308,3.482,309,2.348,310,1.698,311,1.698,312,1.956,313,2.348]],["title/injectables/CaslFactory.html",[169,0.821,314,1.505]],["body/injectables/CaslFactory.html",[3,0.379,4,0.379,5,0.244,9,0.379,10,1.248,13,0.034,21,0.59,23,0.929,27,0.615,28,0.78,32,1.2,33,1.48,38,0.509,39,0.088,48,0.852,50,0.023,51,0.023,122,0.615,128,1.2,149,1.066,151,1.307,169,1.144,170,1.562,177,1.012,178,0.65,179,0.929,239,1.427,259,1.716,314,2.097,315,2.382,316,4.424,317,4.424,318,3.295,319,2.874,320,4.424,321,4.424,322,4.424,323,3.686,324,2.745,325,2.382,326,2.745,327,3.295,328,4.424,329,3.686,330,3.295,331,3.199,332,3.295,333,3.295,334,3.295,335,4.424,336,1.896,337,3.295,338,2.745,339,4.424,340,3.295,341,2.546,342,2.382,343,3.295,344,4.161,345,3.295,346,3.686,347,4.424,348,3.295,349,3.295,350,3.295,351,3.295,352,3.295,353,3.295,354,1.562,355,2.745,356,3.295,357,3.295,358,3.295]],["title/modules/CaslModule.html",[52,1.26,60,1.827]],["body/modules/CaslModule.html",[3,0.486,4,0.486,5,0.313,13,0.033,27,0.597,28,1,38,0.486,39,0.112,50,0.027,51,0.027,52,2.06,54,2.002,55,2.248,60,3.571,62,2.987,63,2.43,64,2.199,66,3.327,251,4.324,314,3.041,359,3.518,360,3.518,361,3.518,362,4.223,363,2.707]],["title/classes/DeleteUserPolicyHandler.html",[39,0.084,364,1.827]],["body/classes/DeleteUserPolicyHandler.html",[3,0.446,4,0.446,5,0.287,9,0.446,10,1.386,13,0.033,21,0.693,23,1.092,27,0.622,32,1.41,33,1.295,38,0.566,39,0.103,48,1.001,50,0.025,51,0.025,122,0.622,149,0.88,177,1.189,178,0.763,179,1.092,259,2.016,319,2.829,325,2.799,336,3.449,354,1.835,363,2.481,364,2.829,365,3.151,366,2.481,367,3.151,368,3.27,369,4.095,370,4.5,371,3.871,372,2.228,373,4.095,374,3.555,375,2.228,376,2.799,377,2.228,378,3.225]],["title/interfaces/IPolicyHandler.html",[368,1.827,372,1.827]],["body/interfaces/IPolicyHandler.html",[3,0.447,4,0.447,5,0.288,9,0.447,10,1.389,13,0.033,21,0.695,23,1.095,27,0.623,32,1.414,33,1.298,38,0.567,39,0.103,48,1.004,50,0.025,51,0.025,122,0.623,149,0.882,177,1.193,178,0.766,179,1.095,259,2.022,319,2.834,325,2.807,336,3.452,363,2.489,364,2.234,365,3.157,366,2.489,367,2.489,368,3.273,369,4.103,370,4.506,372,2.234,373,4.506,374,3.561,375,2.234,376,2.807,377,2.234,378,3.234,379,3.882,380,3.882]],["title/injectables/JwtAuthGuard.html",[169,0.821,381,2.035]],["body/injectables/JwtAuthGuard.html",[3,0.42,4,0.42,5,0.271,7,0.79,9,0.42,10,1.335,13,0.034,21,0.848,23,1.03,27,0.64,28,0.865,38,0.42,39,0.097,40,1.449,43,2.34,48,1.225,50,0.024,51,0.024,122,0.545,141,1.731,169,1.225,170,1.731,177,1.454,178,0.934,179,1.335,195,3.424,232,3.042,239,1.582,255,2.34,265,2.725,381,3.035,382,4.377,383,3.042,384,3.035,385,3.944,386,3.042,387,4.917,388,3.651,389,3.944,390,4.632,391,3.651,392,3.042,393,2.34,394,3.651,395,2.64,396,3.042,397,3.651,398,3.042,399,3.944,400,3.651,401,3.042,402,3.651,403,3.651]],["title/injectables/JwtStrategy.html",[169,0.821,249,1.827]],["body/injectables/JwtStrategy.html",[3,0.357,4,0.357,5,0.23,7,0.672,9,0.357,10,1.199,13,0.034,21,0.761,23,1.199,27,0.649,28,0.735,38,0.357,39,0.129,40,2.068,41,2.099,44,2.015,50,0.022,51,0.022,69,3.766,70,1.787,122,0.489,149,0.556,169,1.099,170,1.472,177,1.305,178,0.838,179,1.199,183,2.214,196,2.297,209,4.037,215,2.524,226,2.139,227,1.99,235,2.587,239,1.345,249,2.446,255,1.99,259,1.617,265,2.998,268,2.587,284,3.541,285,3.946,296,2.587,301,1.617,396,2.587,398,2.587,404,2.587,405,4.846,406,3.105,407,3.105,408,3.105,409,5.211,410,3.105,411,4.25,412,4.25,413,3.541,414,3.073,415,3.105,416,3.105,417,2.587,418,3.105,419,3.105,420,3.105,421,3.105,422,2.245,423,3.105,424,3.105,425,3.105,426,3.105,427,4.25,428,4.25,429,4.25]],["title/classes/LoginDto.html",[39,0.084,200,1.827]],["body/classes/LoginDto.html",[3,0.437,4,0.437,5,0.282,7,0.821,9,0.437,12,2.103,13,0.034,21,0.869,27,0.559,31,1.799,38,0.437,39,0.15,45,1.733,50,0.025,51,0.025,122,0.559,128,2.123,130,2.314,141,2.301,197,3.51,200,2.793,214,3.111,274,2.103,354,1.799,430,3.162,431,3.51,432,3.162,433,3.795,434,4.079,435,2.744,436,3.795,437,3.87,438,3.51,439,3.87,440,2.744,441,2.433,442,3.111,443,2.744]],["title/classes/PasswordTransformer.html",[39,0.084,444,2.035]],["body/classes/PasswordTransformer.html",[3,0.414,4,0.414,5,0.267,7,1.129,9,0.414,10,1.321,13,0.034,21,0.839,23,1.321,27,0.539,38,0.414,39,0.139,41,2.03,45,1.954,48,1.212,50,0.024,51,0.024,122,0.539,130,1.859,177,1.439,178,0.924,179,1.321,354,1.703,367,3.003,444,3.003,445,2.993,446,3.388,447,5.214,448,4.685,449,3.593,450,4.685,451,4.603,452,4.986,453,4.685,454,3.593,455,4.685,456,3.903,457,1.871,458,2.993,459,3.593]],["title/classes/PatchUserDto.html",[39,0.084,460,1.827]],["body/classes/PatchUserDto.html",[3,0.378,4,0.378,5,0.244,7,0.711,9,0.378,12,2.311,13,0.034,21,0.955,27,0.508,31,1.558,38,0.378,39,0.142,45,1.828,50,0.023,51,0.023,122,0.614,128,2.027,130,2.209,141,1.558,149,0.791,178,1.098,213,2.542,274,1.913,303,3.203,354,1.558,431,2.377,434,4.304,435,2.377,437,4.025,438,3.194,439,4.144,440,2.377,441,2.107,442,2.107,443,2.377,460,2.542,461,4.636,462,2.738,463,3.68,464,3.287,465,3.287,466,3.287,467,3.68,468,3.68,469,3.287,470,3.287,471,3.287,472,3.287,473,3.68,474,2.738,475,2.738]],["title/guards/PoliciesGuard.html",[384,2.035,476,1.827]],["body/guards/PoliciesGuard.html",[3,0.367,4,0.367,5,0.236,9,0.367,10,1.22,13,0.034,21,0.879,23,1.22,27,0.634,28,0.755,38,0.367,39,0.085,40,1.264,43,2.042,48,1.27,50,0.022,51,0.022,122,0.565,149,0.57,169,1.119,177,1.508,178,0.968,179,1.385,183,2.743,196,2.328,215,2.253,239,2.127,314,2.754,319,3.169,336,3.031,363,2.042,367,2.042,375,3.031,376,2.304,377,1.833,385,4.388,386,2.654,387,4.731,389,3.603,390,4.388,392,2.654,393,2.042,401,2.654,476,2.489,477,3.186,478,2.654,479,4.325,480,3.186,481,3.186,482,4.325,483,3.186,484,4.325,485,3.127,486,2.654,487,2.654,488,3.186,489,3.186,490,3.186,491,3.186,492,3.186,493,3.186,494,3.186,495,2.304,496,3.186,497,3.186]],["title/classes/RegisterDto.html",[39,0.084,217,1.827]],["body/classes/RegisterDto.html",[3,0.374,4,0.374,5,0.241,7,0.703,9,0.374,12,2.299,13,0.034,21,0.95,27,0.504,31,1.539,38,0.374,39,0.141,45,1.823,50,0.023,51,0.023,122,0.611,128,2.018,130,2.2,141,2.516,178,1.093,198,3.65,214,2.808,217,2.521,274,1.898,303,3.189,354,1.539,431,3.838,432,2.705,434,4.293,435,2.348,437,4.008,438,3.168,439,4.13,440,2.348,441,2.081,442,3.403,443,2.348,467,3.65,468,3.65,473,3.65,474,2.705,475,2.705,498,2.705,499,3.247,500,3.247,501,3.247,502,3.247,503,3.247,504,3.247]],["title/entities/User.html",[149,0.568,505,1.827]],["body/entities/User.html",[3,0.301,4,0.301,5,0.194,7,0.566,9,0.301,12,2.381,13,0.034,21,0.984,27,0.556,38,0.301,39,0.128,45,1.787,50,0.019,51,0.019,122,0.633,128,1.865,130,2.033,132,1.963,134,1.678,141,1.787,149,0.917,151,1.039,178,1.084,212,1.506,256,2.093,258,1.678,272,2.169,274,1.633,301,2.301,302,2.947,303,2.947,341,2.169,422,1.893,444,3.098,446,3.194,451,3.14,457,1.363,505,3.07,506,2.18,507,3.975,508,5.25,509,2.617,510,2.617,511,3.14,512,3.68,513,2.617,514,2.726,515,2.617,516,2.617,517,3.769,518,3.769,519,2.18,520,3.769,521,2.617,522,2.617,523,3.769,524,3.769,525,3.769,526,3.769,527,2.617,528,3.769,529,2.617,530,3.14,531,2.726,532,3.14,533,3.14,534,2.617,535,2.617,536,3.769,537,3.769,538,2.617,539,2.617]],["title/entities/UserRoles.html",[256,1.375,505,1.827]],["body/entities/UserRoles.html",[3,0.357,4,0.357,5,0.23,7,0.671,8,3.068,9,0.357,12,2.097,13,0.034,21,0.867,27,0.557,32,1.128,33,1.036,38,0.357,39,0.129,50,0.022,51,0.022,122,0.599,134,1.986,149,1.089,236,4.337,256,1.838,272,2.442,274,1.838,286,3.535,301,2.521,302,2.442,326,4.543,341,3.318,342,2.24,346,3.535,457,1.614,505,3.241,508,4.891,512,4.032,514,3.068,519,2.581,530,3.535,531,3.068,532,3.535,533,3.535,540,4.337,541,2.581,542,3.098,543,3.098,544,5.206,545,3.337,546,3.098,547,4.243,548,4.243,549,3.068,550,3.068,551,4.243,552,3.098,553,4.243,554,4.243,555,4.243,556,3.098,557,4.243,558,1.986]],["title/controllers/UsersController.html",[0,1.505,559,2.035]],["body/controllers/UsersController.html",[0,1.762,2,0.929,3,0.226,4,0.226,5,0.145,7,1.254,9,0.226,10,0.856,12,1.813,13,0.034,15,3.463,17,4.1,19,3.463,20,3.463,21,0.749,23,1.456,27,0.61,28,0.464,29,2.529,30,3.612,31,0.929,32,0.714,33,0.655,38,0.226,39,0.052,40,0.778,41,1.961,43,1.256,44,0.929,45,1.534,46,3.07,48,1.082,50,0.016,51,0.016,122,0.428,128,2.007,132,1.581,149,1.127,151,0.778,177,1.285,178,0.825,179,1.18,193,1.632,196,2.512,212,1.747,213,2.138,215,2.82,222,1.417,224,1.632,226,1.524,239,0.849,240,2.382,290,2.195,310,1.417,338,1.632,364,1.747,377,1.128,460,2.408,463,3.989,476,1.128,487,1.632,550,3.274,558,1.256,559,1.946,560,1.632,561,1.96,562,3.716,563,3.036,564,3.036,565,3.036,566,1.96,567,1.96,568,1.96,569,3.716,570,1.96,571,3.036,572,3.036,573,2.529,574,1.96,575,3.036,576,1.96,577,4.184,578,2.529,579,3.036,580,3.036,581,3.486,582,3.989,583,1.96,584,1.96,585,4.789,586,1.96,587,3.036,588,2.195,589,1.96,590,1.96,591,1.96,592,2.529,593,2.529,594,2.529,595,1.96,596,1.632,597,1.417,598,1.96,599,1.632,600,1.96,601,1.632,602,1.632,603,1.632,604,1.96,605,1.96,606,1.96,607,1.96,608,3.716,609,1.96,610,1.96,611,1.632,612,1.632,613,1.96,614,1.96,615,1.96,616,1.96,617,1.96,618,1.96,619,1.96]],["title/modules/UsersModule.html",[52,1.26,61,1.827]],["body/modules/UsersModule.html",[2,2.225,3,0.415,4,0.415,5,0.267,13,0.034,27,0.713,28,0.853,38,0.415,39,0.096,50,0.024,51,0.024,52,1.863,54,1.708,55,2.033,61,3.495,62,2.701,63,2.073,64,1.876,66,3.009,67,2.605,74,2.605,76,2.073,149,0.84,226,2.141,256,2.033,258,2.309,262,3.001,314,2.788,381,3.009,393,2.309,476,2.701,558,2.309,559,3.346,599,3.001,603,3.001,620,3.602,621,3.602,622,3.602,623,4.694,624,3.602,625,3.602,626,3.602,627,3.602,628,3.602,629,3.602]],["title/injectables/UsersService.html",[169,0.821,226,1.156]],["body/injectables/UsersService.html",[3,0.185,4,0.185,5,0.119,7,0.562,9,0.185,10,0.732,13,0.034,15,1.164,20,1.164,21,0.829,23,1.501,25,1.164,27,0.588,28,0.381,32,0.586,33,0.538,38,0.185,39,0.043,40,1.488,41,2.154,42,1.353,44,1.231,45,1.725,47,1.878,48,1.138,50,0.013,51,0.013,76,0.926,122,0.533,128,2.142,130,1.974,132,1.952,149,1.096,151,1.488,169,0.672,170,0.763,177,1.421,178,0.95,179,1.305,183,1.353,196,2.358,210,2.711,212,1.495,213,2.771,215,2.98,217,2.367,226,0.946,239,1.782,240,2.403,256,1.415,258,1.031,272,2.157,290,1.878,291,1.34,301,1.701,302,1.879,310,2.362,311,1.878,312,1.34,331,1.164,341,0.926,456,2.164,457,0.838,458,2.164,460,2.367,507,1.878,511,1.34,514,1.878,531,1.164,545,1.031,549,1.878,550,3.346,558,1.031,573,2.164,581,3.664,582,4.433,588,1.878,592,3.123,593,2.164,594,2.721,596,1.34,601,1.34,602,1.34,612,2.164,630,1.34,631,2.597,632,2.597,633,1.609,634,4.973,635,3.266,636,1.609,637,3.266,638,2.597,639,1.609,640,2.597,641,2.597,642,1.609,643,2.597,644,2.597,645,1.609,646,2.597,647,1.609,648,4.398,649,2.597,650,1.609,651,2.597,652,1.609,653,2.597,654,2.597,655,1.609,656,1.609,657,1.609,658,1.609,659,1.609,660,1.609,661,1.609,662,1.609,663,1.609,664,1.609,665,1.609,666,1.609,667,1.609,668,1.609,669,1.609,670,1.609,671,1.609,672,1.609,673,1.609,674,1.609,675,1.609,676,2.164,677,1.34,678,1.609,679,1.609,680,1.609,681,1.609,682,1.609,683,1.609,684,1.609,685,1.609,686,1.609,687,1.609,688,1.34,689,1.609,690,1.609,691,1.609,692,2.164,693,1.609,694,1.609,695,1.609,696,1.609,697,1.609,698,1.609,699,1.609,700,1.609,701,1.164,702,1.609]],["title/coverage.html",[703,3.595]],["body/coverage.html",[0,2.177,1,1.8,5,0.208,6,2.339,13,0.033,34,1.462,36,1.8,39,0.14,50,0.02,51,0.02,122,0.323,149,0.71,151,1.114,169,1.412,171,2.339,190,2.03,191,1.8,192,2.339,200,1.616,217,1.616,226,1.022,228,1.462,249,1.616,256,1.216,273,2.339,314,1.331,315,2.03,364,1.616,365,2.54,366,2.54,368,1.616,372,1.616,381,1.8,382,2.339,383,2.339,384,1.8,395,2.03,404,2.339,430,2.339,444,1.8,445,2.339,460,1.616,461,2.339,462,2.339,476,1.616,478,2.339,485,2.03,495,2.03,498,2.339,505,2.28,506,2.339,540,2.339,541,2.339,559,1.8,560,2.339,597,2.03,630,2.339,703,2.339,704,2.808,705,2.808,706,2.339,707,5.1,708,3.301,709,6.159,710,5.974,711,6.221,712,2.808,713,5.262,714,2.339,715,3.301,716,2.339,717,4.989,718,2.808,719,2.808,720,3.301,721,4.593,722,3.301,723,3.301,724,2.808,725,2.339,726,2.866,727,2.339,728,3.805,729,2.339,730,2.339,731,5.46,732,2.339,733,2.339,734,2.339,735,2.808,736,2.808,737,2.339]],["title/dependencies.html",[55,1.652,738,2.216]],["body/dependencies.html",[5,0.248,13,0.034,28,0.792,31,1.585,39,0.119,50,0.023,51,0.023,55,1.448,70,1.924,72,2.785,73,2.785,76,1.924,77,2.785,79,2.143,80,3.226,84,2.785,85,2.785,253,2.418,255,2.143,265,1.924,297,2.785,324,2.785,393,2.143,417,2.785,441,2.143,446,2.418,457,1.741,507,2.418,739,3.344,740,5.976,741,3.344,742,4.468,743,3.344,744,3.344,745,3.344,746,3.344,747,3.344,748,3.344,749,3.344,750,3.344,751,3.344,752,4.468,753,3.722,754,3.344,755,3.344,756,3.344,757,3.344,758,3.344,759,3.344,760,3.344,761,3.344,762,3.344,763,3.344,764,5.371,765,3.344,766,3.344,767,2.785,768,3.344,769,3.344,770,3.344,771,3.344,772,3.344,773,3.344,774,3.344,775,3.344,776,3.344,777,3.344,778,3.344,779,3.344,780,3.344,781,3.344,782,3.344,783,3.344,784,3.344,785,3.344,786,3.344,787,3.344,788,3.344,789,3.344,790,3.344,791,3.344,792,3.344,793,3.344,794,3.344]],["title/miscellaneous/functions.html",[795,1.386,796,3.177]],["body/miscellaneous/functions.html",[9,0.566,13,0.029,50,0.029,51,0.029,728,3.554,729,4.993,795,2.56,796,4.094,797,4.094]],["title/index.html",[9,0.306,798,2.66,799,2.216]],["body/index.html",[5,0.242,7,0.562,8,2.974,13,0.032,33,1.092,45,0.494,46,1.031,50,0.013,51,0.013,52,1.632,55,1.415,64,1.701,79,2.403,80,1.665,93,1.34,95,1.878,97,1.34,99,1.34,101,1.34,103,1.34,105,1.34,107,1.34,109,1.34,111,1.34,116,1.34,120,3.181,122,0.299,128,0.586,130,1.031,132,2.771,139,2.721,142,2.362,151,0.639,172,2.721,178,0.317,179,0.454,187,3.596,190,1.878,210,1.878,211,1.34,283,1.34,285,1.164,293,1.34,294,2.164,295,1.34,300,2.164,311,2.711,331,2.711,344,1.34,355,1.34,413,1.34,414,1.164,442,2.403,457,2.508,486,1.34,545,2.637,549,1.878,611,3.123,676,1.34,677,1.34,688,1.34,692,1.34,707,2.164,726,2.974,737,1.34,767,1.34,799,1.34,800,2.597,801,1.609,802,2.597,803,3.266,804,1.609,805,1.609,806,1.609,807,2.597,808,1.609,809,2.597,810,1.609,811,1.609,812,3.266,813,1.609,814,2.597,815,4.113,816,4.398,817,3.748,818,4.628,819,2.597,820,2.597,821,2.597,822,3.266,823,1.609,824,4.398,825,1.609,826,2.597,827,1.609,828,1.609,829,4.398,830,1.609,831,1.609,832,1.609,833,1.609,834,3.266,835,2.597,836,5.485,837,3.748,838,3.748,839,1.609,840,2.597,841,1.609,842,1.609,843,1.609,844,4.398,845,2.597,846,2.597,847,2.597,848,3.266,849,2.597,850,1.609,851,1.609,852,1.609,853,1.609,854,1.609,855,5.107,856,3.748,857,1.609,858,1.609,859,1.609,860,1.609,861,2.597,862,1.609,863,1.609,864,1.609,865,1.609,866,1.609,867,1.609,868,2.597,869,1.609,870,1.609,871,3.266,872,3.266,873,4.816,874,1.609,875,3.748,876,1.609,877,1.609,878,3.266,879,1.609,880,1.609,881,1.609,882,1.609,883,2.597,884,1.609,885,4.816,886,1.609,887,1.609,888,1.609,889,1.609,890,1.609,891,2.597,892,1.609,893,1.609,894,1.609,895,1.609,896,1.609,897,1.609,898,1.609,899,1.609,900,3.748,901,2.597,902,1.609,903,1.609,904,2.597,905,1.609,906,1.609,907,1.609,908,1.609,909,1.609,910,1.609,911,1.609,912,1.609,913,1.609,914,2.597,915,1.609,916,1.609,917,1.609,918,1.609,919,2.597,920,1.609,921,1.609,922,1.609,923,1.609,924,2.597,925,2.597,926,2.597,927,1.609,928,1.609,929,1.609,930,1.609,931,1.34,932,1.609,933,1.609,934,2.597,935,1.609,936,1.609,937,1.609,938,2.597,939,1.609,940,1.609,941,1.609,942,2.597,943,2.597,944,1.164,945,1.609,946,1.609,947,1.609,948,2.597,949,1.609,950,1.609,951,1.609,952,1.609,953,2.597,954,1.609,955,1.609,956,1.609,957,1.609,958,1.609,959,1.609,960,1.609,961,1.609,962,1.609,963,1.609,964,1.609,965,2.597,966,1.609,967,1.609,968,1.609,969,1.609,970,1.609,971,3.266,972,2.597,973,1.609,974,3.266,975,2.597,976,2.597,977,2.597,978,2.597,979,2.597,980,1.609,981,2.597,982,2.597,983,2.597,984,2.597,985,2.597,986,1.609,987,1.609,988,1.609,989,2.164,990,2.597,991,1.609,992,1.609,993,1.609,994,1.609,995,1.609,996,1.609,997,1.609,998,1.609,999,1.609,1000,1.609,1001,1.609,1002,1.609,1003,1.609,1004,1.609,1005,1.609,1006,1.609,1007,1.609,1008,1.609,1009,1.609,1010,1.609,1011,1.609,1012,1.609,1013,1.609,1014,1.609,1015,1.609,1016,1.609,1017,1.609,1018,1.609,1019,1.609,1020,1.34,1021,1.609,1022,1.609,1023,1.609,1024,1.609,1025,1.609,1026,1.609,1027,1.609,1028,1.34,1029,1.34,1030,1.609,1031,1.34]],["title/modules.html",[54,2.046]],["body/modules.html",[13,0.028,50,0.028,51,0.028,53,3.008,54,2.225,59,2.7,60,2.7,61,2.7,753,5.059,1020,5.059,1032,6.073,1033,6.073]],["title/overview.html",[1034,3.595]],["body/overview.html",[2,1.717,13,0.033,34,2.726,50,0.024,51,0.024,53,3.974,54,1.717,55,2.04,56,3.017,57,3.017,58,3.017,59,3.594,60,3.389,61,3.451,62,2.71,63,2.084,64,1.886,134,2.322,170,1.717,226,2.018,228,3.123,246,3.017,247,3.017,248,3.017,249,3.451,314,2.882,354,1.717,359,3.017,360,3.017,361,3.017,372,2.084,384,2.322,701,3.406,1034,3.017,1035,3.622,1036,3.622,1037,3.622,1038,3.622,1039,3.622]],["title/properties.html",[274,1.652,738,2.216]],["body/properties.html",[13,0.032,50,0.029,51,0.029,274,2.106,944,3.516,1028,4.05,1029,4.05,1031,4.05,1040,4.862,1041,4.862,1042,4.862]],["title/miscellaneous/typealiases.html",[795,1.386,1043,3.814]],["body/miscellaneous/typealiases.html",[9,0.527,13,0.031,50,0.028,51,0.028,122,0.527,315,3.313,319,2.636,323,3.816,329,4.542,336,3.137,365,2.936,366,3.731,368,2.636,374,4.21,375,3.137,495,3.313,795,2.386,1044,4.581,1045,5.452,1046,5.452]],["title/miscellaneous/variables.html",[795,1.386,1047,3.177]],["body/miscellaneous/variables.html",[7,0.881,9,0.336,13,0.034,36,2.609,45,1.698,50,0.021,51,0.021,95,2.943,120,2.109,122,0.685,141,1.93,149,0.956,151,1.615,178,0.575,187,3.997,189,2.43,256,1.763,301,2.442,302,1.679,303,1.679,341,2.342,342,2.943,375,1.679,377,2.342,395,2.943,399,2.43,414,2.943,422,2.109,452,5.13,485,2.943,545,3.947,578,2.43,588,2.109,597,2.943,701,3.669,706,2.43,708,4.227,714,2.43,715,2.43,716,3.391,720,2.43,722,2.43,723,3.906,725,2.43,726,3.669,727,2.43,728,2.109,730,3.391,732,3.391,733,3.391,734,3.391,795,1.519,797,4.227,931,2.43,944,2.109,989,2.43,1047,2.43,1048,4.07,1049,2.917,1050,2.917,1051,4.07,1052,2.917,1053,2.917,1054,4.07,1055,2.917,1056,2.917,1057,2.917,1058,4.07,1059,2.917,1060,2.917,1061,2.917,1062,2.917,1063,2.917]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1040,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.7.0",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["14.1.1",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["14.2.0",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":839,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1037,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":920,"title":{},"body":{"index.html":{}}}],["255",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1036,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1035,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":921,"title":{},"body":{"index.html":{}}}],["400",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["5",{"_index":1039,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1038,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":319,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":378,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["abilitybuilder",{"_index":320,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":321,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abstraction",{"_index":1003,"title":{},"body":{"index.html":{}}}],["access",{"_index":346,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":893,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":946,"title":{},"body":{"index.html":{}}}],["account",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1002,"title":{},"body":{"index.html":{}}}],["actual",{"_index":936,"title":{},"body":{"index.html":{}}}],["add(this.expiration",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["again",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["against",{"_index":926,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1044,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":918,"title":{},"body":{"index.html":{}}}],["angular",{"_index":812,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["angular/flex",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1042,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":955,"title":{},"body":{"index.html":{}}}],["api",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":437,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":464,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":470,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@matches(/^[a",{"_index":466,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty({required",{"_index":431,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiresponse",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":995,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1019,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":623,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":336,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":172,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":809,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":53,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1022,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.controller.test.ts",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1045,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1046,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":171,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":176,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":180,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/auth/auth.controller.test.ts",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.controller.ts",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.controller.ts:37",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:51",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:21",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:41",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:68",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":430,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:16",{"_index":436,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:26",{"_index":433,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":498,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:22",{"_index":500,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:32",{"_index":504,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:42",{"_index":502,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:52",{"_index":503,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":382,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:13",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":315,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:21",{"_index":318,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":362,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":478,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":481,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":483,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":480,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":365,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":725,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":727,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/dto/patch",{"_index":461,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":445,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":454,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":449,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":540,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":506,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:18",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:24",{"_index":535,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:30",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:36",{"_index":509,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:42",{"_index":510,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:48",{"_index":529,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:60",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:41",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:53",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:71",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:85",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":622,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:108",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:131",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:22",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:40",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:49",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:59",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:76",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":34,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":186,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":847,"title":{},"body":{"index.html":{}}}],["async",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":625,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":383,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":388,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":391,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/register.dto",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":624,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":191,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["authenticating",{"_index":925,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["authentication/authorization",{"_index":830,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":394,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":397,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":59,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1031,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":228,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":898,"title":{},"body":{"index.html":{}}}],["await",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":828,"title":{},"body":{"index.html":{}}}],["bad",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":525,"title":{},"body":{"entities/User.html":{}}}],["behind",{"_index":909,"title":{},"body":{"index.html":{}}}],["below",{"_index":865,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":941,"title":{},"body":{"index.html":{}}}],["beta.40",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":547,"title":{},"body":{"entities/UserRoles.html":{}}}],["body",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":824,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":373,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["bootstrap",{"_index":729,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":834,"title":{},"body":{"index.html":{}}}],["branch",{"_index":947,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1011,"title":{},"body":{"index.html":{}}}],["brew",{"_index":845,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1033,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":753,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":339,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["building",{"_index":804,"title":{},"body":{"index.html":{}}}],["built",{"_index":892,"title":{},"body":{"index.html":{}}}],["can(useractionsenum.manage",{"_index":343,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":348,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":349,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":385,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":389,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["cascade",{"_index":555,"title":{},"body":{"entities/UserRoles.html":{}}}],["casl",{"_index":328,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":363,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":324,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":626,"title":{},"body":{"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["caslfactory",{"_index":314,"title":{"injectables/CaslFactory.html":{}},"body":{"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":60,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["change",{"_index":956,"title":{},"body":{"index.html":{}}}],["check",{"_index":486,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":485,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["checks",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":846,"title":{},"body":{"index.html":{}}}],["choice",{"_index":949,"title":{},"body":{"index.html":{}}}],["choose",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":817,"title":{},"body":{"index.html":{}}}],["class",{"_index":39,"title":{"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":354,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["clone",{"_index":868,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":359,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":361,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":360,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":620,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":621,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":988,"title":{},"body":{"index.html":{}}}],["column",{"_index":508,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["column({name",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":543,"title":{},"body":{"entities/UserRoles.html":{}}}],["column({unique",{"_index":534,"title":{},"body":{"entities/User.html":{}}}],["comes",{"_index":829,"title":{},"body":{"index.html":{}}}],["coming",{"_index":337,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":878,"title":{},"body":{"index.html":{}}}],["completed",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["compose",{"_index":861,"title":{},"body":{"index.html":{}}}],["config",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":816,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1009,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":888,"title":{},"body":{"index.html":{}}}],["connection",{"_index":923,"title":{},"body":{"index.html":{}}}],["connections",{"_index":935,"title":{},"body":{"index.html":{}}}],["const",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":174,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":386,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(userrepository",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["container",{"_index":904,"title":{},"body":{"index.html":{}}}],["contents",{"_index":813,"title":{},"body":{"index.html":{}}}],["context",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":402,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":401,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":490,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":852,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('v1/auth",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('v1/users",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":957,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":703,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":876,"title":{},"body":{"index.html":{}}}],["create",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":549,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createforuser",{"_index":316,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":317,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createquerybuilder('users",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtoken",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":327,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["crud",{"_index":831,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":456,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":458,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["current",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1005,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":997,"title":{},"body":{"index.html":{}}}],["default",{"_index":545,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":550,"title":{},"body":{"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':username",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(username",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":364,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":976,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":55,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":908,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":849,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":815,"title":{},"body":{"index.html":{}}}],["describe",{"_index":993,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":859,"title":{},"body":{"index.html":{}}}],["detached",{"_index":905,"title":{},"body":{"index.html":{}}}],["details",{"_index":355,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":353,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":356,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":913,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1027,"title":{},"body":{"index.html":{}}}],["development",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":934,"title":{},"body":{"index.html":{}}}],["directory",{"_index":902,"title":{},"body":{"index.html":{}}}],["docker",{"_index":836,"title":{},"body":{"index.html":{}}}],["docs",{"_index":974,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":980,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":987,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["download",{"_index":872,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":857,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":841,"title":{},"body":{"index.html":{}}}],["dto",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["dto/login.dto",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/patch",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register.dto",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["dynamic",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["edit",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edit(payload",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["efficient",{"_index":805,"title":{},"body":{"index.html":{}}}],["email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1015,"title":{},"body":{"index.html":{}}}],["employs",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":928,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":916,"title":{},"body":{"index.html":{}}}],["end",{"_index":983,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":931,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":505,"title":{"entities/User.html":{},"entities/UserRoles.html":{}},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":544,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":875,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":877,"title":{},"body":{"index.html":{}}}],["environment",{"_index":726,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["everything",{"_index":347,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["example",{"_index":1018,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":536,"title":{},"body":{"entities/User.html":{}}}],["exec",{"_index":970,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":479,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":482,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":900,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":390,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["exist",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":880,"title":{},"body":{"index.html":{}}}],["exists",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["expirationformatted",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":933,"title":{},"body":{"index.html":{}}}],["export",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":886,"title":{},"body":{"index.html":{}}}],["express",{"_index":943,"title":{},"body":{"index.html":{}}}],["extends",{"_index":396,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1008,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":322,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":521,"title":{},"body":{"entities/User.html":{}}}],["fastify",{"_index":767,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["feat",{"_index":1013,"title":{},"body":{"index.html":{}}}],["feature",{"_index":963,"title":{},"body":{"index.html":{}}}],["features",{"_index":832,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":434,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["fields",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":984,"title":{},"body":{"index.html":{}}}],["folder",{"_index":981,"title":{},"body":{"index.html":{}}}],["follow",{"_index":862,"title":{},"body":{"index.html":{}}}],["following",{"_index":901,"title":{},"body":{"index.html":{}}}],["format",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["format('lll",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":803,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":448,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":982,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1023,"title":{},"body":{"index.html":{}}}],["function",{"_index":495,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":796,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1007,"title":{},"body":{"index.html":{}}}],["generate",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":975,"title":{},"body":{"index.html":{}}}],["get(':username",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(id",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass(username",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["getone",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["getstartingmessage",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":798,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@request",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(req",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(@param('username",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":869,"title":{},"body":{"index.html":{}}}],["github",{"_index":972,"title":{},"body":{"index.html":{}}}],["given",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":450,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":507,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":384,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":477,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handle",{"_index":369,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handle(ability",{"_index":370,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handler",{"_index":484,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":496,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":497,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":377,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":366,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:17",{"_index":371,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:7",{"_index":380,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":451,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{}}}],["hashed",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":810,"title":{},"body":{"index.html":{}}}],["host",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":985,"title":{},"body":{"index.html":{}}}],["http",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["http://localhost:3333",{"_index":887,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":894,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":907,"title":{},"body":{"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":352,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":870,"title":{},"body":{"index.html":{}}}],["https://typeorm.io",{"_index":961,"title":{},"body":{"index.html":{}}}],["iat",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["igenericmessagebody",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ijwtresponsebody",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["imessage",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":367,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":323,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{}}}],["inject(winston_module_provider",{"_index":182,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":169,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":170,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":811,"title":{},"body":{"index.html":{}}}],["interface",{"_index":372,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":379,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":368,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":395,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalphanumeric",{"_index":438,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isemail",{"_index":473,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":439,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["ispublic",{"_index":399,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":919,"title":{},"body":{"index.html":{}}}],["item",{"_index":357,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":358,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["javascript",{"_index":842,"title":{},"body":{"index.html":{}}}],["joi",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":381,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":249,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepconnectionalive",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["keyword",{"_index":333,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["layer",{"_index":1004,"title":{},"body":{"index.html":{}}}],["layout",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["left",{"_index":927,"title":{},"body":{"index.html":{}}}],["length",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["level",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":959,"title":{},"body":{"index.html":{}}}],["license",{"_index":1028,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1030,"title":{},"body":{"index.html":{}}}],["limit",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["loads",{"_index":903,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":856,"title":{},"body":{"index.html":{}}}],["locally",{"_index":840,"title":{},"body":{"index.html":{}}}],["location",{"_index":999,"title":{},"body":{"index.html":{}}}],["logger",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["logging",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["login(@body",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":200,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logs",{"_index":821,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["made",{"_index":825,"title":{},"body":{"index.html":{}}}],["main",{"_index":1012,"title":{},"body":{"index.html":{}}}],["make",{"_index":837,"title":{},"body":{"index.html":{}}}],["manage",{"_index":330,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":866,"title":{},"body":{"index.html":{}}}],["many",{"_index":532,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["manytoone",{"_index":557,"title":{},"body":{"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":552,"title":{},"body":{"entities/UserRoles.html":{}}}],["mapping",{"_index":1001,"title":{},"body":{"index.html":{}}}],["matches",{"_index":474,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^[a",{"_index":475,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxfiles",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":440,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":443,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["mins",{"_index":922,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":795,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1029,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":883,"title":{},"body":{"index.html":{}}}],["module",{"_index":52,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":54,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["mongodb",{"_index":953,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":965,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":954,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":848,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":948,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":178,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":929,"title":{},"body":{"index.html":{}}}],["nest",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nginx",{"_index":910,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":802,"title":{},"body":{"index.html":{}}}],["non",{"_index":835,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":873,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["number",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":823,"title":{},"body":{"index.html":{}}}],["object",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.keys(payload).foreach((key",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":939,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":554,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":531,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":537,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":527,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":989,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":732,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":733,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":734,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["operation",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":860,"title":{},"body":{"index.html":{}}}],["operations",{"_index":938,"title":{},"body":{"index.html":{}}}],["optional",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":914,"title":{},"body":{"index.html":{}}}],["os",{"_index":1026,"title":{},"body":{"index.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":864,"title":{},"body":{"index.html":{}}}],["over",{"_index":942,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1034,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":738,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":973,"title":{},"body":{"index.html":{}}}],["panel",{"_index":853,"title":{},"body":{"index.html":{}}}],["param",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('username",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":177,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["particular",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1025,"title":{},"body":{"index.html":{}}}],["passport",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":538,"title":{},"body":{"entities/User.html":{}}}],["passwords",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["passwordtransformer",{"_index":444,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"coverage.html":{}}}],["patch",{"_index":463,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["patch()@apiresponse({status",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(payload",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":460,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["path",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload[key",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":937,"title":{},"body":{"index.html":{}}}],["performance",{"_index":940,"title":{},"body":{"index.html":{}}}],["permit",{"_index":548,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":833,"title":{},"body":{"index.html":{}}}],["pg",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":881,"title":{},"body":{"index.html":{}}}],["plaintoclass(user",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":487,"title":{},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":723,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":476,"title":{"guards/PoliciesGuard.html":{}},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":376,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":375,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":374,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":488,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":492,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":891,"title":{},"body":{"index.html":{}}}],["post",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":952,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":814,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":512,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":863,"title":{},"body":{"index.html":{}}}],["produce",{"_index":979,"title":{},"body":{"index.html":{}}}],["production",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"entities/UserRoles.html":{}}}],["profiles",{"_index":551,"title":{},"body":{"entities/UserRoles.html":{}}}],["profileservice",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["progress",{"_index":1010,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":801,"title":{},"body":{"index.html":{}}}],["project",{"_index":897,"title":{},"body":{"index.html":{}}}],["promise",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":274,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":827,"title":{},"body":{"index.html":{}}}],["provide",{"_index":628,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":996,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":912,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1021,"title":{},"body":{"index.html":{}}}],["public",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('/')@apiresponse({status",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register')@apiresponse({status",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["queried",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["quickly",{"_index":826,"title":{},"body":{"index.html":{}}}],["r",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["random",{"_index":917,"title":{},"body":{"index.html":{}}}],["react",{"_index":889,"title":{},"body":{"index.html":{}}}],["read",{"_index":344,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1016,"title":{},"body":{"index.html":{}}}],["received",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["record",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["records",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":387,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{}}}],["register(@body",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":217,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registered",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerpayload",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":1000,"title":{},"body":{"index.html":{}}}],["relations",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["relationship",{"_index":533,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1024,"title":{},"body":{"index.html":{}}}],["remark",{"_index":331,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":879,"title":{},"body":{"index.html":{}}}],["repo",{"_index":822,"title":{},"body":{"index.html":{}}}],["repository",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["represent",{"_index":530,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":334,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user",{"_index":338,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["request'})@apiresponse({status",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":442,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"index.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":882,"title":{},"body":{"index.html":{}}}],["rest",{"_index":871,"title":{},"body":{"index.html":{}}}],["restful",{"_index":994,"title":{},"body":{"index.html":{}}}],["results",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":911,"title":{},"body":{"index.html":{}}}],["rich",{"_index":964,"title":{},"body":{"index.html":{}}}],["role",{"_index":341,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":541,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":542,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":546,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":556,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":528,"title":{},"body":{"entities/User.html":{}}}],["roles",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":885,"title":{},"body":{"index.html":{}}}],["running",{"_index":967,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":843,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":930,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1041,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":806,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["served",{"_index":899,"title":{},"body":{"index.html":{}}}],["server",{"_index":807,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('username",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":808,"title":{},"body":{"index.html":{}}}],["signed",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["sits",{"_index":932,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":332,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":991,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":951,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":960,"title":{},"body":{"index.html":{}}}],["stack",{"_index":850,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":858,"title":{},"body":{"index.html":{}}}],["start",{"_index":855,"title":{},"body":{"index.html":{}}}],["started",{"_index":799,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":800,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["startingmessage",{"_index":173,"title":{},"body":{"injectables/AppService.html":{}}}],["statements",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":945,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":335,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["subjects",{"_index":329,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":398,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":403,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1020,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":962,"title":{},"body":{"index.html":{}}}],["supports",{"_index":950,"title":{},"body":{"index.html":{}}}],["sure",{"_index":838,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1032,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":990,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":737,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":1014,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":895,"title":{},"body":{"index.html":{}}}],["test",{"_index":971,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":819,"title":{},"body":{"index.html":{}}}],["tests",{"_index":969,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":966,"title":{},"body":{"index.html":{}}}],["this.appservice.startingmessage",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(user",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslfactory.createforuser(user",{"_index":491,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":493,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyusername(payload.username",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(username",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.info('calling",{"_index":184,"title":{},"body":{"injectables/AppService.html":{}}}],["this.reflector.get",{"_index":489,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":400,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.userrepository",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.delete(username",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(payload",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusernameandpass",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["to(value",{"_index":453,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["tokens",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["transform",{"_index":455,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":446,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transports",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":854,"title":{},"body":{"index.html":{}}}],["true",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":435,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["true})@isemail()@isnotempty",{"_index":499,"title":{},"body":{"classes/RegisterDto.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":432,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["true})@matches(/^[a",{"_index":501,"title":{},"body":{"classes/RegisterDto.html":{}}}],["try",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1043,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":820,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":978,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":986,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":494,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["typeorm",{"_index":457,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":977,"title":{},"body":{"index.html":{}}}],["ui",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":519,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["unique",{"_index":539,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":968,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["up",{"_index":906,"title":{},"body":{"index.html":{}}}],["update",{"_index":351,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["url",{"_index":511,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":924,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":629,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":992,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":149,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":462,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":465,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:30",{"_index":472,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:38",{"_index":469,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:46",{"_index":471,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.entity",{"_index":558,"title":{},"body":{"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":553,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":340,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":350,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user[key",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":325,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["username",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userrepository",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":256,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":326,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":342,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":627,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.entity",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":559,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":61,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":226,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":884,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":915,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":514,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["v1/auth",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["v1/users",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["valid",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validates",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":441,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":452,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":459,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":447,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":707,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1047,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":944,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":844,"title":{},"body":{"index.html":{}}}],["view",{"_index":1006,"title":{},"body":{"index.html":{}}}],["vue",{"_index":890,"title":{},"body":{"index.html":{}}}],["web",{"_index":818,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["welcomemessage",{"_index":185,"title":{},"body":{"injectables/AppService.html":{}}}],["where('users.username",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["window",{"_index":896,"title":{},"body":{"index.html":{}}}],["winston",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":181,"title":{},"body":{"injectables/AppService.html":{}}}],["winstonfilerotator",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":867,"title":{},"body":{"index.html":{}}}],["work",{"_index":998,"title":{},"body":{"index.html":{}}}],["world",{"_index":1017,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":958,"title":{},"body":{"index.html":{}}}],["write",{"_index":345,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["xampp",{"_index":851,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":874,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":468,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["za",{"_index":467,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["zippedarchive",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStartingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStartingMessage\n                        \n                    \n                \n            \n            \n                \ngetStartingMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/')@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get('/')\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  getStartingMessage(): IMessage {\n    return this.appService.startingMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule,\n    UsersModule,\n    CaslModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                startingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        startingMessage\n                        \n                    \n                \n            \n            \n                \nstartingMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  startingMessage(): IMessage {\n    this.logger.info('Calling welcomeMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IJWTResponseBody } from '@starter/api-types';\n\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { Public } from './public.decorator';\n\n/**\n * Authentication Controller\n */\n@ApiTags('authentication')\n@Controller('v1/auth')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} usersService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginDto): Promise {\n    const user = await this.authService.validateUser(payload);\n    return await this.authService.createToken(user);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterDto) {\n    const user = await this.usersService.create(payload);\n    return await this.authService.createToken(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([User, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, JwtStrategy, UsersService],\n  exports: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                users service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as moment from 'moment';\n\nimport { IJWTResponseBody } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { LoginDto } from './dto/login.dto';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {User} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    roles,\n    email,\n  }: User): Promise {\n    return {\n      expiration: this.expiration,\n      expirationFormatted: moment()\n        .add(this.expiration, 'seconds')\n        .format('LLL'),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        roles,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ username, password }: LoginDto): Promise {\n    const user = await this.usersService.getByUsernameAndPass(\n      username,\n      password,\n    );\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: User) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    can(UserActionsEnum.Update, User, { username: user.username }); // update own user\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate({ iat, exp, id }: Record): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:26\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:16\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class LoginDto {\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:38\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:46\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:22\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:42\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:52\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:32\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class RegisterDto {\n  /**\n   * Email field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                gravatar\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:36\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gravatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:42\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:18\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:30\n                        \n                    \n\n            \n                \n                    Name column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:60\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:24\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class User {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  gravatar: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { User } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => User, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:85\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:53\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    patchUser(payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiResponse({status: 200, description: 'Patch User Request Received'})@ApiResponse({status: 400, description: 'Patch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:71\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('v1/users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves current authenticated user\n   * @returns {Promise} queried user data\n   */\n  @Get('user')\n  getUser(@Request() req) {\n    return req.user;\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Patch()\n  @ApiResponse({ status: 200, description: 'Patch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Patch User Request Failed' })\n  async patchUser(@Body() payload: PatchUserDto): Promise {\n    return await this.usersService.edit(payload);\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return await this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCaslFactory\n\nCaslFactory\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, UserRoles])],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:131\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchUserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:108\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:49\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsernameAndPass\n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.username = :username and users.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {RegisterDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: RegisterDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        gravatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {PatchUserDto} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(payload: PatchUserDto): Promise {\n    const { username } = payload;\n    const user = await this.getByUsername(username);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (8/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/cdk : ^14.2.0\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/flex-layout : ^14.0.0-beta.40\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/material : ^14.2.0\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\nDescription |\nPrerequisites |\nDeployment |\nEnvironment Configuration |\nChoosing a Web Framework |\nChoosing a Database |\nTesting |\nTypeDocs |\nLogs\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express version is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\nNon-Docker\n# execute test\n$ npm run test\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects<> | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            moduleMocker   (apps/.../auth.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(User, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
