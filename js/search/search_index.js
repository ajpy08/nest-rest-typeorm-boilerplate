var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.497,1,2.023]],["body/controllers/AppController.html",[0,2.494,1,2.767,2,1.506,3,0.32,4,0.277,5,0.302,6,2.646,7,0.881,8,2.767,9,0.413,10,1.572,11,4.316,12,4.382,13,3.176,14,1.87,15,0.034,16,3.176,17,3.372,18,3.587,19,3.596,20,3.804,21,3.372,22,0.851,23,3.176,24,2.248,25,3.596,26,1.157,27,0.626,28,1.062,29,5.501,30,2.484,31,1.468,32,4.903,33,2.484,34,4.316,35,3.121,36,0.934,37,3.176,38,3.176,39,3.027,40,2.248,41,2.484,42,1.061,43,2.248,44,2.248,45,0.459,46,2.646,47,0.752,48,2.74,49,2.646,50,3.596,51,3.978,52,1.506,53,2.646,54,1.654,55,0.32,56,0.016,57,0.896,58,1.217,59,2.646,60,1.062,61,3.596,62,2.494,63,3.596,64,0.934,65,3.176,66,3.176,67,3.176,68,3.176,69,0.016,70,0.022,71,0.016]],["title/modules/AppModule.html",[36,0.683,72,1.816]],["body/modules/AppModule.html",[1,2.962,2,1.893,3,0.466,4,0.248,5,0.246,15,0.034,33,2.298,36,1,45,0.531,47,0.672,48,2.854,49,2.365,55,0.286,56,0.015,64,0.864,69,0.015,70,0.021,71,0.015,72,3.528,73,1.23,74,1.23,75,1.634,76,1.634,77,1.634,78,2.19,79,1.479,80,2.365,81,2.365,82,2.365,83,3.153,84,2.993,85,2.854,86,3.04,87,2.298,88,1.634,89,1.479,90,2.839,91,3.214,92,2.19,93,3.994,94,2.365,95,2.365,96,2.365,97,3.994,98,1.634,99,2.839,100,2.365,101,1.588,102,1.479,103,2.839,104,2.365,105,2.839,106,2.839,107,1.82,108,1.82,109,1.82,110,1.127,111,2.365,112,2.839,113,2.08,114,2.56,115,0.369,116,2.839,117,2.839,118,2.839,119,2.365,120,2.839,121,0.949,122,2.839,123,0.949,124,2.839,125,1.23,126,2.839,127,2.839,128,2.839,129,2.839,130,2.839,131,3.994,132,2.839,133,2.08,134,2.839,135,4.62,136,3.625,137,3.994,138,3.994,139,1.99,140,3.994,141,1.414,142,3.994,143,3.994,144,2.839,145,3.994,146,2.839,147,2.053,148,2.839,149,2.839,150,2.839,151,2.839,152,2.839,153,2.839,154,2.839,155,2.839,156,2.839,157,2.839,158,2.839,159,2.839]],["title/injectables/AppService.html",[48,1.644,160,1.056]],["body/injectables/AppService.html",[3,0.363,4,0.314,5,0.321,7,0.682,9,0.467,10,1.707,12,4.605,15,0.034,22,0.925,24,2.442,26,1.31,27,0.709,28,1.203,31,1.213,39,2.698,40,2.442,41,3.002,42,1.129,43,2.879,44,2.442,45,0.455,47,0.852,48,2.442,55,0.363,56,0.019,57,1.559,58,1.322,60,1.568,64,0.779,69,0.019,70,0.024,71,0.019,92,1.705,101,1.617,102,1.873,113,1.873,115,0.467,139,2.333,160,1.568,161,2.07,162,2.997,163,3.597,164,3.999,165,3.597,166,2.621,167,3.597,168,3.906,169,3.344,170,1.861,171,3.597,172,1.014,173,5.217,174,3.597,175,3.597]],["title/controllers/AuthController.html",[0,1.497,176,2.023]],["body/controllers/AuthController.html",[0,2.186,2,1.341,3,0.285,4,0.247,5,0.174,7,0.897,9,0.368,10,1.451,14,1.726,15,0.034,18,2.293,20,3.62,22,0.786,26,1.451,27,0.786,28,1.332,30,1.628,31,1.031,45,0.478,47,0.67,51,4.067,52,1.341,55,0.285,56,0.015,57,1.124,58,1.412,60,1.332,62,2.595,64,0.862,69,0.015,70,0.021,71,0.015,115,0.518,139,1.581,170,1.581,172,1.124,176,2.554,177,2.357,178,2.357,179,2.829,180,3.036,181,2.172,182,3.681,183,4.17,184,2.829,185,2.748,186,2.829,187,5.006,188,3.984,189,5.006,190,3.984,191,5.006,192,5.006,193,2.829,194,3.62,195,2.554,196,2.554,197,3.319,198,3.984,199,2.371,200,3.62,201,1.726,202,2.829,203,2.502,204,2.829,205,5.006,206,2.829,207,2.829,208,2.357,209,2.502,210,1.628,211,2.357,212,2.046,213,2.829,214,1.765,215,1.814,216,2.829,217,2.829,218,1.417,219,2.829,220,2.881,221,2.829,222,2.373,223,2.829,224,3.984,225,2.829,226,2.829,227,2.829]],["title/modules/AuthModule.html",[36,0.683,83,1.816]],["body/modules/AuthModule.html",[2,2.169,3,0.349,4,0.302,5,0.213,15,0.034,36,1.109,45,0.532,47,0.82,54,1.804,55,0.349,56,0.018,64,0.75,69,0.018,70,0.024,71,0.018,73,1.5,74,1.5,75,1.993,76,1.993,77,1.993,78,2.428,79,2.382,83,3.592,84,3.09,85,3.03,87,2.632,88,1.993,89,1.804,91,3.283,100,2.886,101,1.536,102,1.804,104,2.886,113,1.804,114,2.22,176,3.283,181,1.375,209,2.758,211,2.886,228,2.886,229,3.464,230,2.886,231,3.348,232,3.464,233,3.464,234,2.886,235,3.464,236,2.22,237,3.464,238,4.574,239,4.574,240,2.632,241,3.464,242,2.886,243,2.886,244,3.464,245,4.574,246,3.464,247,1.993]],["title/injectables/AuthService.html",[160,1.056,209,1.497]],["body/injectables/AuthService.html",[3,0.212,4,0.184,5,0.13,7,0.467,9,0.273,10,1.168,15,0.034,22,0.922,26,1.582,27,0.972,28,1.453,30,2.235,31,1.274,33,2.235,42,1.246,45,0.43,47,0.498,55,0.324,56,0.011,57,1.225,58,1.489,60,1.648,64,0.94,69,0.011,70,0.017,71,0.011,101,1.526,102,1.096,115,0.64,121,1.453,123,1.072,125,1.389,136,2.809,139,2.096,141,0.593,160,1.072,161,1.211,166,1.52,170,2.147,172,1.319,180,1.845,181,1.955,182,1.349,185,2.435,194,1.522,199,1.683,200,1.522,201,2.134,209,1.52,210,1.211,212,1.522,214,1.809,215,1.349,218,1.723,222,0.998,236,1.349,240,2.5,248,1.522,249,1.168,250,3.236,251,3.236,252,3.207,253,3.236,254,2.104,255,4.399,256,3.207,257,2.104,258,2.104,259,2.319,260,2.671,261,3.229,262,2.319,263,2.671,264,2.671,265,2.104,266,2.671,267,3.819,268,3.991,269,3.236,270,3.236,271,2.671,272,2.104,273,2.104,274,2.671,275,1.389,276,2.055,277,2.671,278,2.809,279,2.319,280,1.522,281,1.349,282,1.349,283,1.753,284,0.646,285,3.236,286,2.671,287,1.522,288,2.671,289,1.753,290,1.522,291,1.52,292,1.845,293,1.753,294,1.753,295,1.753,296,1.753,297,3.895,298,1.753,299,3.236,300,3.381,301,2.671,302,2.319,303,3.236,304,2.235,305,1.753,306,1.522,307,1.753,308,2.671,309,1.753,310,0.998,311,1.211,312,1.349,313,1.753]],["title/modules/ConfigModule.html",[36,0.683,84,1.644]],["body/modules/ConfigModule.html",[3,0.438,4,0.379,5,0.267,15,0.033,36,1.231,45,0.46,47,1.028,55,0.438,56,0.022,69,0.022,70,0.027,71,0.022,73,1.879,74,1.879,75,2.496,76,2.496,77,2.496,78,2.502,79,2.962,84,3.158,87,3.036,88,2.496,89,2.26,101,1.776,141,1.223,314,3.614,315,3.614,316,4.338,317,4.338,318,3.614,319,4.338,320,4.338]],["title/classes/ConfigService.html",[56,0.016,101,0.89]],["body/classes/ConfigService.html",[3,0.239,4,0.207,5,0.337,7,0.51,9,0.308,10,1.277,15,0.034,22,0.971,24,1.827,26,1.679,27,0.91,28,1.542,31,1.416,39,3.359,40,1.827,41,2.402,42,1.329,43,2.402,45,0.364,55,0.354,56,0.012,57,1.177,58,1.301,60,1.396,62,1.124,64,0.903,69,0.012,70,0.018,71,0.012,101,0.989,115,0.64,139,1.392,141,0.669,147,3.018,166,2.735,169,1.52,170,2.045,172,1.177,195,1.52,249,1.277,275,1.998,284,0.728,310,1.124,321,1.027,322,1.715,323,3.894,324,3.507,325,2.675,326,3.507,327,2.922,328,3.507,329,2.922,330,3.958,331,2.922,332,2.922,333,2.965,334,2.922,335,2.371,336,3.15,337,2.922,338,2.654,339,1.827,340,2.922,341,2.371,342,2.536,343,3.335,344,2.956,345,2.922,346,3.018,347,3.477,348,2.922,349,2.371,350,2.922,351,2.536,352,3.842,353,2.922,354,2.922,355,2.922,356,1.979,357,2.922,358,1.975,359,1.715,360,3.477,361,1.715,362,2.922,363,1.715,364,1.975,365,1.975,366,1.975,367,1.975,368,1.715,369,1.975,370,1.975,371,1.975,372,1.715,373,1.975,374,1.715,375,1.235,376,1.975,377,1.975,378,1.715,379,1.715,380,1.975,381,1.715,382,1.975,383,1.715,384,1.975,385,1.715,386,1.975,387,1.715,388,1.975,389,1.715,390,1.975,391,1.715,392,1.975,393,1.715,394,1.975,395,1.52,396,2.536,397,1.975,398,2.922,399,1.975,400,1.975,401,1.975,402,1.975,403,1.975]],["title/interfaces/EnvConfig.html",[284,0.97,323,2.023]],["body/interfaces/EnvConfig.html",[3,0.289,4,0.25,5,0.327,7,0.417,15,0.034,22,0.566,24,1.494,31,1.303,39,3.164,40,1.494,41,2.315,42,1.329,43,2.095,45,0.405,55,0.406,56,0.015,57,0.809,58,1.42,60,0.959,62,1.36,64,1.006,69,0.015,70,0.021,71,0.015,101,0.809,139,1.138,141,0.809,147,3.36,166,2.606,169,1.838,170,1.596,172,1.31,195,1.838,275,1.742,284,0.881,310,1.36,322,2.074,323,3.845,325,1.838,327,2.389,329,2.389,330,3.642,331,2.389,332,2.389,333,2.673,334,2.389,336,3.249,337,2.389,338,2.898,339,1.494,340,2.389,342,2.074,343,2.909,344,2.578,345,2.389,346,2.909,347,3.351,348,2.389,350,2.389,351,2.074,352,3.351,353,2.389,354,2.389,355,2.389,356,1.907,357,2.389,358,2.389,359,2.074,360,3.87,361,2.074,362,3.351,363,2.909,364,2.389,365,2.389,366,2.389,367,2.389,368,2.074,369,2.389,370,2.389,371,2.389,372,2.074,373,2.389,374,2.074,375,1.494,376,2.389,377,2.389,378,2.074,379,2.074,380,2.389,381,2.074,382,2.389,383,2.074,384,2.389,385,2.074,386,2.389,387,2.074,388,2.389,389,2.074,390,2.389,391,2.074,392,2.389,393,2.074,394,2.389,395,1.838,396,2.909,397,2.389,398,3.351,399,2.389,400,2.389,401,2.389,402,2.389,403,2.389,404,1.65,405,2.868,406,2.868]],["title/interfaces/IGenericMessageBody.html",[284,0.97,407,1.816]],["body/interfaces/IGenericMessageBody.html",[3,0.222,4,0.192,5,0.136,7,0.321,9,0.286,15,0.034,17,1.413,21,1.413,22,0.435,24,2.081,27,0.435,31,1.297,42,1.228,44,1.148,45,0.478,47,0.522,55,0.335,56,0.011,57,0.936,58,1.546,60,1.11,62,1.574,64,1.159,69,0.011,70,0.017,71,0.011,98,1.268,110,2.126,115,0.286,121,1.995,123,1.677,125,1.438,139,0.874,141,1.254,160,1.11,170,1.318,172,1.346,181,1.586,196,1.413,199,2.067,201,2.49,203,2.108,214,0.737,218,1.884,220,1.594,222,2.108,247,1.911,249,1.209,275,0.955,276,1.413,281,2.128,282,2.128,284,0.677,291,1.045,304,1.268,310,1.894,311,1.911,312,1.413,336,1.911,339,1.148,404,1.268,407,1.911,408,1.594,409,2.766,410,3.328,411,3.328,412,4.336,413,2.128,414,1.413,415,2.889,416,2.766,417,1.836,418,3.975,419,1.045,420,1.413,421,1.836,422,1.413,423,2.081,424,1.594,425,2.766,426,2.766,427,1.836,428,1.836,429,1.413,430,2.889,431,3.215,432,1.836,433,1.836,434,1.836,435,1.836,436,1.836,437,1.836,438,1.836,439,1.836,440,1.836,441,1.836,442,1.836,443,1.836,444,1.836,445,2.401,446,1.836,447,1.836,448,1.836,449,1.413,450,1.836,451,1.836,452,1.836,453,1.836,454,1.836,455,1.594,456,2.401,457,1.268,458,1.836,459,1.836,460,1.594,461,1.413,462,1.594,463,1.836,464,1.836,465,1.836,466,1.594,467,1.836,468,1.836,469,1.594,470,1.836,471,1.836,472,1.836,473,1.594,474,1.836,475,1.594,476,1.594,477,1.836,478,1.836,479,1.836,480,1.836,481,1.836,482,1.836,483,1.836,484,1.594,485,1.594,486,2.128,487,1.594,488,2.401,489,1.836,490,1.836,491,1.836]],["title/interfaces/ITokenReturnBody.html",[210,1.816,284,0.97]],["body/interfaces/ITokenReturnBody.html",[3,0.238,4,0.206,5,0.146,7,0.344,9,0.307,15,0.034,27,0.69,30,2.396,31,1.077,33,2.396,42,1.297,45,0.449,47,0.559,55,0.353,56,0.012,57,0.986,58,1.542,60,1.539,64,1.063,69,0.012,70,0.018,71,0.012,101,1.386,102,1.23,115,0.598,121,1.539,123,1.169,125,1.023,136,3.011,139,1.826,141,0.666,160,1.169,166,1.119,170,1.95,172,1.386,180,1.359,181,1.387,182,1.514,185,2.168,194,2.528,199,1.515,200,1.707,201,1.994,209,1.119,210,2.012,212,1.707,214,1.643,215,1.514,218,1.58,222,1.119,236,1.514,240,2.012,248,1.707,249,1.273,250,1.967,251,1.967,253,1.967,255,4.093,259,1.707,260,1.967,261,3.391,262,1.707,263,1.967,264,1.967,266,1.967,267,3.328,268,4.038,269,3.468,270,3.468,271,1.967,274,1.967,275,1.023,276,1.514,277,1.967,278,3.011,279,2.528,280,1.707,281,2.241,282,2.241,283,2.913,284,0.725,285,4.436,286,4.093,287,2.528,288,2.913,289,1.967,290,1.707,291,1.658,292,2.012,293,1.967,294,1.967,295,1.967,296,1.967,297,4.093,298,1.967,299,3.468,300,3.553,301,2.913,302,2.528,303,3.468,304,2.396,305,1.967,306,1.707,307,1.967,308,2.913,309,1.967,310,1.119,311,1.359,312,1.514,313,1.967,404,1.359]],["title/injectables/JwtStrategy.html",[160,1.056,231,1.816]],["body/injectables/JwtStrategy.html",[3,0.327,4,0.283,5,0.2,7,0.637,9,0.422,10,1.594,15,0.034,18,2.519,22,0.863,26,1.594,27,0.863,28,1.464,31,1.132,33,2.519,35,2.346,45,0.484,47,0.768,54,1.689,55,0.327,56,0.026,57,1.496,58,1.496,60,1.464,64,0.702,69,0.017,70,0.023,71,0.017,101,1.674,102,1.689,115,0.569,133,1.689,160,1.464,161,1.866,170,1.287,172,0.915,181,1.967,195,3.552,201,2.147,214,2.011,215,2.079,231,2.519,240,3.285,243,2.702,261,3.358,275,1.896,279,2.346,287,3.166,291,1.538,342,3.166,396,2.346,492,2.702,493,4.956,494,3.244,495,3.244,496,3.244,497,5.709,498,5.306,499,3.244,500,4.378,501,4.378,502,4.378,503,3.244,504,3.244,505,2.702,506,3.244,507,3.244,508,3.244,509,3.244,510,3.244,511,3.244,512,3.244,513,2.346,514,4.378,515,4.378,516,4.378,517,3.244]],["title/classes/LoginPayload.html",[56,0.016,185,1.644]],["body/classes/LoginPayload.html",[3,0.404,4,0.35,5,0.247,7,0.583,9,0.521,14,2.177,15,0.034,22,0.991,42,1.246,45,0.438,52,1.9,55,0.404,56,0.03,69,0.021,70,0.026,71,0.021,115,0.653,121,1.982,123,1.982,133,2.617,182,3.221,185,2.617,249,1.83,321,1.736,375,2.617,518,3.339,519,5.025,520,3.633,521,3.339,522,4.008,523,4.161,524,2.898,525,4.008,526,3.969,527,3.633,528,3.969,529,2.898,530,2.569,531,2.898]],["title/classes/PasswordTransformer.html",[56,0.016,532,2.023]],["body/classes/PasswordTransformer.html",[3,0.394,4,0.341,5,0.241,7,0.789,9,0.508,10,1.8,15,0.034,22,0.975,26,1.8,27,0.975,28,1.653,31,1.279,42,1.234,45,0.431,55,0.394,56,0.028,58,1.394,64,1.234,69,0.02,70,0.025,71,0.02,123,1.653,321,1.692,338,3.586,413,3.169,419,1.852,445,2.824,532,3.169,533,3.254,534,3.575,535,4.943,536,5.424,537,4.943,538,3.906,539,4.943,540,4.749,541,4.943,542,3.906,543,4.943,544,3.906]],["title/classes/PatchProfilePayload.html",[56,0.016,423,1.644]],["body/classes/PatchProfilePayload.html",[3,0.361,4,0.313,5,0.221,7,0.521,9,0.465,14,2.391,15,0.034,22,1.088,27,1.129,42,1.313,45,0.408,52,1.698,55,0.361,56,0.028,69,0.018,70,0.024,71,0.018,115,0.717,121,1.915,123,1.915,133,1.865,199,2.026,218,1.436,249,1.703,292,3.295,321,1.552,344,2.296,375,1.865,423,2.435,520,2.59,523,4.386,524,2.59,526,4.14,527,3.381,528,4.246,529,2.59,530,2.296,531,2.59,545,2.984,546,3.895,547,3.582,548,3.582,549,3.582,550,3.895,551,3.895,552,3.582,553,3.582,554,3.582,555,3.582,556,3.895,557,2.984]],["title/classes/Profile.html",[56,0.016,218,0.97]],["body/classes/Profile.html",[3,0.296,4,0.256,5,0.181,7,0.428,9,0.382,14,2.462,15,0.034,22,1.121,27,1.121,42,1.291,44,2.131,45,0.444,55,0.296,56,0.026,69,0.015,70,0.021,71,0.015,110,2.336,115,0.739,121,1.789,123,1.789,125,1.772,133,2.131,141,0.829,218,1.563,247,2.354,249,1.49,291,2.231,292,3.079,321,1.273,414,2.622,419,1.393,422,1.883,429,2.622,457,2.354,466,3.869,532,3.262,534,3.403,540,3.408,558,2.448,559,4.615,560,5.311,561,2.938,562,2.938,563,3.921,564,2.938,565,2.938,566,2.938,567,4.091,568,4.091,569,2.938,570,2.938,571,4.091,572,4.091,573,4.091,574,4.091,575,2.938,576,2.448,577,2.938,578,3.408,579,3.408,580,3.408,581,2.938,582,2.938,583,4.091,584,2.938,585,2.938,586,2.125,587,2.938,588,2.938,589,2.448,590,2.938]],["title/controllers/ProfileController.html",[0,1.497,591,2.023]],["body/controllers/ProfileController.html",[0,1.954,2,1.101,3,0.234,4,0.203,5,0.143,7,0.87,9,0.302,10,1.257,14,1.786,15,0.034,17,3.278,18,3.345,19,3.434,20,3.698,21,3.278,22,0.813,26,1.501,27,0.813,28,1.379,30,1.336,31,1.323,42,1.146,45,0.462,46,1.935,47,0.55,50,2.877,51,3.829,52,1.101,53,1.935,54,1.209,55,0.234,56,0.012,57,0.655,58,1.376,59,1.935,60,0.777,61,3.434,62,2.424,63,3.434,64,0.892,69,0.012,70,0.018,71,0.012,107,1.489,108,1.489,109,1.489,115,0.536,121,1.92,125,1.496,141,0.655,172,0.655,178,1.935,181,2.206,199,1.786,201,2.408,203,1.101,208,1.935,214,1.527,218,1.955,222,1.954,275,1.496,310,1.101,339,1.799,407,1.336,415,2.497,420,1.489,423,2.378,424,1.679,430,2.497,431,2.926,460,2.497,475,2.497,476,2.497,486,3.627,487,1.679,488,2.497,546,4.26,586,3.301,591,2.214,592,1.935,593,2.322,594,3.453,595,3.453,596,2.322,597,2.322,598,4.565,599,4.565,600,3.453,601,2.322,602,3.453,603,3.453,604,2.322,605,2.322,606,5.114,607,2.322,608,3.453,609,2.322,610,2.322,611,3.453,612,2.322,613,3.453,614,4.123,615,1.935,616,2.322,617,2.322,618,2.322,619,2.322,620,2.322,621,1.935,622,3.453,623,2.322,624,2.322,625,2.322,626,2.322,627,2.322]],["title/modules/ProfileModule.html",[36,0.683,85,1.644]],["body/modules/ProfileModule.html",[2,2.379,3,0.403,4,0.349,5,0.246,15,0.034,36,1.187,45,0.535,47,0.947,54,2.083,55,0.403,56,0.021,69,0.021,70,0.026,71,0.021,73,1.732,74,1.732,75,2.301,76,2.301,77,2.301,78,2.599,79,2.856,85,3.195,87,2.887,88,2.301,89,2.083,91,2.563,96,3.331,98,2.301,110,1.991,214,2.13,218,1.228,234,3.331,420,2.563,422,2.563,591,3.515,615,3.331,628,3.331,629,3.331,630,3.331,631,3.998,632,3.998,633,3.998]],["title/injectables/ProfileService.html",[160,1.056,214,1.056]],["body/injectables/ProfileService.html",[3,0.185,4,0.16,5,0.113,7,0.419,9,0.238,10,1.05,15,0.034,17,1.176,21,1.176,22,0.995,24,2.426,26,1.774,27,0.995,28,1.63,31,1.424,42,1.259,44,0.955,45,0.453,47,0.434,55,0.291,56,0.009,57,1.138,58,1.464,60,0.964,62,0.869,64,1.055,69,0.009,70,0.015,71,0.009,98,1.055,110,2.003,115,0.633,121,2.008,123,1.736,125,1.749,139,1.144,141,1.138,160,0.964,161,1.055,170,1.144,172,1.238,181,2.06,196,2.588,199,2.186,201,2.54,203,2.31,214,0.964,218,1.917,220,2.085,222,1.914,247,2.323,275,1.249,276,1.176,281,1.176,282,1.176,284,0.563,291,1.367,304,1.055,310,1.689,311,1.659,312,1.176,336,1.659,339,1.501,407,1.055,408,1.326,409,1.528,410,2.967,411,2.967,412,2.967,413,1.848,414,1.176,415,2.576,416,2.402,417,1.528,418,4.325,419,0.869,420,1.176,421,1.528,422,1.176,423,2.286,424,1.326,425,2.967,426,3.363,427,1.528,428,1.528,429,1.848,430,3.369,431,3.53,432,2.402,433,1.528,434,1.528,435,2.402,436,1.528,437,2.402,438,2.402,439,1.528,440,1.528,441,1.528,442,1.528,443,1.528,444,1.528,445,2.085,446,1.528,447,1.528,448,2.402,449,1.848,450,2.402,451,1.528,452,1.528,453,1.528,454,1.528,455,1.326,456,2.085,457,1.055,458,1.528,459,1.528,460,1.326,461,1.176,462,1.326,463,1.528,464,1.528,465,1.528,466,1.326,467,1.528,468,1.528,469,1.326,470,1.528,471,1.528,472,1.528,473,1.326,474,1.528,475,2.919,476,2.085,477,2.402,478,1.528,479,1.528,480,1.528,481,1.528,482,1.528,483,1.528,484,1.326,485,1.326,486,2.813,487,2.085,488,2.085,489,1.528,490,1.528,491,1.528,634,2.883,635,2.883,636,1.834,637,1.834,638,1.834,639,1.834,640,1.834,641,1.834,642,1.834,643,1.834]],["title/classes/RegisterPayload.html",[56,0.016,203,1.497]],["body/classes/RegisterPayload.html",[3,0.354,4,0.306,5,0.216,7,0.51,9,0.456,14,2.371,15,0.034,22,1.08,27,1.121,42,1.307,45,0.402,52,1.663,55,0.354,56,0.028,69,0.018,70,0.024,71,0.018,115,0.711,121,1.902,123,1.902,133,2.851,183,3.842,199,1.998,203,2.186,249,1.679,292,3.272,321,1.519,344,2.248,375,2.851,520,3.958,521,2.922,523,4.367,524,2.536,526,4.112,527,3.335,528,4.221,529,2.536,530,2.248,531,2.536,550,3.842,551,3.842,556,3.842,557,2.922,644,2.922,645,3.507,646,3.507,647,3.507,648,3.507,649,3.507,650,3.507]],["title/classes/Roles.html",[56,0.016,110,1.253]],["body/classes/Roles.html",[3,0.346,4,0.299,5,0.211,7,0.499,8,2.912,9,0.446,14,2.207,15,0.034,22,1.005,45,0.445,55,0.346,56,0.026,69,0.018,70,0.023,71,0.018,108,2.912,110,2.153,111,2.856,115,0.705,218,1.914,247,2.614,249,1.654,262,3.285,280,2.479,291,2.416,321,1.485,356,2.572,419,1.625,429,2.912,449,2.912,457,2.614,461,3.618,462,3.923,486,2.912,559,4.833,560,5.006,563,4.245,576,3.785,578,3.785,579,3.785,580,3.785,586,3.285,589,4.93,651,2.856,652,3.429,653,3.429,654,4.543,655,4.543,656,3.429,657,3.429,658,3.429,659,4.543,660,4.543,661,3.429,662,3.429,663,3.429,664,3.429]],["title/modules/WinstonModule.html",[36,0.683,86,1.816]],["body/modules/WinstonModule.html",[3,0.361,4,0.313,5,0.221,10,1.304,15,0.034,22,0.922,26,1.703,27,0.922,28,1.564,31,1.209,36,1.327,45,0.454,47,0.848,55,0.361,56,0.018,57,1.556,58,1.319,64,1.012,69,0.018,70,0.024,71,0.018,73,1.552,78,2.784,79,2.435,86,3.176,91,2.296,92,2.468,115,0.608,172,1.319,325,3.538,395,2.296,665,3.582,666,3.582,667,4.676,668,3.538,669,3.582,670,4.676,671,3.295,672,5.725,673,4.676,674,3.582,675,3.176,676,3.582,677,3.895,678,4.676,679,3.582,680,2.59,681,2.59,682,3.582,683,4.676,684,3.582,685,3.582,686,3.582]],["title/interfaces/WinstonModuleAsyncOptions.html",[284,0.97,675,1.816]],["body/interfaces/WinstonModuleAsyncOptions.html",[3,0.397,4,0.343,5,0.242,7,0.572,9,0.511,15,0.034,28,1.66,31,1.284,36,1.237,45,0.433,55,0.501,69,0.02,70,0.026,71,0.02,78,2.354,92,2.794,113,3.135,114,3.664,115,0.707,164,2.521,201,1.704,249,1.808,284,1.208,356,2.354,404,2.263,505,4.137,513,3.591,668,3.183,671,3.391,675,2.857,677,4.137,687,2.844,688,4.965,689,4.965,690,4.965,691,3.933,692,3.933,693,3.591,694,3.933]],["title/coverage.html",[695,3.108]],["body/coverage.html",[0,2.32,1,2.028,5,0.195,6,2.636,15,0.034,36,0.685,40,3.245,48,1.648,56,0.03,69,0.016,70,0.022,71,0.016,101,0.892,110,1.708,115,0.411,141,0.892,160,1.756,162,2.636,176,2.028,177,2.636,185,1.648,203,1.5,209,1.5,210,1.821,214,1.058,218,0.972,231,1.821,248,3.113,284,1.613,322,3.113,323,2.028,407,1.821,408,3.113,423,1.648,492,2.636,518,2.636,532,2.028,533,2.636,545,2.636,558,2.636,591,2.028,592,2.636,644,2.636,651,2.636,675,1.821,680,2.288,681,2.288,687,2.288,695,2.288,696,2.636,697,2.636,698,3.164,699,2.636,700,5.418,701,6.262,702,5.799,703,2.288,704,4.893,705,4.305,706,4.305,707,4.305,708,3.164,709,3.587,710,2.636,711,2.636,712,3.587,713,4.831,714,2.636,715,2.636,716,2.636,717,2.636,718,2.636,719,2.636,720,2.636,721,2.636,722,2.636,723,3.164,724,3.164]],["title/dependencies.html",[74,1.643,725,2.641]],["body/dependencies.html",[5,0.235,15,0.034,25,3.18,35,3.523,47,0.904,52,1.81,54,1.988,56,0.025,69,0.02,70,0.025,71,0.02,74,1.654,92,2.31,94,3.18,95,3.18,98,2.196,107,2.447,108,2.447,109,2.447,236,2.447,240,2.196,359,2.76,361,2.76,413,2.447,414,2.447,419,1.81,530,2.447,534,2.76,726,3.817,727,5.653,728,3.817,729,3.817,730,3.817,731,4.059,732,4.471,733,4.709,734,3.817,735,3.817,736,3.817,737,3.817,738,3.817,739,3.817,740,4.059,741,4.059,742,3.817,743,4.059,744,3.817,745,3.817,746,4.059,747,3.817,748,3.817,749,3.817,750,3.18,751,3.817,752,3.817,753,3.817,754,3.817,755,3.817,756,3.817,757,3.817,758,3.817,759,3.817,760,3.817,761,2.76,762,3.817,763,3.817,764,3.817,765,3.817]],["title/miscellaneous/enumerations.html",[766,1.376,767,3.161]],["body/miscellaneous/enumerations.html",[9,0.632,15,0.032,69,0.025,70,0.029,71,0.025,338,3.25,356,2.678,461,3.621,703,3.518,766,2.534,767,4.053,768,4.053,769,5.648]],["title/index.html",[9,0.343,770,2.641,771,2.641]],["body/index.html",[4,0.143,5,0.234,7,0.239,8,3.108,15,0.032,27,0.323,36,0.899,39,2.181,40,0.854,41,0.943,42,0.355,43,1.974,44,0.854,45,0.362,69,0.008,70,0.014,71,0.008,72,0.943,74,2.02,89,1.723,92,1.25,101,0.744,107,2.989,109,1.051,113,0.854,115,0.343,119,2.755,121,0.882,123,1.106,125,2.274,141,0.462,164,1.69,166,2.103,168,1.366,169,1.051,172,0.744,180,0.943,196,1.051,197,1.366,222,1.25,242,1.366,259,1.185,261,0.943,267,1.185,268,1.907,278,1.185,290,1.907,300,1.185,302,1.185,304,1.517,306,1.185,311,2.389,325,1.051,330,1.185,333,0.943,336,0.943,343,1.185,346,2.74,351,1.185,356,1.796,363,1.185,368,1.907,372,1.185,374,1.185,375,1.373,379,1.185,381,1.185,383,1.185,385,1.185,387,1.185,389,1.185,391,1.185,393,1.185,419,1.796,449,1.051,455,1.907,456,1.185,457,0.943,473,1.185,484,1.185,485,1.185,621,3.157,671,1.517,695,1.907,696,2.197,700,2.755,731,2.755,732,4.374,733,4.59,740,3.157,741,3.459,743,3.157,746,2.755,750,2.197,761,1.185,772,1.639,773,1.639,774,3.789,775,2.637,776,1.639,777,1.639,778,2.637,779,1.639,780,2.637,781,1.639,782,1.639,783,2.637,784,1.639,785,4.152,786,2.637,787,2.637,788,1.639,789,1.639,790,4.436,791,3.307,792,1.639,793,1.639,794,3.307,795,1.639,796,1.639,797,1.639,798,5.638,799,3.307,800,3.307,801,1.639,802,1.639,803,3.885,804,1.639,805,1.639,806,1.639,807,1.639,808,3.789,809,3.307,810,3.307,811,2.637,812,1.639,813,2.637,814,2.637,815,3.789,816,2.637,817,3.307,818,1.639,819,1.639,820,1.639,821,3.307,822,3.307,823,1.639,824,1.639,825,3.307,826,1.639,827,2.637,828,2.637,829,1.639,830,1.639,831,1.639,832,1.639,833,2.637,834,1.639,835,1.639,836,1.639,837,1.639,838,1.639,839,1.639,840,3.307,841,1.639,842,1.639,843,4.152,844,2.637,845,1.639,846,1.639,847,1.639,848,2.637,849,5.137,850,3.789,851,1.639,852,3.307,853,4.849,854,1.639,855,2.637,856,2.637,857,1.639,858,1.639,859,1.639,860,1.639,861,1.639,862,1.639,863,2.637,864,1.639,865,3.307,866,1.639,867,1.639,868,1.639,869,1.639,870,1.639,871,2.637,872,3.307,873,1.639,874,3.695,875,2.637,876,1.639,877,1.639,878,1.639,879,1.639,880,1.639,881,2.637,882,1.639,883,1.639,884,1.639,885,1.639,886,1.639,887,1.639,888,1.639,889,2.755,890,1.639,891,1.639,892,1.639,893,1.639,894,1.639,895,1.639,896,1.639,897,1.639,898,1.639,899,2.637,900,1.639,901,1.639,902,2.637,903,1.366,904,1.639,905,1.639,906,1.639,907,1.639,908,1.639,909,2.197,910,1.639,911,1.639,912,1.639,913,2.637,914,1.639,915,2.637,916,1.639,917,1.639,918,1.639,919,2.637,920,1.639,921,1.639,922,1.639,923,1.639,924,2.637,925,2.637,926,2.637,927,1.639,928,2.637,929,1.639,930,1.639,931,1.639,932,2.637,933,1.639,934,2.637,935,1.639,936,1.639,937,2.637,938,1.639,939,1.639,940,2.637,941,1.639,942,2.637,943,1.639,944,1.639,945,1.639,946,2.637,947,1.639,948,1.639,949,1.639,950,1.639,951,1.639,952,3.157,953,1.639,954,1.639,955,1.639,956,1.639,957,1.639,958,1.639,959,1.639,960,1.639,961,1.639,962,2.637,963,2.637,964,2.637,965,1.639,966,1.639,967,1.639,968,1.639,969,2.637,970,1.639,971,1.639,972,2.637,973,1.639,974,1.639,975,1.639,976,1.639,977,1.639,978,1.639,979,1.639,980,1.639,981,1.639,982,2.637,983,1.639,984,1.639,985,2.637,986,3.789,987,3.307,988,3.789,989,2.637,990,2.637,991,1.639,992,1.639,993,1.639,994,3.307,995,1.639,996,1.639,997,3.307,998,1.639,999,1.639,1000,1.639,1001,1.639,1002,1.639,1003,1.639,1004,1.639,1005,1.639,1006,1.639,1007,1.639,1008,1.639,1009,1.639,1010,2.755,1011,2.197,1012,1.639,1013,1.639,1014,1.639,1015,1.639,1016,1.639,1017,1.639,1018,1.639,1019,1.639,1020,1.639,1021,1.639,1022,1.639,1023,1.639,1024,1.639,1025,1.639,1026,1.639,1027,1.639,1028,1.639,1029,1.639,1030,1.639,1031,2.637,1032,2.637,1033,1.639,1034,1.639,1035,1.639,1036,1.639,1037,1.639,1038,1.639,1039,1.639,1040,1.639,1041,1.639,1042,1.639,1043,1.639]],["title/modules.html",[73,1.862]],["body/modules.html",[15,0.029,69,0.024,70,0.029,71,0.024,72,2.721,73,2.048,83,2.721,84,2.463,85,2.463,86,2.721,952,5.071,1044,6.087,1045,6.087,1046,6.206,1047,4.728,1048,4.728]],["title/overview.html",[1049,3.581]],["body/overview.html",[2,1.843,15,0.033,36,0.841,48,2.819,69,0.02,70,0.025,71,0.02,72,3.651,73,1.684,74,1.684,75,2.237,76,2.237,77,2.237,78,1.843,79,2.025,80,3.239,81,3.239,82,3.239,83,3.633,84,3.059,85,3.175,86,3.114,87,2.836,88,2.237,89,2.025,101,1.605,161,2.237,209,2.566,214,2.038,228,3.239,230,3.239,231,3.114,314,3.239,315,3.239,321,1.684,404,2.237,628,3.239,629,3.239,630,3.239,1049,3.239,1050,3.888,1051,3.888,1052,4.929,1053,3.888]],["title/miscellaneous/typealiases.html",[766,1.376,1054,3.794]],["body/miscellaneous/typealiases.html",[9,0.64,15,0.029,69,0.025,70,0.029,71,0.025,115,0.64,164,3.155,668,3.645,671,2.832,687,3.559,693,3.559,766,2.563,1055,4.922,1056,4.922]],["title/miscellaneous/variables.html",[333,2.183,766,1.376]],["body/miscellaneous/variables.html",[7,0.579,8,2.954,9,0.367,15,0.034,18,1.625,27,0.557,36,0.997,42,1.242,43,1.471,57,1.122,64,0.861,69,0.015,70,0.02,71,0.015,92,2.372,110,1.829,113,2.073,114,2.954,115,0.784,141,1.122,166,1.887,172,1.122,180,1.625,181,1.121,261,1.625,318,3.839,333,1.625,338,3.502,339,1.471,356,2.905,378,2.043,395,1.811,431,1.811,469,2.043,513,2.043,668,2.551,671,2.651,675,1.625,680,2.878,681,2.878,693,2.043,697,2.353,699,2.353,703,2.043,709,2.353,710,4.167,711,4.167,712,2.353,713,2.353,714,3.839,715,3.839,716,3.315,717,3.315,718,3.315,719,3.315,720,3.315,721,2.353,722,3.315,761,2.043,766,1.471,768,2.353,803,2.353,874,2.353,889,3.839,903,2.353,909,2.353,1010,3.315,1011,4.782,1057,2.825,1058,3.98,1059,2.825,1060,5.622,1061,3.98,1062,2.825,1063,2.825,1064,2.825,1065,2.825,1066,2.825,1067,2.825,1068,2.825,1069,2.825,1070,3.98,1071,2.825,1072,2.825,1073,2.825,1074,5.273,1075,2.825,1076,2.825,1077,3.98,1078,3.98,1079,2.825,1080,2.825,1081,3.98,1082,2.825,1083,2.825,1084,2.825,1085,2.825,1086,2.825,1087,2.825,1088,2.825,1089,2.825,1090,2.825,1091,2.825,1092,2.825,1093,2.825]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["0.1.13",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["0.2.19",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["1.0",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":827,"title":{},"body":{"index.html":{}}}],["100",{"_index":700,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["14d",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["16.1.4",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["2.17.1",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["201",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":895,"title":{},"body":{"index.html":{}}}],["255",{"_index":568,"title":{},"body":{"classes/Profile.html":{}}}],["3",{"_index":1051,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["3.21.1",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["4",{"_index":1052,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":896,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["401",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":474,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["5",{"_index":1050,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["7",{"_index":1053,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["8080",{"_index":1008,"title":{},"body":{"index.html":{}}}],["9000",{"_index":857,"title":{},"body":{"index.html":{}}}],["__dirname",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction",{"_index":1022,"title":{},"body":{"index.html":{}}}],["access",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"classes/Roles.html":{},"dependencies.html":{}}}],["accesscontrolmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["account",{"_index":452,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["acguard",{"_index":613,"title":{},"body":{"controllers/ProfileController.html":{}}}],["acguard)@useroles({resource",{"_index":597,"title":{},"body":{"controllers/ProfileController.html":{}}}],["action",{"_index":598,"title":{},"body":{"controllers/ProfileController.html":{}}}],["acts",{"_index":1021,"title":{},"body":{"index.html":{}}}],["actual",{"_index":911,"title":{},"body":{"index.html":{}}}],["addbearerauth(swagger_api_auth_name",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":906,"title":{},"body":{"index.html":{}}}],["admin",{"_index":769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["against",{"_index":368,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["aliases",{"_index":1055,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":388,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["alphanumeric",{"_index":892,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1036,"title":{},"body":{"index.html":{}}}],["angular",{"_index":783,"title":{},"body":{"index.html":{}}}],["another",{"_index":456,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["any'})@apiresponse({status",{"_index":600,"title":{},"body":{"controllers/ProfileController.html":{}}}],["anything",{"_index":974,"title":{},"body":{"index.html":{}}}],["api",{"_index":1011,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api/auth",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/docs",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/profile",{"_index":593,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["apimodelproperty",{"_index":526,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apimodelproperty()@isemail()@isnotempty",{"_index":547,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty()@isnotempty()@minlength(8",{"_index":553,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty()@matches(/^[a",{"_index":549,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty({required",{"_index":520,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apiresponse",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apis",{"_index":1015,"title":{},"body":{"index.html":{}}}],["apiusetags",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apiusetags('authentication",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags('profile",{"_index":616,"title":{},"body":{"controllers/ProfileController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/Roles.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["app.register(fastifyratelimiter",{"_index":939,"title":{},"body":{"index.html":{}}}],["app.register(headers",{"_index":938,"title":{},"body":{"index.html":{}}}],["app.roles",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"classes/Roles.html":{}}}],["app.service",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.use",{"_index":945,"title":{},"body":{"index.html":{}}}],["app.use(headers",{"_index":944,"title":{},"body":{"index.html":{}}}],["app/roles.entity",{"_index":422,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["app_env",{"_index":372,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["app_url",{"_index":169,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":780,"title":{},"body":{"index.html":{}}}],["applied",{"_index":355,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["appmodule",{"_index":72,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["approles",{"_index":461,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"miscellaneous/enumerations.html":{}}}],["approles.admin",{"_index":662,"title":{},"body":{"classes/Roles.html":{}}}],["appservice",{"_index":48,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appurl",{"_index":173,"title":{},"body":{"injectables/AppService.html":{}}}],["args",{"_index":694,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["array",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":337,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["async",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":677,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["auth.controller",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/payload/register.payload",{"_index":421,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["authcontroller",{"_index":176,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["authenticating",{"_index":899,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["authmodule",{"_index":83,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1043,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice",{"_index":209,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1048,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":466,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["await",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["backend",{"_index":789,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1037,"title":{},"body":{"index.html":{}}}],["bad",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":415,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["base",{"_index":885,"title":{},"body":{"index.html":{}}}],["based",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Roles.html":{}}}],["basis",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["before",{"_index":573,"title":{},"body":{"classes/Profile.html":{}}}],["being",{"_index":957,"title":{},"body":{"index.html":{}}}],["below",{"_index":821,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":918,"title":{},"body":{"index.html":{}}}],["between",{"_index":925,"title":{},"body":{"index.html":{}}}],["beware",{"_index":659,"title":{},"body":{"classes/Roles.html":{}}}],["bloated",{"_index":955,"title":{},"body":{"index.html":{}}}],["body",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{}}}],["boilerplate",{"_index":785,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":347,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["bootstrap",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["both",{"_index":815,"title":{},"body":{"index.html":{}}}],["box",{"_index":794,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1046,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1044,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":775,"title":{},"body":{"index.html":{}}}],["bypass",{"_index":831,"title":{},"body":{"index.html":{}}}],["callback",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cascade",{"_index":655,"title":{},"body":{"classes/Roles.html":{}}}],["change",{"_index":924,"title":{},"body":{"index.html":{}}}],["changed",{"_index":920,"title":{},"body":{"index.html":{}}}],["check",{"_index":397,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["checks",{"_index":342,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["choice",{"_index":813,"title":{},"body":{"index.html":{}}}],["choose",{"_index":455,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["choosing",{"_index":915,"title":{},"body":{"index.html":{}}}],["class",{"_index":56,"title":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":321,"title":{},"body":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":314,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":315,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":628,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":629,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":630,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["code",{"_index":928,"title":{},"body":{"index.html":{}}}],["column",{"_index":560,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["column({name",{"_index":566,"title":{},"body":{"classes/Profile.html":{}}}],["column({type",{"_index":657,"title":{},"body":{"classes/Roles.html":{}}}],["column({unique",{"_index":581,"title":{},"body":{"classes/Profile.html":{}}}],["comes",{"_index":790,"title":{},"body":{"index.html":{}}}],["command",{"_index":843,"title":{},"body":{"index.html":{}}}],["completed",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["completed'})@apiresponse({status",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["compose",{"_index":814,"title":{},"body":{"index.html":{}}}],["config",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["config.service",{"_index":317,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":84,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":101,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["configservice('.env",{"_index":320,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('db_database",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('webtoken_secret_key",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.isenv('dev",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.validateinput(config",{"_index":366,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["configuration",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":1029,"title":{},"body":{"index.html":{}}}],["configureopenapi",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conflict",{"_index":860,"title":{},"body":{"index.html":{}}}],["connection",{"_index":898,"title":{},"body":{"index.html":{}}}],["connections",{"_index":910,"title":{},"body":{"index.html":{}}}],["console",{"_index":937,"title":{},"body":{"index.html":{}}}],["const",{"_index":172,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["constructor(config",{"_index":163,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(configservice",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(filepath",{"_index":327,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["constructor(jwtservice",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["constructor(profilerepository",{"_index":636,"title":{},"body":{"injectables/ProfileService.html":{}}}],["contain",{"_index":331,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["container",{"_index":868,"title":{},"body":{"index.html":{}}}],["control",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{},"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["controller('api/auth",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('api/profile",{"_index":617,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["corresponding",{"_index":975,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":695,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":841,"title":{},"body":{"index.html":{}}}],["create",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["create(payload",{"_index":450,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["created",{"_index":449,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"index.html":{}}}],["createlogger(loggeropts",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('profiles",{"_index":440,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["creates",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["createtoken",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["createtoken(undefined",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["createwinstonasyncproviders",{"_index":680,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonasyncproviders(options",{"_index":685,"title":{},"body":{"modules/WinstonModule.html":{}}}],["createwinstonproviders",{"_index":681,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonproviders(options",{"_index":684,"title":{},"body":{"modules/WinstonModule.html":{}}}],["crud",{"_index":410,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["crypto",{"_index":413,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["crypto.createhmac('sha256",{"_index":445,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{}}}],["current",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currently",{"_index":454,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":473,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["daily",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":431,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["databases",{"_index":1024,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":393,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_host",{"_index":389,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_password",{"_index":387,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_port",{"_index":391,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_type",{"_index":383,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_username",{"_index":385,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["dd",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["declaring",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}}}],["dedicated",{"_index":1017,"title":{},"body":{"index.html":{}}}],["default",{"_index":356,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultmeta",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{}}}],["delete",{"_index":486,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["delete(':username",{"_index":625,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username')@useguards(undefined",{"_index":596,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":487,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["deleted",{"_index":488,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["deleted.affected",{"_index":490,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["demand",{"_index":999,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":74,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploying",{"_index":863,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":838,"title":{},"body":{"index.html":{}}}],["describe",{"_index":1013,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":811,"title":{},"body":{"index.html":{}}}],["detached",{"_index":869,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":931,"title":{},"body":{"index.html":{}}}],["details",{"_index":1027,"title":{},"body":{"index.html":{}}}],["determines",{"_index":882,"title":{},"body":{"index.html":{}}}],["dev",{"_index":884,"title":{},"body":{"index.html":{}}}],["development",{"_index":855,"title":{},"body":{"index.html":{}}}],["different",{"_index":908,"title":{},"body":{"index.html":{}}}],["directory",{"_index":866,"title":{},"body":{"index.html":{}}}],["docker",{"_index":798,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":875,"title":{},"body":{"index.html":{}}}],["docs",{"_index":997,"title":{},"body":{"index.html":{}}}],["document",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":696,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentbuilder",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doesn't",{"_index":859,"title":{},"body":{"index.html":{}}}],["done",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dotenv",{"_index":359,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["download",{"_index":848,"title":{},"body":{"index.html":{}}}],["dto",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["dynamicmodule",{"_index":672,"title":{},"body":{"modules/WinstonModule.html":{}}}],["e2e",{"_index":989,"title":{},"body":{"index.html":{}}}],["each",{"_index":947,"title":{},"body":{"index.html":{}}}],["edit",{"_index":475,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["edit(payload",{"_index":477,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["efficient",{"_index":776,"title":{},"body":{"index.html":{}}}],["email",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["employs",{"_index":571,"title":{},"body":{"classes/Profile.html":{}}}],["empty",{"_index":901,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":890,"title":{},"body":{"index.html":{}}}],["end",{"_index":1005,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":903,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ensures",{"_index":350,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["entities",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":559,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["entity{.ts,.js",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":462,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["enumerations",{"_index":767,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":346,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["env.example",{"_index":842,"title":{},"body":{"index.html":{}}}],["envconfig",{"_index":323,"title":{"interfaces/EnvConfig.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["environment",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["envvarsschema",{"_index":369,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envvarsschema.validate",{"_index":399,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error(`config",{"_index":400,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error.message",{"_index":401,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["especially",{"_index":956,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":583,"title":{},"body":{"classes/Profile.html":{}}}],["exec",{"_index":987,"title":{},"body":{"index.html":{}}}],["execute",{"_index":864,"title":{},"body":{"index.html":{}}}],["executing",{"_index":833,"title":{},"body":{"index.html":{}}}],["exist",{"_index":484,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["existing",{"_index":845,"title":{},"body":{"index.html":{}}}],["exists",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["exp",{"_index":515,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expire",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["expires",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expiresin",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiresprettyprint",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["export",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["exports",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"overview.html":{}}}],["exposed",{"_index":856,"title":{},"body":{"index.html":{}}}],["express",{"_index":732,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extends",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["extractjwt",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":509,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factory",{"_index":690,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["false",{"_index":511,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fastify",{"_index":733,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastifyadapter",{"_index":932,"title":{},"body":{"index.html":{}}}],["fastifyratelimiter",{"_index":935,"title":{},"body":{"index.html":{}}}],["feature",{"_index":980,"title":{},"body":{"index.html":{}}}],["features",{"_index":793,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":606,"title":{},"body":{"controllers/ProfileController.html":{}}}],["fetches",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["field",{"_index":523,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["fields",{"_index":448,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["filepath",{"_index":329,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["files",{"_index":1006,"title":{},"body":{"index.html":{}}}],["folder",{"_index":1003,"title":{},"body":{"index.html":{}}}],["follow",{"_index":818,"title":{},"body":{"index.html":{}}}],["following",{"_index":865,"title":{},"body":{"index.html":{}}}],["format",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["formats",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["forroot",{"_index":666,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forroot(options",{"_index":667,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync",{"_index":673,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync(options",{"_index":674,"title":{},"body":{"modules/WinstonModule.html":{}}}],["found",{"_index":621,"title":{},"body":{"controllers/ProfileController.html":{},"index.html":{}}}],["framework",{"_index":774,"title":{},"body":{"index.html":{}}}],["free",{"_index":823,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":537,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1004,"title":{},"body":{"index.html":{}}}],["fs",{"_index":362,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["function",{"_index":689,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["further",{"_index":1026,"title":{},"body":{"index.html":{}}}],["generate",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["generated",{"_index":998,"title":{},"body":{"index.html":{}}}],["get(':username",{"_index":618,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get(':username')@useguards(undefined)@apiresponse({status",{"_index":605,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('request/user",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["get('request/user')@useguards(undefined)@apiresponse({status",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@useguards(undefined)@apiresponse({status",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["get(id",{"_index":432,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["get(key",{"_index":334,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["getbyusername",{"_index":634,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusername(username",{"_index":435,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getbyusernameandpass",{"_index":635,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass(username",{"_index":438,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getone",{"_index":447,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getprofile",{"_index":594,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(@param('username",{"_index":619,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(username",{"_index":604,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getrequestuser",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getrequestuser(@req",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["getrequestuser(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":770,"title":{"index.html":{}},"body":{}}],["github",{"_index":995,"title":{},"body":{"index.html":{}}}],["given",{"_index":339,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":678,"title":{},"body":{"modules/WinstonModule.html":{}}}],["grabs",{"_index":539,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["graph",{"_index":1047,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":414,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["grow",{"_index":1033,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":361,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["hash",{"_index":540,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{}}}],["hashed",{"_index":437,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["header",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":934,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":781,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":743,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":1041,"title":{},"body":{"index.html":{}}}],["host",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1007,"title":{},"body":{"index.html":{}}}],["hour",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["hours",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["hrf",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["http",{"_index":469,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:3306",{"_index":878,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":877,"title":{},"body":{"index.html":{}}}],["http://localhost:9000",{"_index":876,"title":{},"body":{"index.html":{}}}],["https",{"_index":378,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["iat",{"_index":514,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["identifier",{"_index":697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["igenericmessagebody",{"_index":407,"title":{"interfaces/IGenericMessageBody.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":510,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":535,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["imports",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}}}],["including",{"_index":354,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":405,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["indicating",{"_index":893,"title":{},"body":{"index.html":{}}}],["inestapplication",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["inject",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inject('winston",{"_index":171,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":160,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["injectables",{"_index":161,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"overview.html":{}}}],["injected",{"_index":332,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["injecting",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectrepository",{"_index":417,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(profile",{"_index":427,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(roles",{"_index":428,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["inspired",{"_index":782,"title":{},"body":{"index.html":{}}}],["instead",{"_index":921,"title":{},"body":{"index.html":{}}}],["interface",{"_index":284,"title":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":404,"title":{},"body":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["ip",{"_index":948,"title":{},"body":{"index.html":{}}}],["iprofile",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["isalphanumeric",{"_index":527,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isemail",{"_index":556,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isenv",{"_index":324,"title":{},"body":{"classes/ConfigService.html":{}}}],["isenv(env",{"_index":340,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["isnotempty",{"_index":528,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["it's",{"_index":894,"title":{},"body":{"index.html":{}}}],["itokenreturnbody",{"_index":210,"title":{"interfaces/ITokenReturnBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["javascript",{"_index":353,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi",{"_index":360,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default('8889",{"_index":392,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(1800",{"_index":382,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.object",{"_index":371,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.objectschema",{"_index":370,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('localhost",{"_index":390,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('mariadb",{"_index":384,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('nest",{"_index":394,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('root",{"_index":386,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().required",{"_index":380,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().uri",{"_index":376,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["join",{"_index":1039,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":508,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["jwtstrategy",{"_index":231,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":458,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["keepconnectionalive",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":336,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":480,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["layer",{"_index":1023,"title":{},"body":{"index.html":{}}}],["leave",{"_index":954,"title":{},"body":{"index.html":{}}}],["left",{"_index":900,"title":{},"body":{"index.html":{}}}],["legend",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["length",{"_index":567,"title":{},"body":{"classes/Profile.html":{}}}],["level",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":977,"title":{},"body":{"index.html":{}}}],["license",{"_index":1042,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1032,"title":{},"body":{"index.html":{}}}],["limit",{"_index":741,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["lines",{"_index":927,"title":{},"body":{"index.html":{}}}],["loads",{"_index":867,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":809,"title":{},"body":{"index.html":{}}}],["locally",{"_index":801,"title":{},"body":{"index.html":{}}}],["location",{"_index":1019,"title":{},"body":{"index.html":{}}}],["logger",{"_index":164,"title":{},"body":{"injectables/AppService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loggeroptions",{"_index":693,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loggeropts",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":791,"title":{},"body":{"index.html":{}}}],["login",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{}}}],["login(@body",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["login/register",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["loginpayload",{"_index":185,"title":{"classes/LoginPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"coverage.html":{}}}],["logs",{"_index":168,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["logs/application",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["mac",{"_index":824,"title":{},"body":{"index.html":{}}}],["made",{"_index":786,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":929,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":886,"title":{},"body":{"index.html":{}}}],["make",{"_index":799,"title":{},"body":{"index.html":{}}}],["making",{"_index":459,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["manual",{"_index":837,"title":{},"body":{"index.html":{}}}],["many",{"_index":579,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["manytoone",{"_index":661,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(type",{"_index":663,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(undefined",{"_index":653,"title":{},"body":{"classes/Roles.html":{}}}],["mapping",{"_index":363,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["mariadb",{"_index":816,"title":{},"body":{"index.html":{}}}],["matches",{"_index":344,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matches(/^[a",{"_index":557,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matching",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor((ntime",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["math.floor(ntime",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["max",{"_index":940,"title":{},"body":{"index.html":{}}}],["maxfiles",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":412,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["meta",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["method",{"_index":513,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["minlength",{"_index":529,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["minlength(8",{"_index":531,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["mins",{"_index":897,"title":{},"body":{"index.html":{}}}],["minute",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["minutes",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["miscellaneous",{"_index":766,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1031,"title":{},"body":{"index.html":{}}}],["mm",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":870,"title":{},"body":{"index.html":{}}}],["models",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["module",{"_index":36,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modulemetadata",{"_index":691,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["modules",{"_index":73,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":972,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":982,"title":{},"body":{"index.html":{}}}],["more",{"_index":1040,"title":{},"body":{"index.html":{}}}],["moving",{"_index":953,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":973,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":476,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["mysql",{"_index":750,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["mysql/mariadb",{"_index":969,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":979,"title":{},"body":{"index.html":{}}}],["needed",{"_index":351,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["nest",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{},"index.html":{}}}],["nestfactory.create",{"_index":936,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":943,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":933,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":692,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["nestjs/core",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":731,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/swagger",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["new",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nginx",{"_index":817,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":773,"title":{},"body":{"index.html":{}}}],["non",{"_index":797,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":416,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["note",{"_index":822,"title":{},"body":{"index.html":{}}}],["npm",{"_index":849,"title":{},"body":{"index.html":{}}}],["ntime",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["number",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["number(time",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["object",{"_index":330,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["object.keys(payload).foreach(key",{"_index":479,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["occurs",{"_index":961,"title":{},"body":{"index.html":{}}}],["offers",{"_index":916,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":654,"title":{},"body":{"classes/Roles.html":{}}}],["one",{"_index":457,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"index.html":{}}}],["ones",{"_index":930,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":584,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(type",{"_index":588,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(undefined",{"_index":575,"title":{},"body":{"classes/Profile.html":{}}}],["open",{"_index":1010,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["operating",{"_index":812,"title":{},"body":{"index.html":{}}}],["operation",{"_index":411,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["operations",{"_index":913,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["options",{"_index":671,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.imports",{"_index":686,"title":{},"body":{"modules/WinstonModule.html":{}}}],["options.inject",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.usefactory",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":820,"title":{},"body":{"index.html":{}}}],["over",{"_index":919,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1049,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":725,"title":{"dependencies.html":{}},"body":{}}],["package.jsoncomes",{"_index":951,"title":{},"body":{"index.html":{}}}],["pages",{"_index":996,"title":{},"body":{"index.html":{}}}],["panel",{"_index":806,"title":{},"body":{"index.html":{}}}],["param",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["param('username",{"_index":626,"title":{},"body":{"controllers/ProfileController.html":{}}}],["parameter",{"_index":345,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["parse",{"_index":358,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parse(fs.readfilesync(filepath",{"_index":364,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["partial",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["particular",{"_index":460,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["passport",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{}}}],["passportmodule.register",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":506,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["password).digest('hex",{"_index":446,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["password.transformer",{"_index":585,"title":{},"body":{"classes/Profile.html":{}}}],["passwords",{"_index":572,"title":{},"body":{"classes/Profile.html":{}}}],["passwordtransformer",{"_index":532,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["patch",{"_index":546,"title":{},"body":{"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{}}}],["patch()@useguards(undefined)@useroles({resource",{"_index":610,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile",{"_index":595,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(@body",{"_index":623,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(payload",{"_index":609,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofilepayload",{"_index":423,"title":{"classes/PatchProfilePayload.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["paylaod",{"_index":519,"title":{},"body":{"classes/LoginPayload.html":{}}}],["payload",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{}}}],["payload/login.payload",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["payload/patch.profile.payload",{"_index":424,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["payload/register.payload",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["payload[key",{"_index":482,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["per",{"_index":950,"title":{},"body":{"index.html":{}}}],["perform",{"_index":912,"title":{},"body":{"index.html":{}}}],["performance",{"_index":917,"title":{},"body":{"index.html":{}}}],["permit",{"_index":660,"title":{},"body":{"classes/Roles.html":{}}}],["personal",{"_index":846,"title":{},"body":{"index.html":{}}}],["pg",{"_index":472,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["pick",{"_index":688,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["please",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["populated",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["port",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["ports",{"_index":907,"title":{},"body":{"index.html":{}}}],["possession",{"_index":599,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":971,"title":{},"body":{"index.html":{}}}],["pre",{"_index":851,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["prerequisite",{"_index":832,"title":{},"body":{"index.html":{}}}],["prerequisites",{"_index":796,"title":{},"body":{"index.html":{}}}],["prettyprintseconds",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["prettyprintseconds(time",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["primarygeneratedcolumn",{"_index":563,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["private",{"_index":170,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["pro",{"_index":828,"title":{},"body":{"index.html":{}}}],["procedure",{"_index":819,"title":{},"body":{"index.html":{}}}],["proceed",{"_index":922,"title":{},"body":{"index.html":{}}}],["prod",{"_index":374,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["produce",{"_index":1002,"title":{},"body":{"index.html":{}}}],["production",{"_index":852,"title":{},"body":{"index.html":{}}}],["profile",{"_index":218,"title":{"classes/Profile.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{}}}],["profile.controller",{"_index":632,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.entity",{"_index":420,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["profile.roles",{"_index":664,"title":{},"body":{"classes/Roles.html":{}}}],["profile.service",{"_index":615,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.entity",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Roles.html":{}}}],["profile/profile.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["profile/profile.service",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["profile[key",{"_index":481,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profilecontroller",{"_index":591,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":85,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":425,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profiles",{"_index":586,"title":{},"body":{"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/Roles.html":{}}}],["profiles.password",{"_index":442,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profileservice",{"_index":214,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":772,"title":{},"body":{"index.html":{}}}],["project",{"_index":872,"title":{},"body":{"index.html":{}}}],["promise",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["properties",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["protocol",{"_index":468,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["prototype",{"_index":788,"title":{},"body":{"index.html":{}}}],["provide",{"_index":318,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":453,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["provider",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["provides",{"_index":1016,"title":{},"body":{"index.html":{}}}],["public",{"_index":683,"title":{},"body":{"modules/WinstonModule.html":{}}}],["purge",{"_index":962,"title":{},"body":{"index.html":{}}}],["purger",{"_index":959,"title":{},"body":{"index.html":{}}}],["queried",{"_index":430,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["quick",{"_index":873,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":787,"title":{},"body":{"index.html":{}}}],["r",{"_index":471,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["random",{"_index":891,"title":{},"body":{"index.html":{}}}],["rate",{"_index":740,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ratelimiter",{"_index":942,"title":{},"body":{"index.html":{}}}],["react",{"_index":861,"title":{},"body":{"index.html":{}}}],["read",{"_index":881,"title":{},"body":{"index.html":{}}}],["readable",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["readonly",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["received",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["received'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["recommended",{"_index":902,"title":{},"body":{"index.html":{}}}],["records",{"_index":491,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["reflect",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterPayload.html":{}}}],["register(@body",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["registerpayload",{"_index":203,"title":{"classes/RegisterPayload.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"coverage.html":{}}}],["registration",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":1020,"title":{},"body":{"index.html":{}}}],["relations",{"_index":434,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["relationship",{"_index":580,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["remove",{"_index":603,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removed",{"_index":888,"title":{},"body":{"index.html":{}}}],["removes",{"_index":602,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removing",{"_index":963,"title":{},"body":{"index.html":{}}}],["replace",{"_index":844,"title":{},"body":{"index.html":{}}}],["repository",{"_index":418,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["represent",{"_index":578,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["represents",{"_index":395,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["req",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":949,"title":{},"body":{"index.html":{}}}],["required",{"_index":375,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["reset",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["resolve",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["resource",{"_index":622,"title":{},"body":{"controllers/ProfileController.html":{}}}],["respectively",{"_index":879,"title":{},"body":{"index.html":{}}}],["response",{"_index":409,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["restful",{"_index":1014,"title":{},"body":{"index.html":{}}}],["result",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":608,"title":{},"body":{"controllers/ProfileController.html":{}}}],["return",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["rich",{"_index":981,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":964,"title":{},"body":{"index.html":{}}}],["role",{"_index":589,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["role.profile",{"_index":590,"title":{},"body":{"classes/Profile.html":{}}}],["role.role",{"_index":517,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["roles",{"_index":110,"title":{"classes/Roles.html":{}},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesbuilder",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":426,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["root",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["rotate",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["rotatefile",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["run",{"_index":853,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":470,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["safe",{"_index":858,"title":{},"body":{"index.html":{}}}],["save",{"_index":967,"title":{},"body":{"index.html":{}}}],["saveif",{"_index":966,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":777,"title":{},"body":{"index.html":{}}}],["schema",{"_index":367,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["scheme",{"_index":377,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["schemes",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["second",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["seconds",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["secret",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["secretorkey",{"_index":512,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":792,"title":{},"body":{"index.html":{}}}],["server",{"_index":778,"title":{},"body":{"index.html":{}}}],["service",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["set",{"_index":343,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["setdescription(swagger_api_description",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":444,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["setparameter('username",{"_index":443,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["setschemes(...swagger_api_schemes",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":847,"title":{},"body":{"index.html":{}}}],["settitle(swagger_api_name",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":836,"title":{},"body":{"index.html":{}}}],["setversion(swagger_api_current_version",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":887,"title":{},"body":{"index.html":{}}}],["side",{"_index":779,"title":{},"body":{"index.html":{}}}],["signed",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["signoptions",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":1000,"title":{},"body":{"index.html":{}}}],["sits",{"_index":904,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["specification",{"_index":1012,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":1035,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":970,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":978,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":768,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.hmr.ts",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.constants.ts",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.interfaces.ts",{"_index":1056,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../winston.providers.ts",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.hmr.ts",{"_index":699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/modules/app/app.controller.ts:26",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:39",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.module.ts",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/app/app.roles.ts",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.service.ts",{"_index":162,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/modules/app/app.service.ts:24",{"_index":167,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/app.service.ts:9",{"_index":165,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/roles.entity.ts",{"_index":651,"title":{},"body":{"classes/Roles.html":{},"coverage.html":{}}}],["src/modules/app/roles.entity.ts:14",{"_index":652,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:25",{"_index":658,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:31",{"_index":656,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:56",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:79",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:95",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:12",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:35",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/payload/login.payload.ts",{"_index":518,"title":{},"body":{"classes/LoginPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/login.payload.ts:16",{"_index":525,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/login.payload.ts:26",{"_index":522,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts",{"_index":644,"title":{},"body":{"classes/RegisterPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/register.payload.ts:22",{"_index":646,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:32",{"_index":650,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:42",{"_index":648,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:52",{"_index":649,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/config/config.module.ts",{"_index":316,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/modules/config/config.service.ts",{"_index":322,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/modules/config/config.service.ts:19",{"_index":328,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:36",{"_index":349,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:78",{"_index":335,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:8",{"_index":406,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/modules/config/config.service.ts:87",{"_index":341,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/profile/password.transformer.ts",{"_index":533,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["src/modules/profile/password.transformer.ts:12",{"_index":542,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/password.transformer.ts:20",{"_index":538,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts",{"_index":545,"title":{},"body":{"classes/PatchProfilePayload.html":{},"coverage.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:20",{"_index":548,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:30",{"_index":555,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:38",{"_index":552,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:46",{"_index":554,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/profile.controller.ts",{"_index":592,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/modules/profile/profile.controller.ts:40",{"_index":607,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:64",{"_index":612,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:82",{"_index":601,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.entity.ts",{"_index":558,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/modules/profile/profile.entity.ts:17",{"_index":564,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:23",{"_index":582,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:29",{"_index":565,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:35",{"_index":562,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:41",{"_index":561,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:47",{"_index":577,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:58",{"_index":570,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":631,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":408,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:115",{"_index":640,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:138",{"_index":639,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:30",{"_index":637,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:48",{"_index":641,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:57",{"_index":642,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:67",{"_index":643,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:84",{"_index":638,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/winston/winston.constants.ts",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/winston/winston.interfaces.ts",{"_index":687,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/winston/winston.module.ts",{"_index":665,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:21",{"_index":669,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:35",{"_index":676,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.providers.ts",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/constants.ts",{"_index":713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/index.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":804,"title":{},"body":{"index.html":{}}}],["start",{"_index":808,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":854,"title":{},"body":{"index.html":{}}}],["started",{"_index":771,"title":{"index.html":{}},"body":{}}],["statements",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":325,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"index.html":{}}}],["status",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["steps",{"_index":923,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":507,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":952,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":800,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1045,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":746,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swagger_api_auth_location",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_auth_name",{"_index":715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_current_version",{"_index":716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_description",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_name",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_root",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_schemes",{"_index":720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup(swagger_api_root",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":485,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["table",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":988,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":992,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":991,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":990,"title":{},"body":{"index.html":{}}}],["testing",{"_index":984,"title":{},"body":{"index.html":{}}}],["tests",{"_index":986,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1034,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":983,"title":{},"body":{"index.html":{}}}],["this.appservice.root",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(profile",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('app_url",{"_index":174,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.envconfig",{"_index":365,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig.app_env",{"_index":403,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig[key",{"_index":402,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.expiration",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.getbyusername(payload.username",{"_index":451,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.getbyusername(username",{"_index":478,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.jwtservice.sign",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.logger.info('logging",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["this.prettyprintseconds(this.expiration",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.profilerepository",{"_index":439,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.create",{"_index":465,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.delete",{"_index":489,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.findone",{"_index":436,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.findone(id",{"_index":433,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save",{"_index":464,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save(profile",{"_index":483,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profileservice.create(payload",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.profileservice.delete(username",{"_index":627,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.edit(payload",{"_index":624,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusername(username",{"_index":620,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusernameandpass",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.rolesrepository.save(roles",{"_index":463,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["throw",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["thus",{"_index":958,"title":{},"body":{"index.html":{}}}],["time",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["timediff",{"_index":516,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timewindow",{"_index":941,"title":{},"body":{"index.html":{}}}],["to(value",{"_index":541,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["toolbox",{"_index":830,"title":{},"body":{"index.html":{}}}],["transform",{"_index":543,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":534,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"dependencies.html":{}}}],["transports",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":807,"title":{},"body":{"index.html":{}}}],["true",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":524,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@isemail()@isnotempty",{"_index":645,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":521,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@matches(/^[a",{"_index":647,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["try",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["two",{"_index":926,"title":{},"body":{"index.html":{}}}],["type",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1054,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":994,"title":{},"body":{"index.html":{}}}],["typeorm",{"_index":419,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":633,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forrootasync",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":909,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["types/express",{"_index":965,"title":{},"body":{"index.html":{}}}],["typical",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["typing",{"_index":1001,"title":{},"body":{"index.html":{}}}],["ui",{"_index":761,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":576,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["undefined})@exclude",{"_index":569,"title":{},"body":{"classes/Profile.html":{}}}],["unique",{"_index":587,"title":{},"body":{"classes/Profile.html":{}}}],["unit",{"_index":985,"title":{},"body":{"index.html":{}}}],["unused",{"_index":960,"title":{},"body":{"index.html":{}}}],["up",{"_index":871,"title":{},"body":{"index.html":{}}}],["update",{"_index":611,"title":{},"body":{"controllers/ProfileController.html":{}}}],["url",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["url(payload.email",{"_index":467,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["use",{"_index":874,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":889,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["useguards(authguard('jwt",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["user",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["useroles",{"_index":614,"title":{},"body":{"controllers/ProfileController.html":{}}}],["users",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["usevalue",{"_index":319,"title":{},"body":{"modules/ConfigModule.html":{}}}],["using",{"_index":840,"title":{},"body":{"index.html":{}}}],["usually",{"_index":905,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":883,"title":{},"body":{"index.html":{}}}],["utilizing",{"_index":802,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":429,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["valid",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid('dev",{"_index":373,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validate",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":352,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validatedenvconfig",{"_index":398,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateinput",{"_index":326,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":348,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validates",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validateuser",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validateuser(undefined",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":396,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":530,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["value",{"_index":338,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PasswordTransformer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":544,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["values",{"_index":357,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["valuetransformer",{"_index":536,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{},"index.html":{}}}],["variables",{"_index":333,"title":{"miscellaneous/variables.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":1025,"title":{},"body":{"index.html":{}}}],["vm",{"_index":834,"title":{},"body":{"index.html":{}}}],["vue",{"_index":862,"title":{},"body":{"index.html":{}}}],["web",{"_index":803,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webtoken_expiration_time",{"_index":381,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["webtoken_secret_key",{"_index":379,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["where('profiles.username",{"_index":441,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["whether",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["windowms",{"_index":946,"title":{},"body":{"index.html":{}}}],["windows",{"_index":825,"title":{},"body":{"index.html":{}}}],["winson",{"_index":670,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.interfaces",{"_index":679,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.providers",{"_index":682,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.transports.console",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["winston/winston.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_options",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winston_module_provider",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule",{"_index":86,"title":{"modules/WinstonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["winstonmodule.forrootasync",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleasyncoptions",{"_index":675,"title":{"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmoduleoptions",{"_index":668,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":839,"title":{},"body":{"index.html":{}}}],["work",{"_index":1018,"title":{},"body":{"index.html":{}}}],["workaround",{"_index":829,"title":{},"body":{"index.html":{}}}],["works",{"_index":826,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":976,"title":{},"body":{"index.html":{}}}],["writing",{"_index":574,"title":{},"body":{"classes/Profile.html":{}}}],["x1f3d7",{"_index":914,"title":{},"body":{"index.html":{}}}],["x1f433",{"_index":810,"title":{},"body":{"index.html":{}}}],["x1f465",{"_index":1030,"title":{},"body":{"index.html":{}}}],["x1f4a1",{"_index":993,"title":{},"body":{"index.html":{}}}],["x1f4be",{"_index":968,"title":{},"body":{"index.html":{}}}],["x1f4da",{"_index":784,"title":{},"body":{"index.html":{}}}],["x1f4dd",{"_index":1009,"title":{},"body":{"index.html":{}}}],["x1f50a",{"_index":1028,"title":{},"body":{"index.html":{}}}],["x1f512",{"_index":880,"title":{},"body":{"index.html":{}}}],["x1f680",{"_index":835,"title":{},"body":{"index.html":{}}}],["x1f6e0",{"_index":795,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":805,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":850,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1038,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":551,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["za",{"_index":550,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["zippedarchive",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequestUser\n                            \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequestUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequestUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/user')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:39\n                \n            \n\n\n            \n                \n                    Fetches request metadata\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        the request user populated from the passport module\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:26\n                \n            \n\n\n            \n                \n                    Returns the an environment variable from config file\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application environment url\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param appService\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns the an environment variable from config file\n   * @returns {string} the application environment url\n   */\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  root(): string {\n    return this.appService.root();\n  }\n\n  /**\n   * Fetches request metadata\n   * @param {Req} req the request body\n   * @returns {Partial} the request user populated from the passport module\n   */\n  @Get('request/user')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Request Received' })\n  @ApiResponse({ status: 400, description: 'Request Failed' })\n  getRequestUser(@Req() req): Partial {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            WinstonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as winston from 'winston';\nimport * as rotateFile from 'winston-daily-rotate-file';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '../config/config.module';\nimport { ConfigService } from '../config/config.service';\nimport { AuthModule } from '../auth/auth.module';\nimport { ProfileModule } from '../profile/profile.module';\nimport { WinstonModule } from '../winston/winston.module';\nimport { AccessControlModule } from 'nest-access-control';\nimport { roles } from './app.roles';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + './../**/**.entity{.ts,.js}'],\n          synchronize: configService.isEnv('dev'),\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.isEnv('dev')\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new rotateFile({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AccessControlModule.forRoles(roles),\n    ConfigModule,\n    AuthModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.service.ts\n        \n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/app/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logger service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/app/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetches and logs the APP_URL environment variable from the configuration file.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application url\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '../config/config.service';\nimport { Logger } from 'winston';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {ConfigService} config configuration service\n   * @param {Logger} logger logger service\n   */\n  constructor(\n    private readonly config: ConfigService,\n    @Inject('winston') private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Fetches and logs the APP_URL environment variable from the configuration file.\n   * @returns {string} the application url\n   */\n  root(): string {\n    const appURL = this.config.get('APP_URL');\n    this.logger.info('Logging the APP_URL -> ' + appURL);\n    return appURL;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { AuthService, ITokenReturnBody } from './auth.service';\nimport { LoginPayload } from './payload/login.payload';\nimport { RegisterPayload } from './payload/register.payload';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Authentication Controller\n */\n@ApiUseTags('authentication')\n@Controller('api/auth')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginPayload} payload the login dto\n   */\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginPayload): Promise {\n    const profile = await this.authService.validateUser(payload);\n    return await this.authService.createToken(profile);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterPayload} payload the registration dto\n   */\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterPayload) {\n    const profile = await this.profileService.create(payload);\n    return await this.authService.createToken(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { ProfileModule } from '../profile/profile.module';\nimport { ConfigModule } from '../config/config.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '../config/config.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_SECRET_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n    ConfigModule,\n    ProfileModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [PassportModule.register({ defaultStrategy: 'jwt' })],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Private\n                                prettyPrintSeconds\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                profile service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on IProfile payload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            prettyPrintSeconds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prettyPrintSeconds(time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n                    Formats the time in seconds into human-readable format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        hrf time\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:95\n                \n            \n\n\n            \n                \n                    Validates whether or not the profile exists in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered profile\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                        Time in seconds when the token is to expire\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    email,\n  }: Profile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser({ username, password }: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService('.env'),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Config Service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                isEnv\n                            \n                            \n                                    Private\n                                    Static\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                        Object that will contain the injected environment variables\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:78\n                \n            \n\n\n            \n                \n                    Fetches the key from the configuration file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the associated value for a given key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEnv\n                        \n                        \n                    \n                \n            \n            \n                \nisEnv(env: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:87\n                \n            \n\n\n            \n                \n                    Checks whether the application environment set in the configuration file matches the environment parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not the environment variable matches the application environment\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:36\n                \n            \n\n\n            \n                \n                    Ensures all needed variables are set, and returns the validated JavaScript object\nincluding the applied default values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the configuration object with variables from the configuration file\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        a validated environment configuration object\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Key-value mapping\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGenericMessageBody.html":{"url":"interfaces/IGenericMessageBody.html","title":"interface - IGenericMessageBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGenericMessageBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Models a typical response for a crud operation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status message to return\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   * @returns {Promise} queried profile data\n   */\n  get(id: number): Promise {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   * @returns {Promise} queried profile data\n   */\n  getByUsername(username: string): Promise {\n    return this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} queried profile data\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} created profile data\n   */\n  async create(payload: RegisterPayload): Promise {\n    const profile = await this.getByUsername(payload.username);\n\n    if (profile) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making roles for a particular profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return this.profileRepository.save(\n      this.profileRepository.create({\n        ...payload,\n        roles,\n        avatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const profile = await this.getByUsername(username);\n    if (profile) {\n      Object.keys(payload).forEach(key => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        profile[key] = payload[key];\n      });\n      return this.profileRepository.save(profile);\n    } else {\n      throw new BadRequestException(\n        'The profile with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the crud operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenReturnBody.html":{"url":"interfaces/ITokenReturnBody.html","title":"interface - ITokenReturnBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITokenReturnBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Models a typical Login/Register route return body\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expires\n                                \n                                \n                                        expiresPrettyPrint\n                                \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                    \n                                \n                                \n                                    \n                                        expires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When the token is to expire in seconds\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresPrettyPrint\n                                    \n                                \n                                \n                                    \n                                        expiresPrettyPrint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A human-readable format of expires\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Bearer token\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    email,\n  }: Profile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser({ username, password }: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtPayload, done)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                            JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    done\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to resolve the request user with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not to validate the jwt token\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy, JwtPayload } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ConfigService } from '../config/config.service';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService\n   */\n  constructor(\n    readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_SECRET_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {JwtPayload} jwtPayload validation method for jwt token\n   * @param {any} done callback to resolve the request user with\n   * @returns {Promise} whether or not to validate the jwt token\n   */\n  async validate({ iat, exp, id }: JwtPayload, done): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff  role.role) });\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginPayload.html":{"url":"classes/LoginPayload.html","title":"class - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/login.payload.ts\n        \n\n            \n                Description\n            \n            \n                Login Paylaod Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:26\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:16\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Paylaod Class\n */\nexport class LoginPayload {\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/password.transformer.ts\n        \n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            from\n                        \n                        \n                    \n                \n            \n            \n                \nfrom(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        value to return\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            to\n                        \n                        \n                    \n                \n            \n            \n                \nto(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param value string to hash\n   */\n  to(value) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash\n   * @param value value to return\n   */\n  from(value) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchProfilePayload.html":{"url":"classes/PatchProfilePayload.html","title":"class - PatchProfilePayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchProfilePayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/payload/patch.profile.payload.ts\n        \n\n            \n                Description\n            \n            \n                Patch Profile Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:20\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:38\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:46\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:30\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Patch Profile Payload Class\n */\nexport class PatchProfilePayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.entity.ts\n        \n\n            \n                Description\n            \n            \n                Profile Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Avatar column (gravatar url)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:35\n                            \n                        \n\n                \n                    \n                        Email column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:17\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Name column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'password', length: 255, transformer: undefined})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:58\n                            \n                        \n\n                \n                    \n                        Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Roles[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Column to represent a one to many relationship with the roles entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Username column\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { PasswordTransformer } from './password.transformer';\nimport { Roles } from '../app/roles.entity';\n\n/**\n * Profile Entity Class\n */\n@Entity({\n  name: 'profiles',\n})\nexport class Profile {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Avatar column (gravatar url)\n   */\n  @Column()\n  avatar: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(type => Roles, role => role.profile)\n  roles: Roles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/profile\n            \n\n            \n                Description\n            \n            \n                Profile Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                patchProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(undefined, ACGuard)@UseRoles({resource: 'profiles', action: 'delete', possession: 'any'})@ApiResponse({status: 200, description: 'Delete Profile Request Received'})@ApiResponse({status: 400, description: 'Delete Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:82\n                \n            \n\n\n            \n                \n                    Removes a profile from the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the profile has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Fetch Profile Request Received'})@ApiResponse({status: 400, description: 'Fetch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:40\n                \n            \n\n\n            \n                \n                    Retrieves a particular profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the profile given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patchProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patchProfile(payload: PatchProfilePayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@UseGuards(undefined)@UseRoles({resource: 'profiles', action: 'update', possession: 'any'})@ApiResponse({status: 200, description: 'Patch Profile Request Received'})@ApiResponse({status: 400, description: 'Patch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:64\n                \n            \n\n\n            \n                \n                    Edit a profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ACGuard, UseRoles } from 'nest-access-control';\nimport { ApiBearerAuth, ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { ProfileService, IGenericMessageBody } from './profile.service';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\nimport { Profile } from './profile.entity';\n\n/**\n * Profile Controller\n */\n@ApiBearerAuth()\n@ApiUseTags('profile')\n@Controller('api/profile')\nexport class ProfileController {\n  /**\n   * Constructor\n   * @param profileService\n   */\n  constructor(private readonly profileService: ProfileService) {}\n\n  /**\n   * Retrieves a particular profile\n   * @param username the profile given username to fetch\n   * @returns {Promise} queried profile data\n   */\n  @Get(':username')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Fetch Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Profile Request Failed' })\n  async getProfile(@Param('username') username: string): Promise {\n    const profile = await this.profileService.getByUsername(username);\n    if (!profile) {\n      throw new BadRequestException(\n        'The profile with that username could not be found.',\n      );\n    }\n    return profile;\n  }\n\n  /**\n   * Edit a profile\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  @Patch()\n  @UseGuards(AuthGuard('jwt'))\n  @UseRoles({\n    resource: 'profiles',\n    action: 'update',\n    possession: 'any',\n  })\n  @ApiResponse({ status: 200, description: 'Patch Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Patch Profile Request Failed' })\n  async patchProfile(@Body() payload: PatchProfilePayload): Promise {\n    return await this.profileService.edit(payload);\n  }\n\n  /**\n   * Removes a profile from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the profile has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(AuthGuard('jwt'), ACGuard)\n  @UseRoles({\n    resource: 'profiles',\n    action: 'delete',\n    possession: 'any',\n  })\n  @ApiResponse({ status: 200, description: 'Delete Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete Profile Request Failed' })\n  async delete(\n    @Param('username') username: string,\n  ): Promise {\n    return await this.profileService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { Profile } from './profile.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Roles } from '../app/roles.entity';\nimport { ProfileController } from './profile.controller';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile, Roles])],\n  providers: [ProfileService],\n  exports: [ProfileService],\n  controllers: [ProfileController],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Profile Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:84\n                \n            \n\n\n            \n                \n                    Create a profile with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        profile payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        created profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:138\n                \n            \n\n\n            \n                \n                    Delete profile given a username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the crud operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            edit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchProfilePayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:115\n                \n            \n\n\n            \n                \n                    Edit profile data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:48\n                \n            \n\n\n            \n                \n                    Fetches profile from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUsername\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:57\n                \n            \n\n\n            \n                \n                    Fetches profile from database by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUsernameAndPass\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:67\n                \n            \n\n\n            \n                \n                    Fetches profile by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   * @returns {Promise} queried profile data\n   */\n  get(id: number): Promise {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   * @returns {Promise} queried profile data\n   */\n  getByUsername(username: string): Promise {\n    return this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} queried profile data\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} created profile data\n   */\n  async create(payload: RegisterPayload): Promise {\n    const profile = await this.getByUsername(payload.username);\n\n    if (profile) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making roles for a particular profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return this.profileRepository.save(\n      this.profileRepository.create({\n        ...payload,\n        roles,\n        avatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const profile = await this.getByUsername(username);\n    if (profile) {\n      Object.keys(payload).forEach(key => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        profile[key] = payload[key];\n      });\n      return this.profileRepository.save(profile);\n    } else {\n      throw new BadRequestException(\n        'The profile with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the crud operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterPayload.html":{"url":"classes/RegisterPayload.html","title":"class - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/register.payload.ts\n        \n\n            \n                Description\n            \n            \n                Register Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:22\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:42\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:52\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:32\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Register Payload Class\n */\nexport class RegisterPayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Roles.html":{"url":"classes/Roles.html","title":"class - Roles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/roles.entity.ts\n        \n\n            \n                Description\n            \n            \n                Roles Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                profile\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:14\n                            \n                        \n\n                \n                    \n                        UUID column\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Profile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Column to represent a many to one relationship with the profile entity\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AppRoles\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AppRoles, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/app/roles.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { AppRoles } from './app.roles';\nimport { Profile } from '../profile/profile.entity';\n\n/**\n * Roles Entity Class\n */\n@Entity()\nexport class Roles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: AppRoles,\n    default: AppRoles.ADMIN,\n  })\n  role: AppRoles;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(type => Profile, profile => profile.roles, { onDelete: 'CASCADE' })\n  profile: Profile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WinstonModule.html":{"url":"modules/WinstonModule.html","title":"module - WinstonModule","body":"\n                   \n\n\n\n\n    Modules\n    WinstonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/winston/winston.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: WinstonModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:21\n                \n            \n\n\n            \n                \n                    Constructor for winson module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: WinstonModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:35\n                \n            \n\n\n            \n                \n                    Asynchronous constructor for winston module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport {\n  WinstonModuleAsyncOptions,\n  WinstonModuleOptions,\n} from './winston.interfaces';\nimport {\n  createWinstonAsyncProviders,\n  createWinstonProviders,\n} from './winston.providers';\n\n@Global()\n@Module({})\n/**\n * Represents a Winston Module\n */\nexport class WinstonModule {\n  /**\n   * Constructor for winson module\n   * @param options\n   */\n  public static forRoot(options: WinstonModuleOptions): DynamicModule {\n    const providers = createWinstonProviders(options);\n\n    return {\n      module: WinstonModule,\n      providers,\n      exports: providers,\n    };\n  }\n\n  /**\n   * Asynchronous constructor for winston module\n   * @param options\n   */\n  public static forRootAsync(\n    options: WinstonModuleAsyncOptions,\n  ): DynamicModule {\n    const providers = createWinstonAsyncProviders(options);\n\n    return {\n      module: WinstonModule,\n      imports: options.imports,\n      providers,\n      exports: providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WinstonModuleAsyncOptions.html":{"url":"interfaces/WinstonModuleAsyncOptions.html","title":"interface - WinstonModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WinstonModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/winston/winston.interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Asynchronous winston module options\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Providers to inject\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default factory method that returns winston module options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { LoggerOptions } from 'winston';\n\n/**\n * Logger options\n */\nexport type WinstonModuleOptions = LoggerOptions;\n\n/**\n * Asynchronous winston module options\n */\nexport interface WinstonModuleAsyncOptions\n  extends Pick {\n  /**\n   * Default factory method that returns winston module options\n   */\n  useFactory: (\n    ...args: any[]\n  ) => Promise | WinstonModuleOptions;\n\n  /**\n   * Providers to inject\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.hmr.ts\n            \n            variable\n            module\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/app.roles.ts\n            \n            variable\n            roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/roles.entity.ts\n            \n            class\n            Roles\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            interface\n            ITokenReturnBody\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/login.payload.ts\n            \n            class\n            LoginPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/register.payload.ts\n            \n            class\n            RegisterPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            interface\n            EnvConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/profile/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/profile/payload/patch.profile.payload.ts\n            \n            class\n            PatchProfilePayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.entity.ts\n            \n            class\n            Profile\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            interface\n            IGenericMessageBody\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_PROVIDER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.interfaces.ts\n            \n            interface\n            WinstonModuleAsyncOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonAsyncProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_LOCATION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_SCHEMES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/index.ts\n            \n            variable\n            configureOpenAPI\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : 16.1.4\n        \n            @nestjs/common : 6.7.2\n        \n            @nestjs/core : 6.7.2\n        \n            @nestjs/jwt : 6.1.1\n        \n            @nestjs/passport : 6.1.0\n        \n            @nestjs/platform-express : 6.7.2\n        \n            @nestjs/platform-fastify : 6.7.2\n        \n            @nestjs/swagger : 3.1.0\n        \n            @nestjs/typeorm : 6.1.3\n        \n            class-transformer : 0.2.3\n        \n            class-validator : 0.10.0\n        \n            crypto : 1.0.1\n        \n            dotenv : 8.1.0\n        \n            express-rate-limit : 5.0.0\n        \n            fastify-helmet : 3.0.1\n        \n            fastify-rate-limit : 2.3.0\n        \n            fastify-swagger : 2.4.0\n        \n            gravatar : ^1.8.0\n        \n            helmet : 3.21.1\n        \n            mysql : 2.17.1\n        \n            nest-access-control : 2.0.1\n        \n            passport : 0.4.0\n        \n            passport-jwt : 4.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rimraf : 3.0.0\n        \n            rxjs : 6.5.3\n        \n            swagger-ui-express : 4.1.1\n        \n            typeorm : 0.2.19\n        \n            winston : 3.2.1\n        \n            winston-daily-rotate-file : 4.1.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/app/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                        \n                            \n                                 DEFAULT\n                            \n                        \n                        \n                            \n                                Value : DEFAULT\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n&#x1F4DA; Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication, logging, security, and database features out of the box.\n\n&#x1F6E0;️ Prerequisites\nNon Docker\n\nPlease make sure to have MYSQL locally by utilizing a web server stack XAMPP. The control panel can then trigger MYSQL to start on localhost.\n\nDocker &#x1F433;\n\nPlease make sure to have docker desktop on the operating system of choice to quickly compose both MariaDB and Nginx. Then follow the docker procedure outlined below.\n\nNote: Docker Desktop comes free on both Mac and Windows, but it only works with Windows 10 Pro. A workaround is to get Docker Toolbox which will bypass the Windows 10 Pro prerequisite by executing in a VM.\n\n&#x1F680; Setup\nManual Deployment without Docker\n\nCreate a .env file using the cp .env.example .env command and replace the existing environment variables with personal configuration settings (username and password database).\n\nDownload dependencies using npm i or yarn\n\nStart the app for pre-production using npm run start or npm run start:dev for development (the app will be exposed on the port 9000; safe port that doesn't conflict with React, Angular, or Vue)\n\n\nDeploying with Docker &#x1F433;\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will set up and run the docker project for quick use (building both Dockerfile and Dockerfile-Nginx). Then the web application, Nginx, and MariaDB will be exposed to http://localhost:9000, http://localhost:80, and http://localhost:3306 respectively.\n\n&#x1F512; Environment Configuration\nBy default, the application comes with a config module that will inject the ConfigService to read every environment variable from the .env file.\nAPP_ENV - the application environment it will be executing as, either in development or production. Determines the type of logging options to utilize. Options: dev or prod. \nAPP_URL - the base URL for the application. Made mainly to showcase the ConfigService and can be removed if not used.\nWEBTOKEN_SECRET_KEY - the secret key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this. Not \nWEBTOKEN_EXPIRATION_TIME - the time in seconds indicating when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not recommended).\nDB_HOST - the endpoint where this database sits (usually localhost but can be a static address).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n&#x1F3D7; Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But this can be changed to use Express framework instead of Fastify. Please proceed the steps below to change between the two.\n\nReplace the following lines of code in the main.ts file with the ones detailed below.\n\n// from (fastify):\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport * as headers from 'fastify-helmet';\nimport * as fastifyRateLimiter from 'fastify-rate-limit';\nconst app = await NestFactory.create(\n  AppModule,\n  new FastifyAdapter({ logger: console }),\n);\napp.register(headers);\napp.register(fastifyRateLimiter, {\n  max: 100,\n  timeWindow: '1 minute',\n});\n\n// to (express):\nimport * as headers from 'helmet';\nimport * as rateLimiter from 'express-rate-limit';\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\napp.use(headers());\napp.use(\n  rateLimiter({\n    windowMs: 60, // 1 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }),\n);Note: The package.jsoncomes with dependencies for both Express and Fastify to support moving between two. But this can leave the project bloated especially when only one web framework is being used. Thus it is recommended that when deploying to production, a purger of unused dependencies occurs. \nIf you choose to use Fastify, this command will purge all of the Express dependencies:\n# removing Express dependencies\n$ npm rm @nestjs/platform-express express-rate-limit helmet swagger-ui-express @types/express --saveIf you choose to use Express, this command will purge all of the Fastify dependencies:\n# removing Fastify dependencies\n$ npm rm @nestjs/platform-fastify fastify-helmet fastify-rate-limit fastify-swagger --save\n&#x1F4BE; Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but support for other database types like SQLite, Postgres, MongoDB, and MSSQL exist. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like sqlite3 if necessary.\nNote: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n✅ Testing\nDocker &#x1F433;\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n&#x1F4A1; TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, simply, by typing npm run typedocs. This will produce a docs folder with the required front-end files and start hosting on localhost port 8080.\n# generate docs for code\n$ npm run typedocs\n&#x1F4DD; Open API\nOut of the box, the web app comes with an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n&#x1F50A; Logs\nThis boilerplate comes with a Winston module for logging, the configurations for Winston can be found in the app module.\n\n&#x1F465; Support\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\n\nLicense\nNest is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WinstonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            WinstonModuleOptions   (src/.../winston.interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    WinstonModuleOptions\n                \n            \n            \n                \n                    Logger options\n\n                \n            \n            \n                \n                        LoggerOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configureOpenAPI   (src/.../index.ts)\n                        \n                        \n                            createWinstonAsyncProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            createWinstonProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            module   (src/.../main.hmr.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_LOCATION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_CURRENT_VERSION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_DESCRIPTION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_ROOT   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_SCHEMES   (src/.../constants.ts)\n                        \n                        \n                            WINSTON_MODULE_OPTIONS   (src/.../winston.constants.ts)\n                        \n                        \n                            WINSTON_MODULE_PROVIDER   (src/.../winston.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/swagger/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configureOpenAPI\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (app: INestApplication) => {\n  const options = new DocumentBuilder()\n    .setTitle(SWAGGER_API_NAME)\n    .setDescription(SWAGGER_API_DESCRIPTION)\n    .setVersion(SWAGGER_API_CURRENT_VERSION)\n    .setSchemes(...SWAGGER_API_SCHEMES)\n    .addBearerAuth(SWAGGER_API_AUTH_NAME, SWAGGER_API_AUTH_LOCATION)\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup(SWAGGER_API_ROOT, app, document);\n}\n                        \n                    \n\n                \n                    \n                        Open api configuration to be used as a basis for web application\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonAsyncProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  options: WinstonModuleAsyncOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_OPTIONS,\n      useFactory: options.useFactory,\n      inject: options.inject || [],\n    },\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: (loggerOpts: LoggerOptions) => createLogger(loggerOpts),\n      inject: [WINSTON_MODULE_OPTIONS],\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Async constructor for a winston provider\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  loggerOpts: WinstonModuleOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: () => createLogger(loggerOpts),\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Constructor a winston provider\n\n                    \n                \n\n            \n        \n\n    src/main.hmr.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Represents the webpack meta data\n\n                    \n                \n\n            \n        \n\n    src/modules/app/app.roles.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolesBuilder\n\n                        \n                    \n                    \n                        \n                            Default value : new RolesBuilder()\n                        \n                    \n\n                \n                    \n                        Roles Builder\n\n                    \n                \n\n            \n        \n\n    src/swagger/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_LOCATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'header'\n                        \n                    \n\n                \n                    \n                        Where the SWAGGER_API_AUTH_NAME will be used in the request\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Authorization'\n                        \n                    \n\n                \n                    \n                        The default authentication method\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_CURRENT_VERSION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n\n                \n                    \n                        Current version of the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_DESCRIPTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API Description'\n                        \n                    \n\n                \n                    \n                        A short description for api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'API'\n                        \n                    \n\n                \n                    \n                        The name given to the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_ROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'api/docs'\n                        \n                    \n\n                \n                    \n                        The endpoint for open api ui\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_SCHEMES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Default value : ['http', 'https']\n                        \n                    \n\n                \n                    \n                        Types of api schemes\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'WinstonModuleOptions'\n                        \n                    \n\n                \n                    \n                        Token for the type of configuration to be used when declaring in the app module\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_PROVIDER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'winston'\n                        \n                    \n\n                \n                    \n                        An identifier to use for injecting the winston provider\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
